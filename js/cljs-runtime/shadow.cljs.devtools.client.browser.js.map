{"version":3,"file":"shadow.cljs.devtools.client.browser.js","sources":["shadow/cljs/devtools/client/browser.cljs"],"mappings":";;;;;;;;;;;;;AAeA,GAAA,OAAS4G;AAAT;AAAA,AAAA,AAASA,yDACP,yBAAA,zBAACuG;;AAEH,GAAA,OAASxF;AAAT;AAAA,AAAA,AAASA,kDAAY,6CAAA,7CAACe;;AAEtB,oDAAA,pDAAM5E,gHAAeC;AAArB,AACE,OAAAmD,+EAAA,6CAAA,AAAAC,pGAAQP,qHAAAA,9DAAmBQ,sHAAK,AAACC,gDAAQtD;;AAE3C,GAAA,OAAS1D;AAAT;AAAA,AAAA,AAASA,iDAAW,yBAAA,zBAAC8M;;AAErB,AAAA,mDAAA,2DAAAjB,9GAAMrL;AAAN,AAAA,IAAAsL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAtL,sFAAA,CAAA,UAAA,MAAAyL;;;AAAA,AAAA,AAAA,AAAAzL,wFAAA,WAAoBV,IAAMuM;AAA1B,6QACwEvM,5LAA1BqG,nDAAb,qRAA4DkG,rRAA3D2B,vBAAjBC,PAAf,yBAAA,wDAA2C,6CAAA,8JAAA,rRAAnC,0MAA0C,CAAA;;;AADpD,AAAA,AAAAzN,2EAAA;;AAAA,AAAA,AAAAA,qEAAA,WAAA2L;AAAA,AAAA,IAAAC,WAAA,AAAA7J,gBAAA4J;IAAAA,eAAA,AAAA3J,eAAA2J;AAAA,AAAA,OAAA3L,sFAAA4L,SAAAD;;;AAGA,6CAAA,7CAAMnJ,kGAAQlD,lGAHd;AAIE,IAAAqK,qBAAA,AAAA3D,gBAAYxG,zCADd;AACE,AAAA,oBAAAmK;AAAA,QAAAA,JAASrE;AAAT,AACE,OAAOA,OAAE,AAACc,wGAAO9G;;AACjB,oBAAA,bAACmH,uCAA0C,AAACL,wGAAO9G;;;AAEvD,GAAA,OAASsI;AAAT;AAAA,AAAA,AAASA,sDAAgB,6CAAA,7CAACC;;AAE1B,AAAK+E,oDAAQC;AAEb,4DAAA,5DAAMJ,gIAAiBvJ;AACrB,OAACwK,gBAASC,2BAA8BzK,lDAD1C;;AAGA,mDAAA,mFAAA,wGAAA,9OAAKmB;AAGL,2DAAA,mEAAA6E,9HAAM/I;AAAN,AAAA,IAAAgJ,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA/H,gCAAA,AAAA+H,+BAAA,KAAA,OAAA,QAAA,AAAA9H,8CAAAC,mBAAA6H,YAAAA;UAAAA,NAA2DrD;kBAA3D,AAAAvE,4CAAA4H,eAAA,zEAA8B7E;kBAA9B,AAAA/C,4CAAA4H,eAAA,zEAA0CC;AAGxC,IAAAjF,mBAAI,AAACC,6CAAEC,iDAAaC,rHAHtB;AAGE,AAAA,GAAAH;AAAAA;;AACI,OAACsI,0DAAgBrD;;;AAEvB,8DAAA,9DAAM6E,oIAAmBhI;AACvB,iCAAA,AAAAD,1BAAC3D,0CAAW0D,wDAAmBE,zGADjC;;AAGA;;;4GAEGT,1DAFH,lDAAMuJ;AAGJ,IAAM3L,OAAK,uBAAA,vBAACE,XAHd;AAGE,AACE,AAAcF,iBAAK,AAACuE,wBAA2BnC;;AAC/C,AAACuH,0BAA6B3J;;AAC9B,OAACD,0BAA6BC;;AAElC,iDAAA,jDAAMC,0GAAYvD;AAAlB,AACE,IAAAuJ,aAAA,AAAAtI,cAAuDjB;IAAvDwJ,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAArI,gCAAA,AAAAqI,+BAAA,KAAA,OAAA,QAAA,AAAApI,8CAAAC,mBAAAmI,YAAAA;UAAAA,NAAkD3D;kBAAlD,AAAAvE,4CAAAkI,eAAA,zEAAgBnF;oBAAhB,AAAA/C,4CAAAkI,eAAA,3EAA4BpJ;SAA5B,AAAAkB,4CAAAkI,eAAA,hEAA0ChJ;AACxC,sFAAA,tFAACL,kJAAuBC,lJAD1B,AAAA;;AAEE,AAAC0O,gDAAY,iDAAA,JAAKtO,mEAAsBJ;;AAF1C;AAAA,eAAAgJ;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAhI,qBAAA,AAAAT,cAAAsI;AAAA,AAAA,GAAA7H;AAAA,AAAA,IAAA6H,iBAAA7H;AAAA,AAAA,GAAA,AAAAC,6BAAA4H;AAAA,IAAA3H,kBAAA,AAAAC,sBAAA0H;AAAA,AAAA,eAAA,AAAAzH,qBAAAyH;eAAA3H;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAgI,aAAA,AAAA3H,gBAAAsH;IAAAK,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAtI,gCAAA,AAAAsI,+BAAA,KAAA,OAAA,QAAA,AAAArI,8CAAAC,mBAAAoI,YAAAA;UAAAA,NAAkD5D;kBAAlD,AAAAvE,4CAAAmI,eAAA,zEAAgBpF;oBAAhB,AAAA/C,4CAAAmI,eAAA,3EAA4BrJ;SAA5B,AAAAkB,4CAAAmI,eAAA,hEAA0CjJ;AACxC,sFAAA,tFAACL,kJAAuBC,lJAD1B,AAAA;;AAEE,AAAC0O,gDAAY,iDAAA,JAAKtO,mEAAsBJ;;AAF1C;AAAA,eAAA,AAAA2B,eAAAqH;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAIF,mDAAA,nDAAMxJ,8GAAcP,IAAIQ,QAAQC;AAAhC,mNAIM,WAAKE,9NAHT,OAACmM,2EACC,yDAAA,zDAACzF,qDAAMrH;AAGH,OAACU,iDAAa,CAAA,6DAAsBC,tHADtC;6HAGA,WAAKA,nFALP;AAKE,AACE,OAACD,iDAAa,CAAA,0DAAmBC;+DAEnC,WAAKA,vEARP;AAQE,AACE,OAACD,iDAAa,CAAA,oDAAaC;SAVjC;AAWG,OAACoD,+CAAWvD,tDAXf;GAYEC;;AAEJ,mDAAA,nDAAM2D,8GAAc5D,QAAQ2D;AAC1B,GAAI,AAACgC,uBAAO3F,1BADd;AAEI,IAAAgN,WAAA;AAAA,AAAA,wFAAAA,+BAAAA,/GAACrJ,yCAAAA,mDAAAA;;AACD,IAAAwJ,WACE,AAACoC;eACD,XAFFnC;kBAEOtJ;AACH,UAAA,NAAezE,JADjB;AACE,oEAEYA,tDAEA,AAAC4I,sDADD,pEAFV,IAAMX;AAIJ,QAAC3D,yCAAAA,kDAAAA,XAAS2D,8BAAAA,tHAJZ;;;IAJN+F,WAAA;iVAYoB,6CAAA,7CAACxI,8EAAQ,4CAAA,5CAACQ,iHAAkBrF,5gBAZhDsN,WAWE,wGAAA,2CAAA,0DAAA,0DAAA,vQAAChH;IAXHiH,WAAA,kBAAA;AAAA,AAAA,2BAAAJ,SAAAC,SAAAC,SAAAC,SAAAC,xDAACC;;;AAeL,4DAAA,oEAAAS,hIAAMnE;AAAN,AAAA,IAAAoE,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA5M,gCAAA,AAAA4M,+BAAA,KAAA,OAAA,QAAA,AAAA3M,8CAAAC,mBAAA0M,YAAAA;UAAAA,NAA2D1O;WAA3D,AAAAiC,4CAAAyM,eAAA,lEAAqCnF;kBAArC,AAAAtH,4CAAAyM,eAAA,zEAA0C1L;AACxC,IAAA4D,aACM2C,jBAFR;IACE3C,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA9E,gCAAA,AAAA8E,+BAAA,KAAA,OAAA,QAAA,AAAA7E,8CAAAC,mBAAA4E,YAAAA;cAAA,AAAA3E,4CAAA2E,eAAA,rEAAcpG;eAAd,AAAAyB,4CAAA2E,eAAA,tEAAsBC;IAGhB/D,WAMK,6CAAA,7CAACuD,+HALD,iBAAAmE,qBAAA,vFAIA,AAACuC;yFAJDtC;AAAA,AAAA,YAAAC,kBAAA,KAAA;;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAvI,qBAAA,AAAAT,cAAAgJ;AAAA,AAAA,GAAAvI;AAAA,AAAA,IAAAyI,mBAAAzI;AAAA,AAAA,IAAA0I,aAAA,AAAAnI,gBAAAkI;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA9I,gCAAA,AAAA8I,+BAAA,KAAA,OAAA,QAAA,AAAA7I,8CAAAC,mBAAA4I,YAAAA;UAAAA,NAA0CpE;oBAA1C,AAAAvE,4CAAA2I,eAAA,3EAAc7J;eAAd,AAAAkB,4CAAA2I,eAAA,tEAA4B9H;GAChB,AAACyD,cAAI,AAAA,2FAAWC,5GAD5B,AAAA;AAAA,IAAAqE,uBAAA;uGAAAC;AAAA,AAAA,YAAAJ,kBAAA,KAAA;;AAAA,AAAA,IAAAI,eAAAA;;AAAA,AAAA,IAAA5I,yBAAA,AAAAT,cAAAqJ;AAAA,AAAA,GAAA5I;AAAA,AAAA,IAAA4I,eAAA5I;AAAA,AAAA,GAAA,AAAAC,6BAAA2I;AAAA,IAAAC,kBAgvEsC,AAAA1I,sBAAAyI;IAhvEtCE,qBAAA,AAAAzI,gBAAAwI;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,cAAA,AAAAI,6CAAAL,gBAAAI,vEAEM/F;gCACJ,sDAAA,tDAAC/D,8CAAM+D,+EAAuBrE,7JAHhC,AAAA,AAAA,AAAAsK,uBAAAJ;;AAAA,eAAA,CAAAE,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,sFAAA,AAAAlJ,qBAAAwI;;AAAA,OAAAQ,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,cAAA,AAAAxI,gBAAAqI,1BAEM1F;sBACJ,sDAAA,tDAAC/D,8CAAM+D,+EAAuBrE,nJAHhC,AAAA,OAAA0K,2JAAA,AAAAD,sFAAA,AAAAE,eAAAZ;;;AAAA;;;;;CAAA,KAAA;;;IAAAa,mBAAA,AAAAlK,cAAA,AAAAoJ,qBAEc/H;AAFd,AAAA,GAAA6I;AAAA,OAAAC,+CAAAD,iBAAA,AAAAE,wEAAA,AAAAH,eAAAjB;;AAAA,eAAA,AAAAiB,eAAAjB;;;;;AAAA,eAAA,AAAAiB,eAAAjB;;;;;AAAA;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAAD,mBAA+ChK;;AAOxD,IAAAgB,mBAAA,AAAAC,cAAsDqB,rCAXxD;IAWEpB,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,wDAAAE;IAAAC,uBAAA,EAAA,EAAA,EAAA,CAAAA,oBAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,uDAAA,WAAA,CAAAC,gCAAA,AAAAD,qCAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,kBAAAA;cAAAA,VAAmDgB;oBAAnD,AAAAZ,4CAAAJ,qBAAA,jFAAgB7B;iBAAhB,AAAAiC,4CAAAJ,qBAAA,9EAAoBc;mBAApB,AAAAV,4CAAAJ,qBAAA,hFAAyBe;0BAAzB,AAAAX,4CAAAJ,qBAAA,vFAAgCd;AAAhC,AAAA,AACE,AAACoG,aAAgB,CAAA,qFAAA,gEAAA,8DAAA,nJAAyBpG,yEAAsB4B,4DAASC,kEAAe5C;;AAD1F;AAAA,eAAAwB;eAAAE;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAM,2BAAA,AAAAT,cAAAD;AAAA,AAAA,GAAAU;AAAA,AAAA,IAAAV,uBAAAU;AAAA,AAAA,GAAA,AAAAC,6BAAAX;AAAA,IAAAY,wBAAA,AAAAC,sBAAAb;AAAA,AAAA,eAAA,AAAAc,qBAAAd;eAAAY;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,mBAAA,AAAAC,gBAAAjB;IAAAgB,uBAAA,EAAA,EAAA,EAAA,CAAAA,oBAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,uDAAA,WAAA,CAAAV,gCAAA,AAAAU,qCAAA,KAAA,OAAA,QAAA,AAAAT,8CAAAC,mBAAAQ,kBAAAA;cAAAA,VAAmDK;oBAAnD,AAAAZ,4CAAAO,qBAAA,jFAAgBxC;iBAAhB,AAAAiC,4CAAAO,qBAAA,9EAAoBG;mBAApB,AAAAV,4CAAAO,qBAAA,hFAAyBI;0BAAzB,AAAAX,4CAAAO,qBAAA,vFAAgCzB;AAAhC,AAAA,AACE,AAACoG,aAAgB,CAAA,qFAAA,gEAAA,8DAAA,nJAAyBpG,yEAAsB4B,4DAASC,kEAAe5C;;AAD1F;AAAA,eAAA,AAAA0C,eAAAlB;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAGA,GAAA,EAAQ4F;AACN,OAAC2B;;mGAcU,AAAC3I,nGATZ,IAAMwF,iBAkBK,6CAAA,7CAACS,6HARC;kBAAAsB;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA9F,gCAAA,AAAA8F,+BAAA,KAAA,OAAA,QAAA,AAAA7F,8CAAAC,mBAAA4F,YAAAA;UAAAA,NAAiCpB;SAAjC,AAAAvE,4CAAA2F,eAAA,hEAAa3E;kBAAb,AAAAhB,4CAAA2F,eAAA,zEAAgB5C;AACd,SAAI,AAACjC,0BAAU,AAAA,+FAAcC,aAAaC,kJAMjC,AAACsD,cAAI,AAAA,2FAAWC,1YAP3B,wJAEM,AAACD,cAAI,AAAC1F,yDAAe2F,WACrB,EAAK,AAACzD,0BAAU8D,SAAS7B;;CANjC,AAACpE,+CAAO;kBAAA2N;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA1M,gCAAA,AAAA0M,+BAAA,KAAA,OAAA,QAAA,AAAAzM,8CAAAC,mBAAAwM,YAAAA;SAAA,AAAAvM,4CAAAuM,eAAA,hEAAavL;AACX,OAACF,0BAAU,AAAA,+FAAaC,aAAaC,7IADvC;;CALR,AAAC7C,+CACC;kBAAAqJ;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA5H,gCAAA,AAAA4H,+BAAA,KAAA,OAAA,QAAA,AAAA3H,8CAAAC,mBAAA0H,YAAAA;SAAAA,LAAyBC;aAAzB,AAAA1H,4CAAAyH,eAAA,pEAAa/C;AAAb,AACE,IAAA9B,mBAAI,6CAAA,7CAACC,kDAAO4C;AAAZ,AAAA,GAAA7C;AAAAA;;AACI,OAAC8J,4DAAkBhI;;;CAJ3BnG;AADX,AAsBE,GAAM,EAAK,AAAC2F,uBAAOrD,eACR,AAACrB,cAAImE;AADhB,AAEE,uEAAA,hEAACxB,iDAAawB;kBAAdkD;AAAA,AAA8B,4DAAAA,rDAACvI,iDAAaP,qBAAM+I;;;;AAFpD;;;;AAKR,yDAAA,iEAAA2D,1HAAMpG;AAAN,AAAA,IAAAqG,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA7K,gCAAA,AAAA6K,+BAAA,KAAA,OAAA,QAAA,AAAA5K,8CAAAC,mBAAA2K,YAAAA;UAAAA,NAA+C3M;cAA/C,AAAAiC,4CAAA0K,eAAA,rEAAkCC;AAAlC,AACE,IAAA+C,aAAA,AAAAlO,cAAamL;IAAbgD,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,WAAA,AAAAD,kDAAAE,zDAAQrM;GAEM,qCAAA,rCAACwB,gCAAexB,nCAF9B,AAAA;AAGE,IAAAvB,2BAAgB,AAACkH,uBAA0B,CAAA,kEAAA,NAAqB3F,nHAHlE,AAAA;AAGE,AAAA,oBAAAvB;AAAA,AAAA,iBAAAA,bAAW4B;AAAX,AACE,IAAMqB,iBACA,iBAAAhC,WAAM,uBAAA,vBAACa;AACL,AAAAb,sBAAA,MAAA,5BADF;;AAEE,AAAAA,sBAAA,OAAsB,mDAAA,NAAKM,wDAAW,AAACC;;AAFzCP;;AAIJ,sFAAA,tFAACrC,mJAAwB2C,nJAL3B;;AAME,AAACyB,4BAAwBC,eAASrB;;AAClC,AAACuJ,oBAAgBvJ;;AARrB;;AAHF;AAAA,eAAA6L;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,eAAAH;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;;AAAA,IAAA5N,qBAAA,AAAAT,cAAAkO;AAAA,AAAA,GAAAzN;AAAA,AAAA,IAAAyN,iBAAAzN;AAAA,AAAA,GAAA,AAAAC,6BAAAwN;AAAA,IAAAvN,kBAAA,AAAAC,sBAAAsN;AAAA,AAAA,eAAA,AAAArN,qBAAAqN;eAAAvN;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,WAAA,AAAAK,gBAAAkN,vBAAQlM;GAEM,qCAAA,rCAACwB,gCAAexB,nCAF9B,AAAA;AAGE,IAAAvB,+BAAgB,AAACkH,uBAA0B,CAAA,kEAAA,NAAqB3F,vHAHlE,AAAA;AAGE,AAAA,oBAAAvB;AAAA,AAAA,iBAAAA,bAAW4B;AAAX,AACE,IAAMqB,iBACA,iBAAA/B,WAAM,uBAAA,vBAACY;AACL,AAAAZ,sBAAA,MAAA,5BADF;;AAEE,AAAAA,sBAAA,OAAsB,mDAAA,NAAKK,wDAAW,AAACC;;AAFzCN;;AAIJ,sFAAA,tFAACtC,mJAAwB2C,nJAL3B;;AAME,AAACyB,4BAAwBC,eAASrB;;AAClC,AAACuJ,oBAAgBvJ;;AARrB;;AAHF;AAAA,eAAA,AAAApB,eAAAiN;eAAA;eAAA;eAAA;;;;;;;AAAA,eAAA,AAAAjN,eAAAiN;eAAA;eAAA;eAAA;;;;;;;;;AAAA;;;;;;AAgBF,qDAAA,rDAAMrI;AACJ,oBACEjD,pBAFJ;AACE;;AAAA,oBAEEoI;AAFF;;AAAA,oBAGEzD;AAHF;;AAAA,oBAIER;AAJF;;AAAA;;;;;;AAMF,qDAAA,rDAAMsD;AAAN,AACE,IAAMwC,MAAI,KAAAtG,SAAc4G;IAClB7G,MAAI,KAAAC,SAAcC;IAClBjC,IAAE,AAAW,AAAUsI,YAAIvG;AAG/B,gCAAA,WAAA,pCAAChC,uBAAYC,9BALf;;AAQF,iDAAA,jDAAM5E,0GAAY0E;AAChB,cAAA,dAACsH,kCAAqCtH,lCADxC;;AAGM,0GAAA,uKAAA,1QAACuB,mKAAkB,AAACC,9GADpB,AAACc,2CAAetC,2OAEG,AAACgG;;AAE1B,kDAAA,0DAAAyD,5GAAM7G;AAAN,AAAA,IAAA8G,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA1N,gCAAA,AAAA0N,+BAAA,KAAA,OAAA,QAAA,AAAAzN,8CAAAC,mBAAAwN,YAAAA;SAAA,AAAAvN,4CAAAuN,eAAA,hEAA2BlO;SAA3B,AAAAW,4CAAAuN,eAAA,hEAA8BrO;AAC5B,IAAMH,SAAO,0CAAA,1CAACC,bADhB;;AACe,AAAgB,OAACC,KAAQC;;CAAIC;AAA1C,kDAEM,qDAAA,rDAACC,uGAAUC,zDADXN,hGAEA,OAACkC;;AAET,mDAAA,2DAAAyF,9GAAMpH;AAAN,AAAA,IAAAqH,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA9G,gCAAA,AAAA8G,+BAAA,KAAA,OAAA,QAAA,AAAA7G,8CAAAC,mBAAA4G,YAAAA;UAAAA,NAAmD5I;SAAnD,AAAAiC,4CAAA2G,eAAA,hEAA4BtH;cAA5B,AAAAW,4CAAA2G,eAAA,rEAA+BpI;aAA/B,AAAAyB,4CAAA2G,eAAA,pEAAuCC;AACrC,IAAM5C,kBACA,tBAFR,sIAIU,iBAAMV,MAAI,AAAC0D,kBAAQzI,vJADnB,6CAAA,7CAACsE,qGAAU+D;IAELQ,OAAK,AAACC,eAAK9I;oDACX,6CAAA,7CAAC6E,8EAAQ,AAACC,+CAAOzE,0DAAgB0E,3OAFvC,AAGM,OAAC0B,yOAAKoC;qIAMZ,AAACzI,+CAAOC,yDAAeL,xOAXzB,gIAAA,RAQEA,tHADA,6CAAA,7CAACsE,6GAAc+D;;AAMrB,OAACzE,PAdH,wEAgBI,hBADA6B;kBACKzF;AAAL,AACE,AAACuD,+CAAWvD;;AACZ,kDAAA,2CAAA,qDAAA,qFAAA,hOAAC0C,kRAAyC5B;;;;AAGlD,gDAAA,wDAAA+B,xGAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAxB,gCAAA,AAAAwB,+BAAA,KAAA,OAAA,QAAA,AAAAvB,8CAAAC,mBAAAsB,YAAAA;iBAAA,AAAArB,4CAAAqB,eAAA,xEAAyBE;SAAzB,AAAAvB,4CAAAqB,eAAA,hEAAoChC;AAApC,AACE,AAACiG,sBAAOC,gDAAY,0DAAA,mFAAA,4DAAA,zMAACC,+CAAOjE;;sIAIrB,AAAC5C,+CAAOC,yDADR,AAAA,kGAAe2C,xRAEf,6CAAA,7CAAC6C,sSACN,9VALF,OAACjC;kBAKM5D;AACH,AAACuD,+CAAWvD,/CADd;;AAEE,2CAAA,2CAAA,qDAAA,8EAAA,zNAAC0C,2QAAsC5B;;AACvC,wDAAA,jDAACZ;;;;AAEP,kDAAA,0DAAA6D,5GAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA1C,gCAAA,AAAA0C,+BAAA,KAAA,OAAA,QAAA,AAAAzC,8CAAAC,mBAAAwC,YAAAA;SAAA,AAAAvC,4CAAAuC,eAAA,hEAA2BlD;SAA3B,AAAAW,4CAAAuC,eAAA,hEAA8BvB;AAA9B,AACE,AAACsE,sBAAOC,gDAAYvE;;AACpB,kDAAA,2CAAA,qDAAA,iFAAA,qDAAA,jRAACC,8QAAwC5B,mDAAO2B;;AAGlD,qDAAA,6DAAAgK,lHAAM9E;AAAN,AAAA,IAAA+E,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAApL,gCAAA,AAAAoL,+BAAA,KAAA,OAAA,QAAA,AAAAnL,8CAAAC,mBAAAkL,YAAAA;UAAAA,NAAwClN;WAAxC,AAAAiC,4CAAAiL,eAAA,lEAA8BxH;AAE5B,IAAAF,WAAME,fAFR;IAEEF,eAAA,EAAA,CAAAA,oBAAAC,iCAAA,bA+gBwC,AAAAD;AA/gBxC,AAAA,QAAAA;KAAA;AAEE,OAACc,uDAAmBtG;;;KAFtB;AAKE,OAAC0I,gDAAY1I;;;KALf;AAQE,OAACuB,iDAAavB;;;KARhB;AAWE,OAACyE,gDAAYzE;;;KAXf;AAcE,OAACuD,8CAAUvD;;;KAdb;AAiBE,AAAI,AAACD,6CAAiBC;;AAClB,OAACsK,0DAAsBtK;;;KAlB7B;AAqBE,AAAI,AAAC0P;;AACD,OAAChC,0CAAc1N;;;KAtBrB;AAyBE,OAACD,6CAAiBC;;;KAzBpB;AA4BE,AAAI,AAAC2F;;AACD,OAAC6G;;;KA7BP;AAAA;;;;AAAA;;;;AAqCF,8CAAA,9CAAMvI,oGAASC,KAAKC;AAApB,AACE,IAAA0K,WACE,CAAA,qGAAA,6FAAA,2FAAA,yGAAA,yFAAA,5aAAY,uCAAA,AAAA,IAAA,zCAAMK,kGAAmBC,2FAAkBC,0GAAiCC,0FAAiBC;eACzG,XAFFR;kBAEOxK;AACH,UAAA,NAAezE,JADjB;oEAGcA,pEAFZ,AACE,IAAM+E,gEAEI,tDACA,AAAC6D;AAHX,AAIE,oBAAMtE;AAAN,AACE,QAACA,yCAAAA,kDAAAA,XAASS,8BAAAA;;AADZ;;;;IARRmK,WAAA;eAWE,wGAAA,2CAAA,nJAACjI,yMAAe5C,pNAXlB8K;IAAAC,WAAA,kBAAA;AAAA,AAAA,2BAAAJ,SAAAC,SAAAC,SAAAC,SAAAC,xDAACjB;;AAcH,sDAAA,tDAAM1N;AAAN,AACE,IAAA4B,qBAAA,AAAAwE,gBAAcxG;AAAd,AAAA,oBAAAgC;AAAA,AAAA,QAAAA,JAAW8D;AAAX,AACE,AAAOA,OAAE,wGAAA,2CAAA,qDAAA,sDAAA,9PAACc,2SAAuB,AAAC+F;;AAClC,sEAAA,/DAACxM,WAAcC;;AAFjB;;;AAIF,iDAAA,jDAAMkJ;eAEE1J,fADN,IAAMsG,JADR;IAIQzB,SACA,uCAAA,vCAACkD;aAGD,KAAAnD,UAAeC,xBADfxE;AAGJ,AAACF,uBAAQC,+CAAWC,tEATtB;;AAWE,AAAM,AAAaA,mBACjB;kBAAK2F;AAMH,OAACoC,+CAAmBpC,EAAEqC,xDANxB;;;;AASF,AAAM,AAAUhI,gBACd;kBAAK2F;AAEH,GAAM,6CAAA,7CAAChB,oDAAS4C,vDAFlB;AAEE,AAEE,AAAM,AAAWwB,eAASC;;AAF5B;;AAGA,wDAAA,jDAACzI;;;;iBAIH,jBADF,AAAM,AAAWP;kBACV2F;AAGH,iDAAA,jDAACpF,AAHH;;AAIE,6EAAA,tEAACT,uBAAQC;;;;iBAIX,jBADF,AAAM,AAAWC;kBACV2F;AAAL,AAAA;;;;AAEF,sEAAA,/DAACzF,WAAcC;;AAGnB,GAAeiK;AAAf,AAGE,IAAArI,2BAAA,AAAAwE,gBAAcxG;AAAd,AAAA,oBAAAgC;AAAA,AAAA,cAAAA,VAAW8D;AACT,iDAAA,jDAACtF,AADH;;AAEE,AAAM,AAAWsF,kBAAG;kBAAKF;AAAL,AAAA;;;;AACpB,AAAQE;;AACR,sEAAA,tEAAC/F,uBAAQC;;AAJX;;uCAUE,vCADF,wBAAA,xBAAC+N;AACC,AACE,IAAA/L,qBAAA,AAAAwE,gBAAcxG;AAAd,AAAA,oBAAAgC;AAAA,AAAA,QAAAA,JAAW8D;AACT,OAAQA,PADV;;AAAA;;;;AAGJ,AAACwD;;AAjBH","names":["req","cljs.core/*print-fn*","shadow.cljs.devtools.client.hud/hud-warnings","msg","cljs.core/vreset!","shadow.cljs.devtools.client.browser/socket-ref","socket","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","js/setTimeout","shadow.cljs.devtools.client.browser/heartbeat!","shadow.cljs.devtools.client.browser/do-js-reload","sources","complete-fn","shadow.cljs.devtools.client.browser/devtools-msg","fn-sym","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/src-is-loaded?","shadow.cljs.devtools.client.browser.devtools_msg.cljs$core$IFn$_invoke$arity$variadic","resource-name","result","shadow.cljs.devtools.client.env/repl-call","js/eval","js","shadow.cljs.devtools.client.browser/repl-error","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","id","shadow.cljs.devtools.client.browser/repl-require","seq__37874","cljs.core/seq","chunk__37875","count__37876","i__37877","map__37878","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__37884","cljs.core/first","cljs.core/next","line","column","w","warnings","cljs.core/contains?","reload-info","ns","shadow.cljs.devtools.client.browser/ws-msg","G__37974","G__37978","p__38023","map__38024","shadow.cljs.devtools.client.browser/repl-init","repl-state","path","cljs.core.rand.cljs$core$IFn$_invoke$arity$0","shadow.cljs.devtools.client.browser/module-loaded","name","js/document.body.removeChild","node","shadow.cljs.devtools.client.browser/do-js-load","js/document.createElement","shadow.cljs.devtools.client.browser/compile","text","callback","shadow.cljs.devtools.client.browser/load-sources","goog.userAgent.product/SAFARI","res","p__38026","map__38027","shadow.cljs.devtools.client.browser/repl-set-ns","js/WebSocket","ws-url","actions","or__3922__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/goog-base-rc","resource-id","clojure.string/ends-with?","goog.dom/insertSiblingAfter","new-link","warning","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","all","G__38032","cljs.core/Keyword","type","shadow.cljs.devtools.client.hud/hud-hide","sources-to-get","cljs.core.map.cljs$core$IFn$_invoke$arity$1","e","clojure.string/replace","s","sources-to-load","code","cljs.core/empty?","print-fn","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/handle-asset-watch","cljs.core/not","src","shadow.cljs.devtools.client.browser/active-modules-ref","cljs.core/deref","module","map__37864","compiled","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/-vreset!","cljs.core/-deref","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","js/console.warn","shadow.cljs.devtools.client.env/autoload","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","shadow.cljs.devtools.client.browser/get-ua-product","cljs.core/reset!","shadow.cljs.devtools.client.browser/repl-ns-ref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env/module-format","p__37886","map__37887","shadow.cljs.devtools.client.env/ws-url","content","cbp","js/goog.Uri","js/CLOSURE_BASE_PATH","shadow.cljs.devtools.client.env/process-ws-msg","shadow.cljs.devtools.client.browser/handle-message","shadow.cljs.devtools.client.env/repl-error","js/document.createTextNode","shadow.cljs.devtools.client.browser/scripts-to-load","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","goog.userAgent.product/IE","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.browser/repl-invoke","p__38020","map__38021","reload","p1__37860#","shadow.cljs.devtools.client.hud/load-end-success","goog.userAgent.product/FIREFOX","cljs.core/butlast","js/goog","js/goog.constructNamespace_","js/document.querySelector","self","cljs.core/last","info","shadow.cljs.devtools.client.browser/ws-connect","p__37892","map__37893","rc","p__37821","map__37822","output-name","seq__37830","chunk__37831","count__37832","i__37833","map__37834","map__37836","temp__5455__auto__","shadow.cljs.devtools.client.browser/handle-build-complete","shadow.cljs.devtools.client.env/enabled","iter__4292__auto__","s__37867","cljs.core/LazySeq","xs__6012__auto__","map__37872","iterys__4288__auto__","s__37869","c__4290__auto__","size__4291__auto__","b__37871","cljs.core/chunk-buffer","i__37870","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__37868","cljs.core/cons","cljs.core/rest","fs__4289__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__37866","shadow.cljs.devtools.client.browser/get-asset-root","var_args","args__4500__auto__","len__4497__auto__","i__4498__auto__","argseq__4501__auto__","cljs.core/IndexedSeq","seq37800","G__37801","args","shadow.cljs.devtools.client.hud/load-start","goog.userAgent.product/CHROME","p__37962","map__37964","updates","js/Date.now","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$3","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core/volatile!","p__38029","map__38030","shadow.cljs.devtools.client.browser/goog-is-loaded?","js/console.error","goog.dom/removeNode","shadow.cljs.devtools.client.browser/loaded?","js/goog.isProvided_","G__37854","js/document.body.appendChild","shadow.cljs.devtools.client.hud/hud-error","G__37855","G__37856","G__37857","G__37858","G__37859","goog.net.XhrIo/send","js/window.addEventListener","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","js/console","goog.object/get","js/goog.dependencies_.written","loc","p__37889","map__37890","p__37861","map__37862","shadow.cljs.devtools.client.browser/module-is-active?","js/document.location.href","G__38039","G__38040","G__38041","G__38042","G__38043","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/repl-host","shadow.cljs.devtools.client.env/repl-port","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","p__38017","map__38018","shadow.cljs.devtools.client.browser/script-eval","shadow.cljs.devtools.client.hud/load-end","seq__37967","chunk__37970","count__37971","i__37972","shadow.cljs.devtools.client.env/files-url"],"sourcesContent":["(ns shadow.cljs.devtools.client.browser\n  (:require\n    [cljs.reader :as reader]\n    [clojure.string :as str]\n    [goog.dom :as gdom]\n    [goog.object :as gobj]\n    [goog.net.jsloader :as loader]\n    [goog.userAgent.product :as product]\n    [goog.Uri]\n    [goog.net.XhrIo :as xhr]\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.cljs.devtools.client.console]\n    [shadow.cljs.devtools.client.hud :as hud]\n    ))\n\n(defonce active-modules-ref\n  (volatile! #{}))\n\n(defonce repl-ns-ref (atom nil))\n\n(defn module-loaded [name]\n  (vswap! active-modules-ref conj (keyword name)))\n\n(defonce socket-ref (volatile! nil))\n\n(defn devtools-msg [msg & args]\n  (.apply (.-log js/console) nil (into-array (into [(str \"%cDEVTOOLS: \" msg) \"color: blue;\"] args))))\n\n(defn ws-msg [msg]\n  (if-let [s @socket-ref]\n    (.send s (pr-str msg))\n    (js/console.warn \"WEBSOCKET NOT CONNECTED\" (pr-str msg))))\n\n(defonce scripts-to-load (atom []))\n\n(def loaded? js/goog.isProvided_)\n\n(defn goog-is-loaded? [name]\n  (gobj/get js/goog.dependencies_.written name))\n\n(def goog-base-rc\n  [:shadow.build.classpath/resource \"goog/base.js\"])\n\n(defn src-is-loaded? [{:keys [resource-id output-name] :as src}]\n  ;; FIXME: don't like this special case handling, but goog/base.js will always be loaded\n  ;; but not as a separate file\n  (or (= goog-base-rc resource-id)\n      (goog-is-loaded? output-name)))\n\n(defn module-is-active? [module]\n  (contains? @active-modules-ref module))\n\n(defn script-eval\n  \"js/eval doesn't get optimized properly, this hack seems to do the trick\"\n  [code]\n  (let [node (js/document.createElement \"script\")]\n    (.appendChild node (js/document.createTextNode code))\n    (js/document.body.appendChild node)\n    (js/document.body.removeChild node)))\n\n(defn do-js-load [sources]\n  (doseq [{:keys [resource-id resource-name js] :as src} sources]\n    (devtools-msg \"load JS\" resource-name)\n    (script-eval (str js \"\\n//# sourceURL=\" resource-name))))\n\n(defn do-js-reload [msg sources complete-fn]\n  (env/do-js-reload\n    (assoc msg\n      :log-missing-fn\n      (fn [fn-sym]\n        (devtools-msg (str \"can't find fn \" fn-sym)))\n      :log-call-async\n      (fn [fn-sym]\n        (devtools-msg (str \"call async \" fn-sym)))\n      :log-call\n      (fn [fn-sym]\n        (devtools-msg (str \"call \" fn-sym))))\n    #(do-js-load sources)\n    complete-fn))\n\n(defn load-sources [sources callback]\n  (if (empty? sources)\n    (callback [])\n    (xhr/send\n      (env/files-url)\n      (fn [res]\n        (this-as ^goog req\n          (let [content\n                (-> req\n                    (.getResponseText)\n                    (reader/read-string))]\n            (callback content)\n            )))\n      \"POST\"\n      (pr-str {:client :browser\n               :sources (into [] (map :resource-id) sources)})\n      #js {\"content-type\" \"application/edn; charset=utf-8\"})))\n\n(defn handle-build-complete [{:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled]}\n        info\n\n        warnings\n        (->> (for [{:keys [resource-name warnings] :as src} sources\n                   :when (not (:from-jar src))\n                   warning warnings]\n               (assoc warning :resource-name resource-name))\n             (distinct)\n             (into []))]\n\n    (doseq [{:keys [msg line column resource-name] :as w} warnings]\n      (js/console.warn (str \"BUILD-WARNING in \" resource-name \" at [\" line \":\" column \"]\\n\\t\" msg)))\n\n    (if-not env/autoload\n      (hud/load-end-success)\n      ;; load all files for current build:\n      ;; of modules that are active\n      ;; and are either not loaded yet\n      ;; or specifically marked for reload\n      (let [sources-to-get\n            (->> sources\n                 (filter\n                   (fn [{:keys [module] :as rc}]\n                     (or (= \"js\" env/module-format)\n                         (module-is-active? module))))\n                 ;; don't reload namespaces that have ^:dev/never-reload meta\n                 (remove (fn [{:keys [ns]}]\n                           (contains? (:never-load reload-info) ns)))\n                 (filter\n                   (fn [{:keys [ns resource-id] :as src}]\n                     (or (contains? (:always-load reload-info) ns)\n                         (not (src-is-loaded? src))\n                         (and (contains? compiled resource-id)\n                              ;; never reload files from jar\n                              ;; they can't be hot-swapped so the only way they get re-compiled\n                              ;; is if they have warnings, which we can't to anything about\n                              (not (:from-jar src))))))\n                 (into []))]\n\n\n        ;; FIXME: should allow reload with warnings\n        (when (and (empty? warnings)\n                   (seq sources-to-get))\n          (load-sources sources-to-get #(do-js-reload msg % hud/load-end-success))\n          )))))\n\n(defn handle-asset-watch [{:keys [updates] :as msg}]\n  (doseq [path updates\n          ;; FIXME: could support images?\n          :when (str/ends-with? path \"css\")]\n    (when-let [node (js/document.querySelector (str \"link[href^=\\\"\" path \"\\\"]\"))]\n      (let [new-link\n            (doto (js/document.createElement \"link\")\n              (.setAttribute \"rel\" \"stylesheet\")\n              (.setAttribute \"href\" (str path \"?r=\" (rand))))]\n\n        (devtools-msg \"load CSS\" path)\n        (gdom/insertSiblingAfter new-link node)\n        (gdom/removeNode node)\n        ))))\n\n;; from https://github.com/clojure/clojurescript/blob/master/src/main/cljs/clojure/browser/repl.cljs\n;; I don't want to pull in all its other dependencies just for this function\n(defn get-ua-product []\n  (cond\n    product/SAFARI :safari\n    product/CHROME :chrome\n    product/FIREFOX :firefox\n    product/IE :ie))\n\n(defn get-asset-root []\n  (let [loc (js/goog.Uri. js/document.location.href)\n        cbp (js/goog.Uri. js/CLOSURE_BASE_PATH)\n        s (.toString (.resolve loc cbp))]\n    ;; FIXME: stacktrace starts with file:/// but resolve returns file:/\n    ;; how does this look on windows?\n    (str/replace s #\"^file:/\" \"file:///\")\n    ))\n\n(defn repl-error [e]\n  (js/console.error \"repl/invoke error\" e)\n  (-> (env/repl-error e)\n      (assoc :ua-product (get-ua-product)\n             :asset-root (get-asset-root))))\n\n(defn repl-invoke [{:keys [id js]}]\n  (let [result (env/repl-call #(js/eval js) repl-error)]\n    (-> result\n        (assoc :id id)\n        (ws-msg))))\n\n(defn repl-require [{:keys [id sources reload] :as msg}]\n  (let [sources-to-load\n        (cond\n          (= :reload reload)\n          (let [all (butlast sources)\n                self (last sources)]\n            (-> (into [] (remove src-is-loaded?) all)\n                (conj self)))\n\n          (= :reload-all reload)\n          sources\n\n          :else\n          (remove src-is-loaded? sources))]\n\n    (load-sources\n      sources-to-load\n      (fn [sources]\n        (do-js-load sources)\n        (ws-msg {:type :repl/require-complete :id id})\n        ))))\n\n(defn repl-init [{:keys [repl-state id]}]\n  (reset! repl-ns-ref (get-in repl-state [:current :ns]))\n  (load-sources\n    ;; maybe need to load some missing files to init REPL\n    (->> (:repl-sources repl-state)\n         (remove src-is-loaded?)\n         (into []))\n    (fn [sources]\n      (do-js-load sources)\n      (ws-msg {:type :repl/init-complete :id id})\n      (devtools-msg \"REPL init successful\"))))\n\n(defn repl-set-ns [{:keys [id ns]}]\n  (reset! repl-ns-ref ns)\n  (ws-msg {:type :repl/set-ns-complete :id id :ns ns}))\n\n;; FIXME: core.async-ify this\n(defn handle-message [{:keys [type] :as msg}]\n  ;; (js/console.log \"ws-msg\" msg)\n  (case type\n    :asset-watch\n    (handle-asset-watch msg)\n\n    :repl/invoke\n    (repl-invoke msg)\n\n    :repl/require\n    (repl-require msg)\n\n    :repl/set-ns\n    (repl-set-ns msg)\n\n    :repl/init\n    (repl-init msg)\n\n    :build-complete\n    (do (hud/hud-warnings msg)\n        (handle-build-complete msg))\n\n    :build-failure\n    (do (hud/load-end)\n        (hud/hud-error msg))\n\n    :build-init\n    (hud/hud-warnings msg)\n\n    :build-start\n    (do (hud/hud-hide)\n        (hud/load-start))\n\n    :pong\n    nil\n\n    ;; default\n    :ignored))\n\n(defn compile [text callback]\n  (xhr/send\n    (str \"http\" (when env/ssl \"s\") \"://\" env/repl-host \":\" env/repl-port \"/worker/compile/\" env/build-id \"/\" env/proc-id \"/browser\")\n    (fn [res]\n      (this-as ^goog req\n        (let [actions\n              (-> req\n                  (.getResponseText)\n                  (reader/read-string))]\n          (when callback\n            (callback actions)))))\n    \"POST\"\n    (pr-str {:input text})\n    #js {\"content-type\" \"application/edn; charset=utf-8\"}))\n\n(defn heartbeat! []\n  (when-let [s @socket-ref]\n    (.send s (pr-str {:type :ping :v (js/Date.now)}))\n    (js/setTimeout heartbeat! 30000)))\n\n(defn ws-connect []\n  (let [print-fn\n        cljs.core/*print-fn*\n\n        ws-url\n        (env/ws-url :browser)\n\n        socket\n        (js/WebSocket. ws-url)]\n\n    (vreset! socket-ref socket)\n\n    (set! (.-onmessage socket)\n      (fn [e]\n        #_(set-print-fn! (fn [& args]\n                           (ws-msg {:type :repl/out\n                                    :out (into [] args)})\n                           (apply print-fn args)))\n\n        (env/process-ws-msg e handle-message)\n        ))\n\n    (set! (.-onopen socket)\n      (fn [e]\n        ;; :module-format :js already patches provide\n        (when (= \"goog\" env/module-format)\n          ;; patch away the already declared exception\n          (set! (.-provide js/goog) js/goog.constructNamespace_))\n        (devtools-msg \"connected!\")\n        ))\n\n    (set! (.-onclose socket)\n      (fn [e]\n        ;; not a big fan of reconnecting automatically since a disconnect\n        ;; may signal a change of config, safer to just reload the page\n        (devtools-msg \"disconnected!\")\n        (vreset! socket-ref nil)\n        ))\n\n    (set! (.-onerror socket)\n      (fn [e]))\n\n    (js/setTimeout heartbeat! 30000)\n    ))\n\n(when ^boolean env/enabled\n  ;; disconnect an already connected socket, happens if this file is reloaded\n  ;; pretty much only for me while working on this file\n  (when-let [s @socket-ref]\n    (devtools-msg \"connection reset!\")\n    (set! (.-onclose s) (fn [e]))\n    (.close s)\n    (vreset! socket-ref nil))\n\n  ;; for /browser-repl in case the page is reloaded\n  ;; otherwise the browser seems to still have the websocket open\n  ;; when doing the reload\n  (js/window.addEventListener \"beforeunload\"\n    (fn []\n      (when-let [s @socket-ref]\n        (.close s))))\n\n  (ws-connect))\n"]}