{"version":3,"file":"conduit.events.js","sources":["conduit/events.cljs"],"mappings":";;;;;;;;AAwBA,sCAAA,tCAAKA,yHAAsB,iBAAAC,WAAA;AAAA,AAAA,4GAAAA,yCAAAA,7IAACC,mDAAAA,6DAAAA;KACD,CAACC,oDAAAA,4EAAAA,1BAAMC,wDAAAA,yBACPC;AAM3B,yCAAA,zCAAKC,4HAAyB,CAACH,oDAAAA,+EAAAA,7BAAMI,2DAAAA;AAIrC,yBAAA,zBAAKC;AAEL,AAAA,0BAAA,kCAAAC,5DAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,6DAAAF;;;AAAA,AAAA,AAAA,AAAAE,+DAAA,WAAkBG;AAAlB,AAAA;AAEE,yDAAA,lDAACC,sDAAa,+CAAA,/CAACC,kIAAQZ,+BAASU;;;AAFlC,AAAA,AAAAH,kDAAA;;AAAA,AAAA,AAAAA,4CAAA,WAAAC;AAAA,AAAA,OAAAD,6DAAA,AAAAE,cAAAD;;;AAAA,AAIA,6BAAA,7BAAMK,kEAAaC;AAAnB,AAAA;AAEE,IAAMC,QAAM,kDAAA,mFAAA,qDAAA,1LAACC,+CAAOF;AAApB,AACE,oBAAIC;AAAJ,0FAAA,wEACkB,CAAA,qDAAcA;;AADhC;;;AAIJ,2BAAA,3BAAME,8DAAWC,KAAKC;AAAtB,AAAA;AAEE,OAACC,4CAAI,WAAKC;AAAL,AAAW,0DAAA,nDAACC,8CAAMD,4DAAY,AAACE,yBAAQ,CAACL,qCAAAA,2CAAAA,RAAKG,uBAAAA;GAASF;;AAE7D,0BAAA,1BAAMK,4DAAUC,IAAIN;AAApB,AAAA;AAEE,oDAAA,7CAACO,gFAAQ,AAACN,4CAAI,AAACO,6CAAKF,IAAIG,oBAAU,yBAAA,zBAACX,qFAAqBE;;AAI1D,yDAAA,uEAAA,hIAACU,mNAIC,iBAAAC,WAAA;AAAA,AAAA,0HAAAA,gDAAAA,lKAACC,0DAAAA,oEAAAA;aAGF,WAAAC,SAAiCO;AAAjC,AAAA,IAAAN,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;uBAAA,AAAAI,4CAAAJ,eAAA,9EAAcK;AAAd,AAAA,kDAAA,gDACO,oEAAA,pEAAChB,8CAAMkB,2EAAiBF;;AAEhC,yDAAA,zDAACG,mIAEA,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAV,gCAAA,AAAAU,+BAAA,KAAA,OAAA,QAAA,AAAAT,8CAAAC,mBAAAQ,YAAAA;SAAA,AAAAP,4CAAAO,eAAA,hEAAa9B;IAAb+B,aAAAF;QAAA,AAAAG,4CAAAD,WAAA,IAAA,/DAAmBN;IAAnBQ,aAAA,AAAAD,4CAAAD,WAAA,IAAA;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAb,gCAAA,AAAAa,+BAAA,KAAA,OAAA,QAAA,AAAAZ,8CAAAC,mBAAAW,YAAAA;WAAA,AAAAV,4CAAAU,eAAA,lEAA6BC;WAA7B,AAAAX,4CAAAU,eAAA,lEAAkCE;cAAlC,AAAAZ,4CAAAU,eAAA,rEAAuCG;gBAAvC,AAAAb,4CAAAU,eAAA,vEAA+CI;AAA/C,AACE,IAAMC,WAAS,iDAAA,jDAAC9B,8CAAMR,qEAAgBkC;AAAtC,AACE,IAAAK,WAAML;IAANK,eAAA,EAAA,CAAAA,oBAAAC,iCAAA,bA8qBqC,AAAAD;AA9qBrC,AAAA,QAAAA;KAAA;AAAA,kDAAA,yDAAA,TAEaD,0EACS,KAAAI,eAAA,iqBAAA,KAAAA,eAAA,KAAA,mFAAA,qEAAA,KAAA,IAAA,OAAA,IAAA,j2BAAM,kHAAA,mFAAA,oEAAA,2CAAA,wDAAA,qBAAA,mFAAA,+EAAA,2CAAA,wDAAA,poBAAI,AAACC,uBAAO,AAAA,mFAAO3C;;;KAH/C;KAAA;KAAA;AAAA,kDAAA,gDASoCsC;;;KATpC;AAAA,kDAAA,yDAAA,TAgBqBA,sEACA,wBAAA,mFAAA,8FAAA,mFAAA,1QAAIH,0KACmBA;;;KAlB5C;AAAA,kDAAA,uLAAA,vIAsBsB,uDAAA,vDAAC3B,8CAAM8B,mFACgBH,uEACrB,KAAAO,eAAA,KAAA,mFAAA,oFAAA,2CAAA,0EAAA,KAAAA,eAAA,KAAA,mFAAA,8EAAA,2CAAA,iZAAA,KAAA,IAAA,OAAA,IAAA,/pBAAoCP,qTACD,kDAAA,mFAAA,kEAAA,yDAAA,hQAACjC,+CAAOF,mJAAcmC;;;KAzBjF;AAAA,kDAAA,uLAAA,vIA4BwB,uDAAA,vDAAC3B,8CAAM8B,mFACgBH,uEACvB,KAAAO,eAAA,KAAA,mFAAA,8EAAA,2CAAA,mFAAA,KAAAA,eAAA,KAAA,mFAAA,oEAAA,2CAAA,iFAAA,KAAA,IAAA,OAAA,IAAA,xVAAmCN,4SACLA;;;KA/BtD;AAAA,kDAAA,+NAAA,6DAAA,mFAAA,oEAAA,2CAAA,9aAiCwB,iDAAA,kEAAA,nHAAC5B,8CAAMR,gcACoBqC;;;;AAlCnD,MAAA,KAAAI,MAAA,CAAA,mEAAAF;;;;AAoCL,yDAAA,zDAACK,+IAEA,WAAK5C,GAAGyB;AAAR,AACE,yDAAA,lDAACoB,+CAAO7C;;AAEX,yDAAA,zDAAC2B,0IAEA,WAAAmB,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA5B,gCAAA,AAAA4B,+BAAA,KAAA,OAAA,QAAA,AAAA3B,8CAAAC,mBAAA0B,YAAAA;SAAA,AAAAzB,4CAAAyB,eAAA,hEAAahD;IAAbiD,aAAAF;QAAA,AAAAf,4CAAAiB,WAAA,IAAA,/DAAmBxB;WAAnB,AAAAO,4CAAAiB,WAAA,IAAA,lEAAqBd;AAArB,AAAA,kDAAA,iLAAA,jIACe,iDAAA,jDAAC3B,8CAAMR,6EAAmBmC,uEAC1B,KAAAO,eAAA,KAAA,mFAAA,oFAAA,2CAAA,0EAAA,KAAAA,eAAA,KAAA,mFAAA,8EAAA,2CAAA,iZAAA,KAAA,IAAA,OAAA,IAAA,/pBAAoCP,qTACD,kDAAA,mFAAA,kEAAA,yDAAA,hQAACjC,+CAAOF,mJAAcmC;;AAIzE,yDAAA,zDAACR,6HAEA,WAAAuB,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAhC,gCAAA,AAAAgC,+BAAA,KAAA,OAAA,QAAA,AAAA/B,8CAAAC,mBAAA8B,YAAAA;SAAA,AAAA7B,4CAAA6B,eAAA,hEAAapD;IAAbqD,aAAAF;QAAA,AAAAnB,4CAAAqB,WAAA,IAAA,/DAAmB5B;aAAnB,AAAAO,4CAAAqB,WAAA,IAAA,pEAAqBzD;AAArB,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,mDAAA,mLAAA,+DAAA,0FAAA,zRAEiC,+GAAA,/GAAC0D,wLACD1D,kEACA,AAACG,2BAAYC,+EACb,iBAAAuD,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAACC,+DAAAA,yEAAAA;KALlC,iEAAA,mFAAA,8FAAA,gEAAA,mFAAA,gFAAA,oFAAA,kKAQoBxD,nBACA,sBAAA,mFAAA,2DAAA,qEAAA,zOAACyD,nBACD,kQAAA,mFAAA,yDAAA,9YAACA,8cAA2B,AAAA,sFAAS7D,vjBACrC,gkBAAA,mFAAA,yDAAA,5sBAAC6D,wwBAAwB,AAAA,kFAAM7D,72BAC/B,s3BAAA,mFAAA,yDAAA,lgCAAC6D,mkCAA2B,AAAA,uFAAS7D,7qCACrC,srCAAA,mFAAA,yDAAA,l0CAAC6D,y4CAA8B,AAAA,8FAAY7D,1/CAC3C,mgDAAA,mFAAA,yDAAA,8DAAA,7sDAAC6D;;AAEtB,yDAAA,zDAACb,+IAEA,cAAAc,HAAK1D;AAAL,AAAA,IAAA2D,aAAAD;QAAA,AAAA1B,4CAAA2B,WAAA,IAAA,/DAASlC;IAATmC,aAAA,AAAA5B,4CAAA2B,WAAA,IAAA;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAxC,gCAAA,AAAAwC,+BAAA,KAAA,OAAA,QAAA,AAAAvC,8CAAAC,mBAAAsC,YAAAA;eAAA,AAAArC,4CAAAqC,eAAA,tEAAYC;qBAAZ,AAAAtC,4CAAAqC,eAAA,5EAAgCE;AAAhC,+EACM9D,nBACA,sBAAA,mFAAA,2DAAA,qEAAA,zOAACyD,5DACD,4SAAA,0IAAA,/aAACM,8WAAsBD,8HACN,wBAAA,xBAACpD,6EAAemD;;AAIxC,yDAAA,zDAAClC,2HAEA,WAAAqC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA9C,gCAAA,AAAA8C,+BAAA,KAAA,OAAA,QAAA,AAAA7C,8CAAAC,mBAAA4C,YAAAA;SAAA,AAAA3C,4CAAA2C,eAAA,hEAAalE;IAAbmE,aAAAF;QAAA,AAAAjC,4CAAAmC,WAAA,IAAA,/DAAmB1C;aAAnB,AAAAO,4CAAAmC,WAAA,IAAA,pEAAqBvE;AAArB,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,mDAAA,8QAAA,0FAAA,rTAEiC,+GAAA,/GAAC0D,0HAAoB,AAAA,mFAAO1D,yEAC5B,AAACG,2BAAYC,+EACb,iBAAAoE,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAACZ,+DAAAA,yEAAAA;KAJlC,iEAAA,mFAAA,4FAAA,gEAAA,mFAAA,gFAAA,kFAAA,gDAOgB,sBAAA,mFAAA,2DAAA,kEAAA,tOAACC,mBAASzD;;AAE3B,yDAAA,zDAAC4C,6IAEA,cAAAyB,HAAKrE;AAAL,AAAA,IAAAsE,aAAAD;QAAA,AAAArC,4CAAAsC,WAAA,IAAA,/DAAS7C;IAAT8C,aAAA,AAAAvC,4CAAAsC,WAAA,IAAA;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAnD,gCAAA,AAAAmD,+BAAA,KAAA,OAAA,QAAA,AAAAlD,8CAAAC,mBAAAiD,YAAAA;cAAA,AAAAhD,4CAAAgD,eAAA,rEAAYC;AAAZ,wEACMxE,nBACA,sBAAA,mFAAA,2DAAA,kEAAA,tOAACyD,rDACD,kSAAA,3RAACjD,wVAAgB,wBAAA,qDAAA,7EAACE,gKAAgB8D;;AAIzC,yDAAA,zDAAC7C,kIAEA,WAAA8C,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAvD,gCAAA,AAAAuD,+BAAA,KAAA,OAAA,QAAA,AAAAtD,8CAAAC,mBAAAqD,YAAAA;SAAA,AAAApD,4CAAAoD,eAAA,hEAAa3E;IAAb4E,aAAAF;QAAA,AAAA1C,4CAAA4C,WAAA,IAAA,/DAAmBnD;aAAnB,AAAAO,4CAAA4C,WAAA,IAAA,pEAAqBhF;AAArB,AAAA,kDAAA,4RAAA,iEAAA,2CAAA,6QAAA,6fAAA,0FAAA,wJAAA,mOAAA,vjDACe,sBAAA,mFAAA,2DAAA,kEAAA,tOAAC6D,mBAASzD,4XACQ,8GAAA,mDAAA,/IAAI,AAAA,mFAAOJ,oKACX,kBAAI,AAAA,mFAAOA,SACT,+GAAA,/GAAC0D,0HAAoB,AAAA,mFAAO1D,cAC5B,+GAAA,/GAAC0D,4LACH,AAACvD,2BAAYC,4DACb,AAAA,wFAAUJ,kEACV,CAACiF,8DAAAA,gEAAAA,qHACD,iBAAAC,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAACtB,+DAAAA,yEAAAA;KATlC,iEAAA,mFAAA,kGAAA,gEAAA,mFAAA,gFAAA;;AAaD,yDAAA,zDAAC7B,mJAEA,WAAAoD,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA7D,gCAAA,AAAA6D,+BAAA,KAAA,OAAA,QAAA,AAAA5D,8CAAAC,mBAAA2D,YAAAA;SAAA,AAAA1D,4CAAA0D,eAAA,hEAAajF;IAAbkF,aAAAF;QAAA,AAAAhD,4CAAAkD,WAAA,IAAA,/DAAmBzD;IAAnB0D,aAAA,AAAAnD,4CAAAkD,WAAA,IAAA;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA/D,gCAAA,AAAA+D,+BAAA,KAAA,OAAA,QAAA,AAAA9D,8CAAAC,mBAAA6D,YAAAA;cAAA,AAAA5D,4CAAA4D,eAAA,rEAAsBX;AAAtB,AAAA,kDAAA,k4BAAA,5qBACWxE,nBACA,sBAAA,mFAAA,2DAAA,kEAAA,tOAACyD,/CACD,4RAAA,5RAACZ,/CACD,yYAAA,zYAACA,rDACD,wfAAA,kEAAA,4GAAA,tqBAACkB,gvBACsB,AAAA,mFAAOS,gFAC1B,KAAA9B,eAAA,KAAA,mFAAA,kEAAA,2CAAA,iKAAA,KAAAA,eAAA,KAAA,mFAAA,oFAAA,2CAAA,iKAAA,KAAAA,eAAA,KAAA,mFAAA,0EAAA,2CAAA,oDAAA,0DAAA,iKAAA,KAAA,IAAA,OAAA,IAAA,OAAA,IAAA,vgCAA2B,AAAA,mFAAO8B,yTACE,AAAA,mFAAOA,6ZACG,AAAA,mFAAOA;;AAIrE,yDAAA,zDAAC7C,kIAEA,WAAAyD,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAlE,gCAAA,AAAAkE,+BAAA,KAAA,OAAA,QAAA,AAAAjE,8CAAAC,mBAAAgE,YAAAA;SAAA,AAAA/D,4CAAA+D,eAAA,hEAAatF;IAAbuF,aAAAF;QAAA,AAAArD,4CAAAuD,WAAA,IAAA,/DAAmB9D;WAAnB,AAAAO,4CAAAuD,WAAA,IAAA,lEAAqBpD;AAArB,AAAA,kDAAA,4RAAA,iEAAA,2CAAA,uDAAA,0DAAA,wLAAA,0FAAA,6DAAA,mOAAA,3/BACe,sBAAA,mFAAA,2DAAA,kEAAA,tOAACsB,mBAASzD,yeAEQ,+GAAA,/GAACsD,0HAAoBnB,sEACrB,AAACpC,2BAAYC,4DACbmC,+DACA,CAAC0C,8DAAAA,gEAAAA,qHACD,iBAAAW,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAAChC,+DAAAA,yEAAAA;KAPlC,iEAAA,mFAAA,gGAAA,gEAAA,mFAAA,gFAAA;;AAWD,yDAAA,zDAAC7B,iJAEA,WAAA8D,SAAkBhE;AAAlB,AAAA,IAAAiE,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAtE,gCAAA,AAAAsE,+BAAA,KAAA,OAAA,QAAA,AAAArE,8CAAAC,mBAAAoE,YAAAA;SAAA,AAAAnE,4CAAAmE,eAAA,hEAAa1F;AAAb,AAAA,kDAAA,qmBAAA,6DAAA,mFAAA,0EAAA,2CAAA,oDAAA,zyBACWA,lDACA,qDAAA,mFAAA,xIAAC2F,6MAAsBC,iBAAO,AAAA,wGAAiB5F,zVAC/C,8VAAA,mFAAA,2DAAA,kEAAA,9iBAACyD;;AAKb,yDAAA,zDAAC9B,wIAEA,WAAAkE,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA3E,gCAAA,AAAA2E,+BAAA,KAAA,OAAA,QAAA,AAAA1E,8CAAAC,mBAAAyE,YAAAA;SAAA,AAAAxE,4CAAAwE,eAAA,hEAAa/F;IAAbgG,aAAAF;QAAA,AAAA9D,4CAAAgE,WAAA,IAAA,/DAAmBvE;aAAnB,AAAAO,4CAAAgE,WAAA,IAAA,pEAAqBpG;AAArB,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,mDAAA,0LAAA,+DAAA,0FAAA,hSAEiC,+GAAA,WAAA,1HAAC0D,+LACD1D,kEACA,AAACG,2BAAYC,+EACb,iBAAAiG,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAACzC,+DAAAA,yEAAAA;KALlC,iEAAA,mFAAA,sGAAA,gEAAA,mFAAA,gFAAA,+FAAA,kKAQoBxD,nBACA,sBAAA,mFAAA,2DAAA,qEAAA,zOAACyD,nBACD,kQAAA,mFAAA,yDAAA,9YAACA,8cAA2B,AAAA,sFAAS7D,vjBACrC,gkBAAA,mFAAA,yDAAA,4DAAA,xwBAAC6D,nBACD,iyBAAA,mFAAA,yDAAA,iEAAA,9+BAACA,nBACD,ugCAAA,mFAAA,yDAAA,uEAAA,1tCAACA,nBACD,mvCAAA,mFAAA,yDAAA,8DAAA,77CAACA;;AAEtB,yDAAA,zDAACb,uJAEA,cAAAsD,HAAKlG;AAAL,AAAA,IAAAmG,aAAAD;QAAA,AAAAlE,4CAAAmE,WAAA,IAAA,/DAAS1E;IAAT2E,aAAA,AAAApE,4CAAAmE,WAAA,IAAA;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAhF,gCAAA,AAAAgF,+BAAA,KAAA,OAAA,QAAA,AAAA/E,8CAAAC,mBAAA8E,YAAAA;eAAA,AAAA7E,4CAAA6E,eAAA,tEAAYvC;qBAAZ,AAAAtC,4CAAA6E,eAAA,5EAAgCtC;AAAhC,+EACM9D,nBACA,sBAAA,mFAAA,2DAAA,qEAAA,zOAACyD,5DACD,4SAAA,0IAAA,/aAACM,8WAAsBD,8HACN,wBAAA,xBAACpD,6EAAemD;;AAIxC,yDAAA,zDAAClC,sHAEA,WAAA0E,SAAkB5E;AAAlB,AAAA,IAAA6E,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAlF,gCAAA,AAAAkF,+BAAA,KAAA,OAAA,QAAA,AAAAjF,8CAAAC,mBAAAgF,YAAAA;SAAA,AAAA/E,4CAAA+E,eAAA,hEAAatG;AAAb,AAAA,kDAAA,uRAAA,iEAAA,2CAAA,uDAAA,mDAAA,+KAAA,5mBACe,sBAAA,mFAAA,2DAAA,6DAAA,jOAACyD,mBAASzD,6dAEQ,+GAAA,/GAACsD,uMACD,iBAAAiD,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAAC/C,+DAAAA,yEAAAA;KAJlC,iEAAA,mFAAA,oFAAA,gEAAA,mFAAA,gFAAA;;AAQD,yDAAA,zDAACZ,qIAEA,cAAA4D,HAAKxG;AAAL,AAAA,IAAAyG,aAAAD;QAAA,AAAAxE,4CAAAyE,WAAA,IAAA,/DAAShF;IAATiF,aAAA,AAAA1E,4CAAAyE,WAAA,IAAA;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAtF,gCAAA,AAAAsF,+BAAA,KAAA,OAAA,QAAA,AAAArF,8CAAAC,mBAAAoF,YAAAA;WAAA,AAAAnF,4CAAAmF,eAAA,lEAAYC;AAAZ,wEACM3G,nBACA,sBAAA,mFAAA,2DAAA,6DAAA,jOAACyD,rDACD,6RAAA,tRAACjD,2UAAYmG;;AAIpB,yDAAA,zDAAChF,6IAEA,WAAAiF,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA1F,gCAAA,AAAA0F,+BAAA,KAAA,OAAA,QAAA,AAAAzF,8CAAAC,mBAAAwF,YAAAA;SAAA,AAAAvF,4CAAAuF,eAAA,hEAAa9G;IAAb+G,aAAAF;QAAA,AAAA7E,4CAAA+E,WAAA,IAAA,/DAAmBtF;aAAnB,AAAAO,4CAAA+E,WAAA,IAAA,pEAAqBnH;AAArB,AAAA,kDAAA,+RAAA,iEAAA,2CAAA,uDAAA,mDAAA,yRAAA,0FAAA,xzBACe,sBAAA,mFAAA,2DAAA,qEAAA,zOAAC6D,mBAASzD,qeAEQ,+GAAA,sGAAA,rNAACsD,0HAAoB,AAAA,mFAAO1D,oFAC5B,AAACG,2BAAYC,+EACb,iBAAAgH,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAACxD,+DAAAA,yEAAAA;KALlC,iEAAA,mFAAA,6GAAA,gEAAA,mFAAA,gFAAA;;AASD,yDAAA,zDAACZ,8JAEA,cAAAqE,HAAKjH;AAAL,AAAA,IAAAkH,aAAAD;QAAA,AAAAjF,4CAAAkF,WAAA,IAAA,/DAASzF;IAAT0F,aAAA,AAAAnF,4CAAAkF,WAAA,IAAA;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA/F,gCAAA,AAAA+F,+BAAA,KAAA,OAAA,QAAA,AAAA9F,8CAAAC,mBAAA6F,YAAAA;eAAA,AAAA5F,4CAAA4F,eAAA,tEAAYC;AAAZ,wEACMpH,nBACA,sBAAA,mFAAA,2DAAA,qEAAA,zOAACyD,rDACD,qSAAA,9RAACjD,2VAAgB,wBAAA,xBAACE,0EAAa0G;;AAItC,yDAAA,zDAACzF,8HAEA,WAAA0F,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAnG,gCAAA,AAAAmG,+BAAA,KAAA,OAAA,QAAA,AAAAlG,8CAAAC,mBAAAiG,YAAAA;SAAA,AAAAhG,4CAAAgG,eAAA,hEAAavH;IAAbwH,aAAAF;QAAA,AAAAtF,4CAAAwF,WAAA,IAAA,/DAAmB/F;WAAnB,AAAAO,4CAAAwF,WAAA,IAAA,lEAAqBC;AAArB,AAAA,kDAAA,+RAAA,iEAAA,2CAAA,uDAAA,oDAAA,0SAAA,0FAAA,6DAAA,mOAAA,1mCACe,sBAAA,mFAAA,2DAAA,qEAAA,zOAAChE,mBAASzD,seAEQ,+GAAA,uHAAA,tOAACsD,0HAAoB,AAAA,wGAAiBtD,gFACtC,AAACD,2BAAYC,4DACbyH,+DACA,CAAC5C,8DAAAA,gEAAAA,qHACD,iBAAA6C,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAAClE,+DAAAA,yEAAAA;KAPlC,iEAAA,mFAAA,4FAAA,gEAAA,mFAAA,gFAAA;;AAWD,yDAAA,zDAAC7B,6IAEA,WAAAgG,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAzG,gCAAA,AAAAyG,+BAAA,KAAA,OAAA,QAAA,AAAAxG,8CAAAC,mBAAAuG,YAAAA;SAAA,AAAAtG,4CAAAsG,eAAA,hEAAa7H;IAAb8H,aAAAF;QAAA,AAAA5F,4CAAA8F,WAAA,IAAA,/DAAmBrG;cAAnB,AAAAO,4CAAA8F,WAAA,IAAA,rEAAqBC;AAArB,AAAA,kDAAA,k5BAAA,6DAAA,mFAAA,oFAAA,2CAAA,zhCACW/H,nBACA,sBAAA,mFAAA,2DAAA,qEAAA,zOAACyD,nBACD,mQAAA,mFAAA,yKAAA,/fAACA,mZAAoB,AAAA,wGAAiBzD,yEAAe+H,tnBACrD,+nBAAA,mFAAA,kFAAA,pyBAACpC,mxBAAoBC,mZACW,AAAA,wGAAiB5F;;AAI7D,yDAAA,zDAAC2B,iIAEA,WAAAqG,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA9G,gCAAA,AAAA8G,+BAAA,KAAA,OAAA,QAAA,AAAA7G,8CAAAC,mBAAA4G,YAAAA;SAAA,AAAA3G,4CAAA2G,eAAA,hEAAalI;IAAbmI,aAAAF;QAAA,AAAAjG,4CAAAmG,WAAA,IAAA,/DAAmB1G;iBAAnB,AAAAO,4CAAAmG,WAAA,IAAA,xEAAqBC;AAArB,AAAA,kDAAA,gDACe;AACE,sBAAA,mFAAA,2DAAA,qEAAA,zOAAC3E,mBAASzD;;AACV,wDAAA,jDAACQ,8CAAMR,4EAAmBoI;;CAH3C,iEAAA,2CAAA,uDAAA,0DAAA,qTAAA,0FAAA,mOAAA,/jBAKiC,+GAAA,uHAAA,tOAAC9E,0HAAoB,AAAA,wGAAiBtD,eAAeoI,4EACrD,AAACrI,2BAAYC,8DACb,CAAC6E,8DAAAA,gEAAAA,qHACD,iBAAAwD,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAAC7E,+DAAAA,yEAAAA;KARlC,iEAAA,mFAAA,gGAAA,gEAAA,mFAAA,gFAAA;;AAYD,yDAAA,zDAACZ,iJAEA,WAAK5C,GAAGyB;AAAR,2HACMzB,lDACA,qDAAA,mFAAA,xIAAC2F,6MAAsBC,iBAAO,AAAA,uGAAiB5F,pXAC/C,yXAAA,zXAAC6C,1BACD,6dAAA,mFAAA,2DAAA,kEAAA,tqBAACY;;AAIR,yDAAA,zDAAC9B,uIAEA,WAAA2G,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAApH,gCAAA,AAAAoH,+BAAA,KAAA,OAAA,QAAA,AAAAnH,8CAAAC,mBAAAkH,YAAAA;SAAA,AAAAjH,4CAAAiH,eAAA,hEAAaxI;IAAbyI,aAAAF;QAAA,AAAAvG,4CAAAyG,WAAA,IAAA,/DAAmBhH;aAAnB,AAAAO,4CAAAyG,WAAA,IAAA,pEAAqB7I;AAArB,AAAA,kDAAA,6RAAA,iEAAA,2CAAA,uDAAA,mDAAA,oRAAA,0FAAA,jzBACe,sBAAA,mFAAA,2DAAA,mEAAA,vOAAC6D,mBAASzD,meAEQ,+GAAA,/GAACsD,0HAAoB,AAAA,yFAAU1D,yEAC/B,AAACG,2BAAYC,+EACb,iBAAA0I,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAAClF,+DAAAA,yEAAAA;KALlC,iEAAA,mFAAA,sGAAA,gEAAA,mFAAA,gFAAA;;AASD,yDAAA,zDAACZ,uJAEA,cAAA+F,HAAK3I;AAAL,AAAA,IAAA4I,aAAAD;QAAA,AAAA3G,4CAAA4G,WAAA,IAAA,/DAASnH;IAAToH,aAAA,AAAA7G,4CAAA4G,WAAA,IAAA;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAzH,gCAAA,AAAAyH,+BAAA,KAAA,OAAA,QAAA,AAAAxH,8CAAAC,mBAAAuH,YAAAA;cAAA,AAAAtH,4CAAAsH,eAAA,rEAAYzG;AAAZ,wEACMpC,nBACA,sBAAA,mFAAA,2DAAA,mEAAA,vOAACyD,rDACD,mSAAA,5RAACjD,uVAAe4B;;AAIvB,yDAAA,zDAACT,8GAEA,WAAAmH,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA5H,gCAAA,AAAA4H,+BAAA,KAAA,OAAA,QAAA,AAAA3H,8CAAAC,mBAAA0H,YAAAA;SAAA,AAAAzH,4CAAAyH,eAAA,hEAAahJ;IAAbiJ,aAAAF;QAAA,AAAA/G,4CAAAiH,WAAA,IAAA,/DAAmBxH;kBAAnB,AAAAO,4CAAAiH,WAAA,IAAA,zEAAqBC;AAArB,AAAA,kDAAA,uRAAA,iEAAA,2CAAA,uDAAA,oDAAA,wLAAA,wDAAA,2CAAA,yEAAA,mOAAA,rgCACe,sBAAA,mFAAA,2DAAA,6DAAA,jOAACzF,mBAASzD,8dAEQ,+GAAA,QAAA,vHAACsD,6RACM4F,8EACP,CAACrE,8DAAAA,gEAAAA,qHACD,iBAAAsE,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAAC3F,+DAAAA,yEAAAA;KANlC,iEAAA,mFAAA,+EAAA,gEAAA,mFAAA,gFAAA;;AAUD,yDAAA,zDAACzC,gIAMArC,oCAQA,WAAA0K,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAlI,gCAAA,AAAAkI,+BAAA,KAAA,OAAA,QAAA,AAAAjI,8CAAAC,mBAAAgI,YAAAA;WAAA,AAAA/H,4CAAA+H,eAAA,lEAAMG;IAANF,aAAAF;IAAAG,aAAA,AAAAxH,4CAAAuH,WAAA,IAAA;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAApI,gCAAA,AAAAoI,+BAAA,KAAA,OAAA,QAAA,AAAAnI,8CAAAC,mBAAAkI,YAAAA;YAAA,AAAAjI,4CAAAiI,eAAA,nEAAkBE;AAAlB,AAAA,kDAAA,wKAAA,xHACO,AAACC,uGAAMF,KAAKC,6EACJ,KAAAhH,eAAA,KAAA,mFAAA,6EAAA,6DAAA,KAAAA,eAAA,KAAA,mFAAA,+EAAA,2CAAA,oDAAA,KAAA,yDAAA,KAAA,wDAAA,IAAA,wDAAA,qBAAA,KAAAA,eAAA,KAAA,mFAAA,0EAAA,2CAAA,oDAAA,oEAAA,KAAA,IAAA,OAAA,IAAA,OAAA,IAAA;;AAMhB,yDAAA,zDAACf,+HAEA,WAAAiI,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA1I,gCAAA,AAAA0I,+BAAA,KAAA,OAAA,QAAA,AAAAzI,8CAAAC,mBAAAwI,YAAAA;SAAA,AAAAvI,4CAAAuI,eAAA,hEAAa9J;IAAb+J,aAAAF;QAAA,AAAA7H,4CAAA+H,WAAA,IAAA,/DAAmBtI;mBAAnB,AAAAO,4CAAA+H,WAAA,IAAA,1EAAqBC;AAArB,AAAA,kDAAA,wSAAA,iEAAA,2CAAA,uDAAA,oDAAA,gLAAA,wDAAA,2CAAA,0EAAA,mOAAA,/gCACe,sBAAA,mFAAA,2DAAA,8EAAA,lPAACvG,mBAASzD,+eAEQ,+GAAA,/GAACsD,qRACM0G,+EACP,CAACnF,8DAAAA,gEAAAA,qHACD,iBAAAoF,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAACzG,+DAAAA,yEAAAA;KANlC,iEAAA,mFAAA,+FAAA,gEAAA,mFAAA,gFAAA;;AAUD,yDAAA,zDAACzC,gJAMArC,oCAQA,WAAAwL,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAhJ,gCAAA,AAAAgJ,+BAAA,KAAA,OAAA,QAAA,AAAA/I,8CAAAC,mBAAA8I,YAAAA;WAAA,AAAA7I,4CAAA6I,eAAA,lEAAMX;IAANY,aAAAF;IAAAG,aAAA,AAAAtI,4CAAAqI,WAAA,IAAA;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAlJ,gCAAA,AAAAkJ,+BAAA,KAAA,OAAA,QAAA,AAAAjJ,8CAAAC,mBAAAgJ,YAAAA;YAAA,AAAA/I,4CAAA+I,eAAA,nEAAkBZ;AAAlB,AAAA,kDAAA,wKAAA,xHACO,AAACC,uGAAMF,KAAKC,6EACJ,KAAAhH,eAAA,KAAA,mFAAA,6EAAA,8EAAA,KAAAA,eAAA,KAAA,mFAAA,0EAAA,2CAAA,oDAAA,oEAAA,KAAA,IAAA,OAAA,IAAA;;AAKhB,yDAAA,zDAACf,2HAEA,WAAA4I,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAArJ,gCAAA,AAAAqJ,+BAAA,KAAA,OAAA,QAAA,AAAApJ,8CAAAC,mBAAAmJ,YAAAA;SAAA,AAAAlJ,4CAAAkJ,eAAA,hEAAazK;IAAb0K,aAAAF;QAAA,AAAAxI,4CAAA0I,WAAA,IAAA,/DAAmBjJ;WAAnB,AAAAO,4CAAA0I,WAAA,IAAA,lEAAqBjB;AAArB,AAAA,kDAAA,oSAAA,iEAAA,2CAAA,uDAAA,mDAAA,+KAAA,wDAAA,2CAAA,kEAAA,0FAAA,mOAAA,3lCACe,sBAAA,mFAAA,2DAAA,0EAAA,9OAAChG,mBAASzD,0eAEQ,+GAAA,/GAACsD,oRACMmG,wEACP,AAAC1J,2BAAYC,8DACb,CAAC6E,8DAAAA,gEAAAA,qHACD,iBAAA8F,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAACnH,+DAAAA,yEAAAA;KAPlC,iEAAA,mFAAA,0FAAA,gEAAA,mFAAA,gFAAA;;AAWD,yDAAA,zDAACzC,2IAMArC,oCAQA,WAAAkM,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA1J,gCAAA,AAAA0J,+BAAA,KAAA,OAAA,QAAA,AAAAzJ,8CAAAC,mBAAAwJ,YAAAA;WAAA,AAAAvJ,4CAAAuJ,eAAA,lEAAMrB;IAANsB,aAAAF;IAAAG,aAAA,AAAAhJ,4CAAA+I,WAAA,IAAA;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA5J,gCAAA,AAAA4J,+BAAA,KAAA,OAAA,QAAA,AAAA3J,8CAAAC,mBAAA0J,YAAAA;YAAA,AAAAzJ,4CAAAyJ,eAAA,nEAAkBtB;AAAlB,AAAA,kDAAA,wKAAA,6DAAA,mFAAA,6EAAA,rVACO,AAACC,uGAAMF,KAAKC;;AAKpB,yDAAA,zDAAC/H,2IAEA,WAAAsJ,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA/J,gCAAA,AAAA+J,+BAAA,KAAA,OAAA,QAAA,AAAA9J,8CAAAC,mBAAA6J,YAAAA;SAAA,AAAA5J,4CAAA4J,eAAA,hEAAanL;IAAboL,aAAAF;QAAA,AAAAlJ,4CAAAoJ,WAAA,IAAA,/DAAmB3J;eAAnB,AAAAO,4CAAAoJ,WAAA,IAAA,tEAAqBC;AAArB,AAAA,kDAAA,oTAAA,iEAAA,2CAAA,kcAAA,qMAAA,0FAAA,mOAAA,pzCACe,sBAAA,mFAAA,2DAAA,0FAAA,9PAAC5H,mBAASzD,oZACQ,4RAAA,0DAAA,pUAAI,kDAAA,mFAAA,2DAAA,hMAACE,+CAAOF,6XACZ,+GAAA,oBAAA,nIAACsD,0HAAoB+H,mFACrB,AAACtL,2BAAYC,8DACb,CAAC6E,8DAAAA,gEAAAA,qHACD,iBAAAyG,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAAC9H,+DAAAA,yEAAAA;KANlC,iEAAA,mFAAA,yGAAA,gEAAA,mFAAA,gFAAA;;AAUD,yDAAA,zDAACZ,0JAEA,cAAA2I,HAAKvL;AAAL,AAAA,IAAAwL,aAAAD;QAAA,AAAAvJ,4CAAAwJ,WAAA,IAAA,/DAAS/J;IAATgK,aAAA,AAAAzJ,4CAAAwJ,WAAA,IAAA;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAArK,gCAAA,AAAAqK,+BAAA,KAAA,OAAA,QAAA,AAAApK,8CAAAC,mBAAAmK,YAAAA;cAAA,AAAAlK,4CAAAkK,eAAA,rEAAYrJ;AAAZ,6CACMpC,nBACA,sBAAA,mFAAA,2DAAA,0FAAA,9PAACyD,1BACD,+RAAA,mFAAA,2DAAA,taAACA,8eAA+B,AAAA,8FAAYrB;;AAInD,yDAAA,zDAACT,oJAEA,WAAA+J,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAxK,gCAAA,AAAAwK,+BAAA,KAAA,OAAA,QAAA,AAAAvK,8CAAAC,mBAAAsK,YAAAA;SAAA,AAAArK,4CAAAqK,eAAA,hEAAa5L;IAAb6L,aAAAF;QAAA,AAAA3J,4CAAA6J,WAAA,IAAA,/DAAmBpK;WAAnB,AAAAO,4CAAA6J,WAAA,IAAA,lEAAqB1J;AAArB,AAAA,kDAAA,6TAAA,iEAAA,2CAAA,ycAAA,mMAAA,0FAAA,mOAAA,l0CACe,sBAAA,mFAAA,2DAAA,mGAAA,vQAACsB,mBAASzD,6ZACQ,mSAAA,0DAAA,3UAAI,kDAAA,mFAAA,kEAAA,vMAACE,+CAAOF,mJAAcmC,iPAC1B,+GAAA,gBAAA,/HAACmB,0HAAoBnB,iFACrB,AAACpC,2BAAYC,8DACb,CAAC6E,8DAAAA,gEAAAA,qHACD,iBAAAiH,WAAA,2CAAA,8DAAA;AAAA,AAAA,oIAAAA,qDAAAA,jLAACtI,+DAAAA,yEAAAA;KANlC,iEAAA,mFAAA,oHAAA,gEAAA,mFAAA,gFAAA;;AAUD,yDAAA,zDAACZ,qKAEA,cAAAmJ,HAAK/L;AAAL,AAAA,IAAAgM,aAAAD;QAAA,AAAA/J,4CAAAgK,WAAA,IAAA,/DAASvK;IAATwK,aAAA,AAAAjK,4CAAAgK,WAAA,IAAA;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA7K,gCAAA,AAAA6K,+BAAA,KAAA,OAAA,QAAA,AAAA5K,8CAAAC,mBAAA2K,YAAAA;cAAA,AAAA1K,4CAAA0K,eAAA,rEAAYzH;AAAZ,AACE,IAAMrC,OAAK,AAAA,mFAAOqC;IACZnC,YAAU,AAAA,8FAAYmC;AAD5B,gEAEMxE,nBACA,sBAAA,mFAAA,2DAAA,mGAAA,vQAACyD,nBACD,iSAAA,mFAAA,kEAAA,tbAACA,ibAAoBtB,6EAAiBE,xhBACtC,miBAAA,mFAAA,kEAAA,jrBAACoB,4qBAAoBtB,uFAAsB,kBAAIE,WACF,AAAA,wGAAiBmC,QAAQ0H,eACzB,AAAA,wGAAiB1H,QAAQ2H;;AAI/E,yDAAA,zDAACpL,kHAKA/B,uCAGA,WAAAoN,SAAkB3K;AAAlB,AAAA,IAAA4K,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAjL,gCAAA,AAAAiL,+BAAA,KAAA,OAAA,QAAA,AAAAhL,8CAAAC,mBAAA+K,YAAAA;SAAA,AAAA9K,4CAAA8K,eAAA,hEAAarM;AAAb,AAAA,kDAAA,wJAAA,6DAAA,mFAAA,0EAAA,2CAAA,oDAAA,jaACY,kDAAA,lDAAC6C,+CAAO7C;;AAKrB,yDAAA,zDAAC4C,sIAEA,cAAA0J,HAAKtM;AAAL,AAAA,IAAAuM,aAAAD;QAAA,AAAAtK,4CAAAuK,WAAA,IAAA,/DAAS9K;mBAAT,AAAAO,4CAAAuK,WAAA,IAAA,1EAAWC;AAAX,AACE,6BAAA,mFAAA,gFAAA,zLAAC/I,mBAASzD,iJAAawM;;AAE1B,yDAAA,zDAAC7K,yIAEA,WAAA8K,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAvL,gCAAA,AAAAuL,+BAAA,KAAA,OAAA,QAAA,AAAAtL,8CAAAC,mBAAAqL,YAAAA;SAAA,AAAApL,4CAAAoL,eAAA,hEAAa3M;IAAb4M,aAAAF;QAAA,AAAA1K,4CAAA4K,WAAA,IAAA,/DAAmBnL;mBAAnB,AAAAO,4CAAA4K,WAAA,IAAA,1EAAqBJ;eAArB,AAAAxK,4CAAA4K,WAAA,IAAA,tEAAkCC;AAAlC,AAAA,kDAAA,mfAAA,6DAAA,mFAAA,nlBACO,sBAAA,mFAAA,zGAACpJ,mBAASzD,+IAAYwM,qBAAc,wDAAA,mFAAA,8DAAA,zMAACtM,+CAAO2M,0bACnBL","names":["conduit.events/set-user-interceptor","G__27977","re-frame.core/path","re-frame.core/after","conduit.db/set-user-ls","re-frame.core/trim-v","conduit.events/remove-user-interceptor","conduit.db/remove-user-ls","conduit.events/api-url","var_args","args__4500__auto__","len__4497__auto__","i__4498__auto__","argseq__4501__auto__","cljs.core/IndexedSeq","conduit.events/endpoint","seq27984","cljs.core/seq","params","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","conduit.events/auth-header","db","token","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","conduit.events/add-epoch","date","coll","cljs.core.map.cljs$core$IFn$_invoke$arity$2","item","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs-time.coerce/to-long","conduit.events/index-by","key","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","G__28016","re-frame.core/inject-cofx","p__28017","map__28018","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","local-store-user","_","conduit.db/default-db","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__28025","p__28026","map__28027","vec__28028","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__28031","page","slug","profile","favorited","set-page","G__28034","cljs.core/Keyword","js/Error","cljs.core/List","cljs.core/empty?","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","p__28054","p__28055","map__28057","vec__28059","p__28067","p__28068","map__28070","vec__28071","conduit.events.endpoint.cljs$core$IFn$_invoke$arity$variadic","G__28075","ajax.core/json-response-format","cljs.core/assoc-in","p__28086","vec__28090","map__28093","articles","articles-count","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__28112","p__28113","map__28115","vec__28116","G__28124","p__28127","vec__28128","map__28131","article","p__28137","p__28138","map__28139","vec__28140","ajax.core/json-request-format","G__28149","p__28153","p__28154","map__28158","vec__28159","map__28162","p__28182","p__28183","map__28184","vec__28185","G__28189","p__28200","map__28201","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","p__28213","p__28214","map__28215","vec__28216","G__28221","p__28231","vec__28232","map__28235","p__28256","map__28257","G__28260","p__28266","vec__28267","map__28270","tags","p__28279","p__28280","map__28281","vec__28282","G__28286","p__28287","vec__28288","map__28291","comments","p__28294","p__28295","map__28296","vec__28297","body","G__28301","p__28303","p__28304","map__28305","vec__28306","comment","p__28312","p__28313","map__28314","vec__28315","comment-id","G__28319","p__28324","p__28325","map__28326","vec__28327","G__28335","p__28336","vec__28337","map__28340","p__28347","p__28348","map__28349","vec__28350","credentials","G__28354","p__28365","p__28366","map__28367","vec__28368","map__28371","user","props","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__28374","p__28375","map__28376","vec__28377","registration","G__28381","p__28382","p__28383","map__28384","vec__28385","map__28388","p__28391","p__28392","map__28393","vec__28394","G__28398","p__28399","p__28400","map__28401","vec__28402","map__28405","p__28408","p__28409","map__28410","vec__28411","username","G__28415","p__28416","vec__28417","map__28420","p__28422","p__28423","map__28424","vec__28425","G__28429","p__28430","vec__28431","map__28434","cljs.core/inc","cljs.core/dec","p__28436","map__28437","p__28439","vec__28440","request-type","p__28443","p__28444","map__28445","vec__28446","response"],"sourcesContent":["(ns conduit.events\n  (:require\n   [conduit.db :refer [default-db set-user-ls remove-user-ls]]\n   [re-frame.core :refer [reg-event-db reg-event-fx reg-fx inject-cofx trim-v after path debug]]\n   [day8.re-frame.http-fx] ;; even if we don't use this require its existence will cause the :http-xhrio effect handler to self-register with re-frame\n   [ajax.core :refer [json-request-format json-response-format]]\n   [clojure.string :as str]\n   [cljs-time.coerce :refer [to-long]]))\n\n;; -- Interceptors --------------------------------------------------------------\n;; Every event handler can be \"wrapped\" in a chain of interceptors. Each of these\n;; interceptors can do things \"before\" and/or \"after\" the event handler is executed.\n;; They are like the \"middleware\" of web servers, wrapping around the \"handler\".\n;; Interceptors are a useful way of factoring out commonality (across event\n;; handlers) and looking after cross-cutting concerns like logging or validation.\n;;\n;; They are also used to \"inject\" values into the `coeffects` parameter of\n;; an event handler, when that handler needs access to certain resources.\n;;\n;; Each event handler can have its own chain of interceptors. Below we create\n;; the interceptor chain shared by all event handlers which manipulate user.\n;; A chain of interceptors is a vector.\n;; Explanation of `trim-v` is given further below.\n;;\n(def set-user-interceptor [(path :user)         ;; `:user` path within `db`, rather than the full `db`.\n                           (after set-user-ls)  ;; write user to localstore (after)\n                           trim-v])             ;; removes first (event id) element from the event vec\n\n;; After logging out clean up local-storage so that when a users refreshes\n;; the browser she/he is not automatically loged-in, and because it's a\n;; good practice to clean-up after yourself.\n;;\n(def remove-user-interceptor [(after remove-user-ls)])\n\n;; -- Helpers -----------------------------------------------------------------\n;;\n(def api-url \"https://conduit.productionready.io/api\")\n\n(defn endpoint [& params]\n  \"Concat any params to api-url separated by /\"\n  (str/join \"/\" (concat [api-url] params)))\n\n(defn auth-header [db]\n  \"Get user token and format for API authorization\"\n  (let [token (get-in db [:user :token])]\n    (if token\n      [:Authorization (str \"Token \" token)]\n      nil)))\n\n(defn add-epoch [date coll]\n  \"Takes date identifier and adds :epoch (cljs-time.coerce/to-long) timestamp to coll\"\n  (map (fn [item] (assoc item :epoch (to-long (date item)))) coll))\n\n(defn index-by [key coll]\n  \"Transform a coll to a map with a given key as a lookup value\"\n  (into {} (map (juxt key identity) (add-epoch :createdAt coll))))\n\n;; -- Event Handlers ----------------------------------------------------------\n;;\n(reg-event-fx    ;; usage: (dispatch [:initialise-db])\n :initialise-db  ;; sets up initial application state\n\n ;; the interceptor chain (a vector of interceptors)\n [(inject-cofx :local-store-user)]  ;; gets user from localstore, and puts into coeffects arg\n\n ;; the event handler (function) being registered\n (fn  [{:keys [local-store-user]} _]               ;; take 2 vals from coeffects. Ignore event vector itself.\n   {:db (assoc default-db :user local-store-user)}))  ;; what it returns becomes the new application state\n\n(reg-event-fx      ;; usage: (dispatch [:set-active-page {:page :home})\n :set-active-page  ;; triggered when the user clicks on a link that redirects to a another page\n (fn [{:keys [db]} [_ {:keys [page slug profile favorited]}]]  ;; destructure 2nd parameter to obtain keys\n   (let [set-page (assoc db :active-page page)]\n     (case page\n       ;; -- URL @ \"/\" --------------------------------------------------------\n       :home {:db set-page\n              :dispatch-n  (list (if (empty? (:user db))  ;; dispatch more than one event. When a user\n                                   [:get-articles {:limit 10}]        ;; is NOT logged in we display all articles\n                                   [:get-feed-articles {:limit 10}])  ;; otherwiser we get her/his feed articles\n                                 [:get-tags])}            ;; we also can't forget to get tags\n\n       ;; -- URL @ \"/login\" | \"/register\" | \"/settings\" -----------------------\n       (:login :register :settings) {:db set-page}  ;; when using case with multiple test constants that\n                                                    ;; do the same thing we can group them together\n                                                    ;; (:login :register :settings) {:db set-page} is the same as:\n                                                    ;; :login {:db set-page}\n                                                    ;; :register {:db set-page}\n                                                    ;; :settings {:db set-page}\n       ;; -- URL @ \"/editor\" --------------------------------------------------\n       :editor {:db       set-page\n                :dispatch (if slug                      ;; When we click article to edit we need\n                            [:set-active-article slug]  ;; to set it active or if we want to write\n                            [:reset-active-article])}   ;; a new article we reset\n\n       ;; -- URL @ \"/article/:slug\" -------------------------------------------\n       :article {:db       (assoc set-page\n                                  :active-article slug)\n                 :dispatch-n (list [:get-article-comments {:slug slug}]\n                                   [:get-user-profile {:profile (get-in db [:articles slug :author :username])}])}\n\n       ;; -- URL @ \"/:profile\" ------------------------------------------------\n       :profile {:db         (assoc set-page\n                                    :active-article slug)\n                 :dispatch-n (list [:get-user-profile {:profile profile}]  ;; again for dispatching multiple\n                                   [:get-articles {:author profile}])}     ;; events we can use :dispatch-n\n       ;; -- URL @ \"/:profile/favorites\" --------------------------------------\n       :favorited {:db       (assoc db :active-page :profile)             ;; even though we are at :favorited we still\n                   :dispatch [:get-articles {:favorited favorited}]}))))  ;; display :profile with :favorited articles\n\n(reg-event-db                     ;; usage: (dispatch [:reset-active-article])\n :reset-active-article            ;; triggered when the user enters new-article i.e. editor without slug\n (fn [db _]                       ;; 1st paramter in -db events is db, 2nd paramter not important therefore _\n   (dissoc db :active-article)))  ;; compute and return the new state\n\n(reg-event-fx  ;; usage: (dispatch [:set-active-article slug])\n :set-active-article\n (fn [{:keys [db]} [_ slug]]  ;; 1st parameter in -fx events is no longer just db. It is a map which contains a :db key.\n   {:db         (assoc db :active-article slug)             ;; The handler is returning a map which describes two side-effects:\n    :dispatch-n (list [:get-article-comments {:slug slug}]  ;; changne to app-state :db and future event in this case :dispatch-n\n                      [:get-user-profile {:profile (get-in db [:articles slug :author :username])}])}))\n\n;; -- GET Articles @ /api/articles --------------------------------------------\n;;\n(reg-event-fx                   ;; usage (dispatch [:get-articles {:limit 10 :tag \"tag-name\" ...}])\n :get-articles                  ;; triggered every time user request articles with differetn params\n (fn [{:keys [db]} [_ params]]  ;; params = {:limit 10 :tag \"tag-name\" ...}\n   {:http-xhrio {:method          :get\n                 :uri             (endpoint \"articles\")                     ;; evaluates to \"api/articles/\"\n                 :params          params                                    ;; include params in the request\n                 :headers         (auth-header db)                          ;; get and pass user token obtained during login\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:get-articles-success]                   ;; trigger get-articles-success event\n                 :on-failure      [:api-request-error :get-articles]}       ;; trigger api-request-error with :get-articles\n    :db          (-> db\n                     (assoc-in [:loading :articles] true)\n                     (assoc-in [:filter :offset] (:offset params))        ;; base on paassed params set a filter\n                     (assoc-in [:filter :tag] (:tag params))              ;; so that we can easily show and hide\n                     (assoc-in [:filter :author] (:author params))        ;; appropriate ui components\n                     (assoc-in [:filter :favorites] (:favorited params))\n                     (assoc-in [:filter :feed] false))}))                 ;; we need to disable filter by feed every time since it's not supported query param\n\n(reg-event-db\n :get-articles-success\n (fn [db [_ {articles :articles, articles-count :articlesCount}]]\n   (-> db\n       (assoc-in [:loading :articles] false)  ;; turn off loading flag for this event\n       (assoc :articles-count articles-count  ;; change app-state by adding articles-count\n              :articles (index-by :slug articles)))))  ;; and articles, which we index-by slug\n\n;; -- GET Article @ /api/articles/:slug ---------------------------------------\n;;\n(reg-event-fx                   ;; usage (dispatch [:get-article {:slug \"slug\"}])\n :get-article                   ;; triggered when a user upserts article i.e. is redirected to article page after saving an article\n (fn [{:keys [db]} [_ params]]  ;; params = {:slug \"slug\"}\n   {:http-xhrio {:method          :get\n                 :uri             (endpoint \"articles\" (:slug params))      ;; evaluates to \"api/articles/:slug\"\n                 :headers         (auth-header db)                          ;; get and pass user token obtained during login\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:get-article-success]                    ;; trigger get-article-success event\n                 :on-failure      [:api-request-error :get-article]}        ;; trigger api-request-error with :get-articles\n    :db          (assoc-in db [:loading :article] true)}))\n\n(reg-event-db\n :get-article-success\n (fn [db [_ {article :article}]]\n   (-> db\n       (assoc-in [:loading :article] false)\n       (assoc :articles (index-by :slug [article])))))\n\n;; -- POST/PUT Article @ /api/articles(/:slug) --------------------------------\n;;\n(reg-event-fx                   ;; usage (dispatch [:upsert-article article])\n :upsert-article                ;; when we update or insert (upsert) we are sending the same shape of information\n (fn [{:keys [db]} [_ params]]  ;; params = {:slug \"article-slug\" :article {:body \"article body\"} }\n   {:db         (assoc-in db [:loading :article] true)\n    :http-xhrio {:method          (if (:slug params) :put :post)             ;; when we get a slug we'll update (:put) otherwise insert (:post)\n                 :uri             (if (:slug params)                         ;; Same logic as above but we go with different\n                                    (endpoint \"articles\" (:slug params))     ;; endpoint - one with :slug to update\n                                    (endpoint \"articles\"))                   ;; and another to insert\n                 :headers         (auth-header db)                           ;; get and pass user token obtained during login\n                 :params          (:article params)\n                 :format          (json-request-format)                      ;; make sure we are doing request format wiht json\n                 :response-format (json-response-format {:keywords? true})   ;; json response and all keys to keywords\n                 :on-success      [:upsert-article-success]                  ;; trigger upsert-article-success event\n                 :on-failure      [:api-request-error :upsert-article]}}))   ;; trigger api-request-error with :upsert-article\n\n(reg-event-fx\n :upsert-article-success\n (fn [{:keys [db]} [_ {article :article}]]\n   {:db (-> db\n            (assoc-in [:loading :article] false)\n            (dissoc :comments)  ;; clean up any comments that we might have in db\n            (dissoc :errors)    ;; clean up any erros that we might have in db\n            (assoc :active-page :article\n                   :active-article (:slug article)))\n    :dispatch-n (list [:get-article {:slug (:slug article)}]             ;; when the users clicks save we fetch the new version\n                      [:get-article-comments {:slug (:slug article)}]    ;; of the article and comments from the server\n                      [:set-active-page {:page :article :slug (:slug article)}])}))\n\n;; -- DELETE Article @ /api/articles/:slug ------------------------------------\n;;\n(reg-event-fx                 ;; usage (dispatch [:delete-article slug])\n :delete-article              ;; triggered when a user deletes an article\n (fn [{:keys [db]} [_ slug]]  ;; slug = {:slug \"article-slug\"}\n   {:db         (assoc-in db [:loading :article] true)\n    :http-xhrio {:method          :delete\n                 :uri             (endpoint \"articles\" slug)                ;; evaluates to \"api/articles/:slug\"\n                 :headers         (auth-header db)                          ;; get and pass user token obtained during login\n                 :params          slug                                      ;; pass the article slug to delete\n                 :format          (json-request-format)                     ;; make sure we are doing request format wiht json\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:delete-article-success]                 ;; trigger get-articles-success\n                 :on-failure      [:api-request-error :delete-article]}}))  ;; trigger api-request-error with :delete-article\n\n(reg-event-fx\n :delete-article-success\n (fn [{:keys [db]} _]\n   {:db (-> db\n            (update-in [:articles] dissoc (:active-article db))\n            (assoc-in [:loading :article] false))\n    :dispatch [:set-active-page {:page :home}]}))\n\n;; -- GET Feed Articles @ /api/articles/feed ----------------------------------\n;;\n(reg-event-fx                   ;; usage (dispatch [:get-feed-articles {:limit 10 :offset 0 ...}])\n :get-feed-articles             ;; triggered when Your Feed tab is loaded\n (fn [{:keys [db]} [_ params]]  ;; params = {:offset 0 :limit 10}\n   {:http-xhrio {:method          :get\n                 :uri             (endpoint \"articles\" \"feed\")              ;; evaluates to \"api/articles/feed\"\n                 :params          params                                    ;; include params in the request\n                 :headers         (auth-header db)                          ;; get and pass user token obtained during login\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:get-feed-articles-success]              ;; trigger get-articles-success event\n                 :on-failure      [:api-request-error :get-feed-articles]}  ;; trigger api-request-error with :get-feed-articles\n    :db          (-> db\n                     (assoc-in [:loading :articles] true)\n                     (assoc-in [:filter :offset] (:offset params))\n                     (assoc-in [:filter :tag] nil)                          ;; with feed-articles we turn off almost all\n                     (assoc-in [:filter :author] nil)                       ;; filters to make sure everythinig on the\n                     (assoc-in [:filter :favorites] nil)                    ;; client is displayed correctly.\n                     (assoc-in [:filter :feed] true))}))                    ;; This is the only one we need\n\n(reg-event-db\n :get-feed-articles-success\n (fn [db [_ {articles :articles, articles-count :articlesCount}]]\n   (-> db\n       (assoc-in [:loading :articles] false)\n       (assoc :articles-count articles-count\n              :articles (index-by :slug articles)))))\n\n;; -- GET Tags @ /api/tags ----------------------------------------------------\n;;\n(reg-event-fx          ;; usage (dispatch [:get-tags])\n :get-tags             ;; triggered when the home page is loaded\n (fn [{:keys [db]} _]  ;; second parameter is not important, therefore _\n   {:db         (assoc-in db [:loading :tags] true)\n    :http-xhrio {:method          :get\n                 :uri             (endpoint \"tags\")                         ;; evaluates to \"api/tags\"\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:get-tags-success]                       ;; trigger get-tags-success event\n                 :on-failure      [:api-request-error :get-tags]}}))        ;; trigger api-request-error with :get-tags\n\n(reg-event-db\n :get-tags-success\n (fn [db [_ {tags :tags}]]\n   (-> db\n       (assoc-in [:loading :tags] false)\n       (assoc :tags tags))))\n\n;; -- GET Comments @ /api/articles/:slug/comments -----------------------------\n;;\n(reg-event-fx                   ;; usage (dispatch [:get-article-comments {:slug \"article-slug\"}])\n :get-article-comments          ;; triggered when the article page is loaded\n (fn [{:keys [db]} [_ params]]  ;; params = {:slug \"article-slug\"}\n   {:db         (assoc-in db [:loading :comments] true)\n    :http-xhrio {:method          :get\n                 :uri             (endpoint \"articles\" (:slug params) \"comments\")  ;; evaluates to \"api/articles/:slug/comments\"\n                 :headers         (auth-header db)                                 ;; get and pass user token obtained during login\n                 :response-format (json-response-format {:keywords? true})         ;; json response and all keys to keywords\n                 :on-success      [:get-article-comments-success]                  ;; trigger get-article-comments-success\n                 :on-failure      [:api-request-error :get-article-comments]}}))   ;; trigger api-request-error with :get-article-comments\n\n(reg-event-db\n :get-article-comments-success\n (fn [db [_ {comments :comments}]]\n   (-> db\n       (assoc-in [:loading :comments] false)\n       (assoc :comments (index-by :id comments))))) ;; another index-by, this time by id\n\n;; -- POST Comments @ /api/articles/:slug/comments ----------------------------\n;;\n(reg-event-fx                   ;; usage (dispatch [:post-comment comment])\n :post-comment                  ;; triggered when a user submits a comment\n (fn [{:keys [db]} [_ body]]    ;; body = {:body \"body\" }\n   {:db         (assoc-in db [:loading :comments] true)\n    :http-xhrio {:method          :post\n                 :uri             (endpoint \"articles\" (:active-article db) \"comments\")  ;; evaluates to \"api/articles/:slug/comments\"\n                 :headers         (auth-header db)                                       ;; get and pass user token obtained during login\n                 :params          body\n                 :format          (json-request-format)                                  ;; make sure we are doing request format wiht json\n                 :response-format (json-response-format {:keywords? true})               ;; json response and all keys to keywords\n                 :on-success      [:post-comment-success]                                ;; trigger get-articles-success\n                 :on-failure      [:api-request-error :comments]}}))                     ;; trigger api-request-error with :comments\n\n(reg-event-fx\n :post-comment-success\n (fn [{:keys [db]} [_ comment]]\n   {:db (-> db\n            (assoc-in [:loading :comments] false)\n            (assoc-in [:articles (:active-article db) :comments] comment)\n            (update-in [:errors] dissoc :comments)) ;; clean up errors, if any\n    :dispatch [:get-article-comments {:slug (:active-article db)}]}))\n\n;; -- DELETE Comments @ /api/articles/:slug/comments/:comment-id ----------------------\n;;\n(reg-event-fx                       ;; usage (dispatch [:delete-comment comment-id])\n :delete-comment                    ;; triggered when a user deletes an article\n (fn [{:keys [db]} [_ comment-id]]  ;; comment-id = 1234\n   {:db         (do\n                  (assoc-in db [:loading :comments] true)\n                  (assoc db :active-comment comment-id))\n    :http-xhrio {:method          :delete\n                 :uri             (endpoint \"articles\" (:active-article db) \"comments\" comment-id)  ;; evaluates to \"api/articles/:slug/comments/:comment-id\"\n                 :headers         (auth-header db)                                                  ;; get and pass user token obtained during login\n                 :format          (json-request-format)                                             ;; make sure we are doing request format wiht json\n                 :response-format (json-response-format {:keywords? true})                          ;; json response and all keys to keywords\n                 :on-success      [:delete-comment-success]                                         ;; trigger delete-comment-success\n                 :on-failure      [:api-request-error :delete-comment]}}))                          ;; trigger api-request-error with :delete-comment\n\n(reg-event-db\n :delete-comment-success\n (fn [db _]\n   (-> db\n       (update-in [:comments] dissoc (:active-comment db)) ;; we could do another fetch of comments\n       (dissoc :active-comment)                            ;; but instead we just remove it from app-db\n       (assoc-in [:loading :comment] false))))             ;; which gives us much snappier ui\n\n;; -- GET Profile @ /api/profiles/:username -----------------------------------\n;;\n(reg-event-fx       ;; usage (dispatch [:get-user-profile {:profile \"profile\"}])\n :get-user-profile  ;; triggered when the profile page is loaded\n (fn [{:keys [db]} [_ params]]  ;; params = {:profile \"profile\"}\n   {:db         (assoc-in db [:loading :profile] true)\n    :http-xhrio {:method          :get\n                 :uri             (endpoint \"profiles\" (:profile params))     ;; evaluates to \"api/profiles/:profile\"\n                 :headers         (auth-header db)                            ;; get and pass user token obtained during login\n                 :response-format (json-response-format {:keywords? true})    ;; json response and all keys to keywords\n                 :on-success      [:get-user-profile-success]                 ;; trigger get-user-profile-success\n                 :on-failure      [:api-request-error :get-user-profile]}}))  ;; trigger api-request-error with :get-user-profile\n\n(reg-event-db\n :get-user-profile-success\n (fn [db [_ {profile :profile}]]\n   (-> db\n       (assoc-in [:loading :profile] false)\n       (assoc :profile profile))))\n\n;; -- POST Login @ /api/users/login -------------------------------------------\n;;\n(reg-event-fx                        ;; usage (dispatch [:login user])\n :login                              ;; triggered when a users submits login form\n (fn [{:keys [db]} [_ credentials]]  ;; credentials = {:email ... :password ...}\n   {:db         (assoc-in db [:loading :login] true)\n    :http-xhrio {:method          :post\n                 :uri             (endpoint \"users\" \"login\")                ;; evaluates to \"api/users/login\"\n                 :params          {:user credentials}                       ;; {:user {:email ... :password ...}}\n                 :format          (json-request-format)                     ;; make sure it's json\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:login-success]                          ;; trigger login-success\n                 :on-failure      [:api-request-error :login]}}))           ;; trigger api-request-error with :login\n\n(reg-event-fx\n :login-success\n ;; The standard set of interceptors, defined above, which we\n ;; use for all user-modifying event handlers. Looks after\n ;; writing user to localStorage.\n ;; NOTE: this chain includes `path` and `trim-v`\n set-user-interceptor\n\n ;; The event handler function.\n ;; The \"path\" interceptor in `set-user-interceptor` means 1st parameter is the\n ;; value at `:user` path within `db`, rather than the full `db`.\n ;; And, further, it means the event handler returns just the value to be\n ;; put into `:user` path, and not the entire `db`.\n ;; So, a path interceptor makes the event handler act more like clojure's `update-in`\n (fn [{user :db} [{props :user}]]\n   {:db (merge user props)\n    :dispatch-n (list [:complete-request :login]\n                      [:get-feed-articles {:tag nil :author nil :offset 0 :limit 10}]\n                      [:set-active-page {:page :home}])}))\n\n;; -- POST Registration @ /api/users ------------------------------------------\n;;\n(reg-event-fx                         ;; usage (dispatch [:register-user registration])\n :register-user                       ;; triggered when a users submits registration form\n (fn [{:keys [db]} [_ registration]]  ;; registration = {:username ... :email ... :password ...}\n   {:db         (assoc-in db [:loading :register-user] true)\n    :http-xhrio {:method          :post\n                 :uri             (endpoint \"users\")                        ;; evaluates to \"api/users\"\n                 :params          {:user registration}                      ;; {:user {:username ... :email ... :password ...}}\n                 :format          (json-request-format)                     ;; make sure it's json\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:register-user-success]                  ;; trigger login-success\n                 :on-failure      [:api-request-error :register-user]}}))   ;; trigger api-request-error with :login-success\n\n(reg-event-fx\n :register-user-success\n ;; The standard set of interceptors, defined above, which we\n ;; use for all user-modifying event handlers. Looks after\n ;; writing user to LocalStore.\n ;; NOTE: this chain includes `path` and `trim-v`\n set-user-interceptor\n\n ;; The event handler function.\n ;; The \"path\" interceptor in `set-user-interceptor` means 1st parameter is the\n ;; value at `:user` path within `db`, rather than the full `db`.\n ;; And, further, it means the event handler returns just the value to be\n ;; put into `:user` path, and not the entire `db`.\n ;; So, a path interceptor makes the event handler act more like clojure's `update-in`\n (fn [{user :db} [{props :user}]]\n   {:db (merge user props)\n    :dispatch-n (list [:complete-request :register-user]\n                      [:set-active-page {:page :home}])}))\n\n;; -- PUT Update User @ /api/user ---------------------------------------------\n;;\n(reg-event-fx                         ;; usage (dispatch [:update-user user])\n :update-user                         ;; triggered when a users updates settgins\n (fn [{:keys [db]} [_ user]]          ;; user = {:img ... :username ... :bio ... :email ... :password ...}\n   {:db         (assoc-in db [:loading :update-user] true)\n    :http-xhrio {:method          :put\n                 :uri             (endpoint \"user\")                         ;; evaluates to \"api/user\"\n                 :params          {:user user}                              ;; {:user {:img ... :username ... :bio ... :email ... :password ...}}\n                 :headers         (auth-header db)                          ;; get and pass user token obtained during login\n                 :format          (json-request-format)                     ;; make sure our request is json\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:update-user-success]                    ;; trigger update-user-success\n                 :on-failure      [:api-request-error :update-user]}}))     ;; trigger api-request-error with :update-user\n\n(reg-event-fx\n :update-user-success\n ;; The standard set of interceptors, defined above, which we\n ;; use for all user-modifying event handlers. Looks after\n ;; writing user to LocalStore.\n ;; NOTE: this chain includes `path` and `trim-v`\n set-user-interceptor\n\n ;; The event handler function.\n ;; The \"path\" interceptor in `set-user-interceptor` means 1st parameter is the\n ;; value at `:user` path within `db`, rather than the full `db`.\n ;; And, further, it means the event handler returns just the value to be\n ;; put into `:user` path, and not the entire `db`.\n ;; So, a path interceptor makes the event handler act more like clojure's `update-in`\n (fn [{user :db} [{props :user}]]\n   {:db (merge user props)\n    :dispatch [:complete-request :update-user]}))\n\n;; -- Toggle follow user @ /api/profiles/:username/follow ---------------------\n;;\n(reg-event-fx                     ;; usage (dispatch [:toggle-follow-user username])\n :toggle-follow-user              ;; triggered when user clicks follow/unfollow button on profile page\n (fn [{:keys [db]} [_ username]]  ;; username = :username\n   {:db         (assoc-in db [:loading :toggle-follow-user] true)\n    :http-xhrio {:method          (if (get-in db [:profile :following]) :delete :post)  ;; check if we follow if yes DELETE, no POST\n                 :uri             (endpoint \"profiles\" username \"follow\")               ;; evaluates to \"api/profiles/:username/follow\"\n                 :headers         (auth-header db)                                      ;; get and pass user token obtained during login\n                 :format          (json-request-format)                                 ;; make sure it's json\n                 :response-format (json-response-format {:keywords? true})              ;; json response and all keys to keywords\n                 :on-success      [:toggle-follow-user-success]                         ;; trigger toggle-follow-user-success\n                 :on-failure      [:api-request-error :login]}}))                       ;; trigger api-request-error with :update-user-success\n\n(reg-event-db  ;; usage: (dispatch [:toggle-follow-user-success])\n :toggle-follow-user-success\n (fn [db [_ {profile :profile}]]\n   (-> db\n       (assoc-in [:loading :toggle-follow-user] false)\n       (assoc-in [:profile :following] (:following profile)))))\n\n;; -- Toggle favorite article @ /api/articles/:slug/favorite ------------------\n;;\n(reg-event-fx                 ;; usage (dispatch [:toggle-favorite-article slug])\n :toggle-favorite-article     ;; triggered when user clicks favorite/unfavorite button on profile page\n (fn [{:keys [db]} [_ slug]]  ;; slug = :slug\n   {:db         (assoc-in db [:loading :toggle-favorite-article] true)\n    :http-xhrio {:method          (if (get-in db [:articles slug :favorited]) :delete :post)  ;; check if article is already favorite: yes DELETE, no POST\n                 :uri             (endpoint \"articles\" slug \"favorite\")                       ;; evaluates to \"api/articles/:slug/favorite\"\n                 :headers         (auth-header db)                                            ;; get and pass user token obtained during login\n                 :format          (json-request-format)                                       ;; make sure it's json\n                 :response-format (json-response-format {:keywords? true})                    ;; json response and all keys to keywords\n                 :on-success      [:toggle-favorite-article-success]                          ;; trigger toggle-favorite-article-success\n                 :on-failure      [:api-request-error :login]}}))                             ;; trigger api-request-error with :toggle-favorite-article\n\n(reg-event-db  ;; usage: (dispatch [:toggle-favorite-article-success])\n :toggle-favorite-article-success\n (fn [db [_ {article :article}]]\n   (let [slug (:slug article)\n         favorited (:favorited article)]\n     (-> db\n         (assoc-in [:loading :toggle-favorite-article] false)\n         (assoc-in [:articles slug :favorited] favorited)\n         (assoc-in [:articles slug :favoritesCount] (if favorited\n                                                      (:favoritesCount article inc)\n                                                      (:favoritesCount article dec)))))))\n\n;; -- Logout ------------------------------------------------------------------\n;;\n(reg-event-fx  ;; usage (dispatch [:logout])\n :logout\n ;; This interceptor, defined above, makes sure\n ;; that we clean up localStorage after logging-out\n ;; the user.\n remove-user-interceptor\n ;; The event handler function removes the user from\n ;; app-state = :db and sets the url to \"/\".\n (fn [{:keys [db]} _]\n   {:db      (dissoc db :user)  ;; remove user from db\n    :dispatch [:set-active-page {:page :home}]}))\n\n;; -- Request Handlers -----------------------------------------------------------\n;;\n(reg-event-db\n :complete-request         ;; when we complete a request we need to clean up\n (fn [db [_ request-type]] ;; few things so that our ui is nice and tidy\n   (assoc-in db [:loading request-type] false)))\n\n(reg-event-fx\n :api-request-error  ;; triggered when we get request-error from the server\n (fn [{:keys [db]} [_ request-type response]]  ;; destructure to obtain request-type and response\n   {:db (assoc-in db [:errors request-type] (get-in response [:response :errors]))  ;; save in db so that we can\n    :dispatch [:complete-request request-type]}))                                   ;; display it to the user\n"]}