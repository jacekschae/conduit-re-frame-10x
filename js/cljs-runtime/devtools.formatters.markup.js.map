{"version":3,"file":"devtools.formatters.markup.js","sources":["devtools/formatters/markup.cljs"],"mappings":"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","names":["devtools.formatters.markup._LT_type_GT_.cljs$core$IFn$_invoke$arity$variadic","constructor-fn","header-tag","devtools.formatters.markup/<details>","target","starting-index","more?","devtools.formatters.markup/<type-basis-item>","basis-item","devtools.formatters.markup/<body>","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","aligned-lines","cljs.core/count","fns","max-fns","children","prefix","devtools.formatters.markup/<keyword>","keyword","start-index","max-number-body-items","devtools.formatters.markup/<protocol-method-arities-details>","temp__5455__auto__","more-symbol","opts","devtools.formatters.helpers/should-render?","value","devtools.formatters.helpers/cljs-type?","devtools.formatters.markup/<standalone-type>","fields-markup","fields","vec__32451","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","ns","name","devtools.munging/parse-fn-info","fn-obj","devtools.formatters.markup/<protocol-method>","arities","more-count","name-markup","lambda?","ol-tag","lines-markups","devtools.formatters.markup/<aligned-body>","methods-markups-lists","ns-markups-list","native-markups-list","li-tag","line","devtools.formatters.markup/<header>","basis-markup","cljs.core/empty?","basis","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup/<meta>","metadata","cljs.core/first","devtools.formatters.markup/<header-expander>","object","devtools.formatters.markup/body-lines","var_args","args__4500__auto__","len__4497__auto__","i__4498__auto__","argseq__4501__auto__","cljs.core/IndexedSeq","devtools.formatters.markup/print-with","p__32334","vec__32335","seq32326","G__32327","cljs.core/next","G__32328","G__32329","method","tag","max-level","devtools.formatters.markup/<fields>","p__32524","vec__32525","seq32519","G__32520","max-fields","bool","body-fn","devtools.formatters.markup/<preview>","devtools.formatters.markup._LT_reference_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup._LT_raw_surrogate_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.state/reset-depth-limits","devtools.formatters.markup/<more-protocols>","devtools.formatters.markup/print-via-writer","p__32351","vec__32352","seq32347","G__32348","G__32349","devtools.formatters.markup/<surrogate-target>","surrogate","string-with-nl-markers","string","re-nl","nl-marker","job-fn","details-markup","fields-details-markup-fn","devtools.formatters.markup/<fields-details>","cljs.core.take.cljs$core$IFn$_invoke$arity$2","devtools.formatters.markup/<field>","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__32531","vec__32532","fields-markups","devtools.formatters.markup/<native-reference>","details-markup-fn","cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup/<type-details>","devtools.formatters.markup/*markup-db*","header","more-markup","devtools.formatters.markup._LT_reference_surrogate_GT_.cljs$core$IFn$_invoke$arity$variadic","rest","more-label-markup","custom-printing-markup","custom-printing?","devtools.formatters.markup/<arities>","devtools.formatters.markup/<raw-surrogate>","seq32380","cljs.core/seq","args","p__32468","vec__32469","seq32466","G__32467","dq","devtools.formatters.helpers/pref","make-arity-markup-list","arity","devtools.formatters.markup/<reference>","seq32398","lines","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","body","arities-markup","chunk","seq","vec__32516","field","devtools.formatters.markup/<symbol>","symbol","cljs.core/fn?","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","prefix-markup","obj","preview-markup","should-abbreviate?","devtools.formatters.markup._LT_list_GT_.cljs$core$IFn$_invoke$arity$variadic","protocols-markups","max-protocols","or__3922__auto__","max-inline-string-size","index-markup","devtools.formatters.markup/<index>","index","protocol-obj","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","aritites-markups","quote-string","inline-string","icon-markup","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","devtools.formatters.markup/<surrogate>","markups-lists","devtools.formatters.markup/prepare-body-lines","devtools.formatters.markup/<surrogate-header>","devtools.formatters.helpers/should-render-instance?","devtools.formatters.markup/<instance>","p__32484","vec__32485","methods-markups","methods","G__32339","G__32340","G__32341","devtools.formatters.markup/get-markup-db","devtools.formatters.markup.print_with.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.printing/managed-print-via-protocol","markup","devtools.formatters.templating/get-surrogate-target","devtools.munging/get-protocol-object","selector","items","max-count","js/Error","devtools.formatters.markup/<function-details>","_name","separator","items-markups","map__32495","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","fast?","protocol","multi-arity?","spacer-symbol","native-markup","ns-markup","devtools.formatters.markup/<protocol-details>","_fast?","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","prepend-li-tag","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","p1__32515#","devtools.formatters.markup._LT_surrogate_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.state/set-managed-print-level","body-markup","devtools.munging/collect-protocol-methods","arities-markupts-lists","reference","p1__32419#","devtools.formatters.state/set-prevent-recursion","_ns","devtools.munging/parse-constructor-info","multi-arity-symbol","devtools.formatters.markup.print_via_writer.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.helpers/wrap-arity","value-markup","cljs.core/list","devtools.formatters.markup/<protocol>","protocols","inner-markup","cljs.core/symbol?","devtools.munging/scan-protocols","work","p__32491","vec__32492","seq32488","G__32489","G__32490","devtools.formatters.markup._LT_fields_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.munging/extract-arities","rest-symbol","fields-preview-markup","js/RegExp","abbreviated-string-markup","abbreviated-string","cljs.core/number?","devtools.formatters.markup/<number>","devtools.formatters.markup._LT_expandable_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup/<function>","devtools.formatters.markup/<surrogate-body>","has-protocols?","cljs.core/name","devtools.formatters.helpers/bool?","devtools.formatters.markup/<bool>","s","cljs.core/seqable?","devtools.formatters.printing/managed-print-via-writer","protocols-list-markup","devtools.formatters.markup/<standard-body-reference>","devtools.formatters.markup/<cljs-land>","seq32420","fake-protocol","devtools.formatters.helpers/get-more-marker","arity-fn","default-details-fn","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","devtools.formatters.markup/<list-details>","devtools.formatters.markup/<protocol-method-arities>","p__32477","vec__32478","seq32475","G__32476","devtools.formatters.markup._LT_standard_body_GT_.cljs$core$IFn$_invoke$arity$variadic","has-continuation?","devtools.formatters.markup/<type-basis>","data","no-margin?","devtools.formatters.markup/<protocol-method-arity>","type-markup","devtools.formatters.markup/body-line","cljs.core/rest","devtools.formatters.markup/<fields-details-row>","*print-level*32342","cljs.core/*print-level*","devtools.formatters.markup/<list>","p__32439","vec__32440","seq32436","G__32437","G__32438","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","devtools.formatters.markup/<expandable>","seq32376","devtools.formatters.helpers/fetch-fields-values","number","devtools.formatters.helpers/cljs-function?","children-markups","cljs.core/keyword?","details-fn","devtools.formatters.templating/get-surrogate-body","vec__32460","devtools.formatters.markup._LT_protocol_GT_.cljs$core$IFn$_invoke$arity$variadic","item-markups","devtools.formatters.markup/<type>","p__32456","vec__32457","seq32454","G__32455","cljs.core/PersistentHashMap","devtools.formatters.markup/<protocols-list>","p__32503","vec__32504","seq32500","G__32501","G__32502","o","devtools.formatters.markup/<standard-body>","p__32426","vec__32427","seq32424","G__32425","cljs.core/integer?","devtools.formatters.markup/<atomic>","cljs.core/nil?","devtools.formatters.markup/<nil>","devtools.formatters.templating/get-surrogate-start-index","devtools.formatters.markup/<string>","continue?","devtools.formatters.markup/print-via-protocol","p__32368","vec__32369","seq32365","G__32366","G__32367","devtools.formatters.markup._LT_cljs_land_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.helpers/abbreviate-long-string","devtools.formatters.templating/get-surrogate-header","devtools.formatters.markup/<circular-reference>","seq32414","devtools.formatters.markup/<meta-wrapper>","seq32446","G__32447","cljs.core/string?","p__32390","vec__32391","seq32384","vec__32557","devtools.formatters.helpers/get-constructor","_opts","devtools.formatters.markup/<reference-surrogate>","seq32403"],"sourcesContent":["(ns devtools.formatters.markup\n  (:require-macros [devtools.formatters.markup :refer [emit-markup-db]])\n  (:require [devtools.formatters.helpers :refer [bool? cljs-function? cljs-type? cljs-instance?\n                                                 should-render-instance? expandable? abbreviated?\n                                                 abbreviate-long-string get-constructor pref should-render?\n                                                 get-more-marker wrap-arity fetch-fields-values]]\n            [devtools.formatters.printing :refer [managed-print-via-writer managed-print-via-protocol]]\n            [devtools.formatters.state :refer [set-prevent-recursion set-managed-print-level reset-depth-limits]]\n            [devtools.formatters.templating :refer [get-surrogate-body\n                                                    get-surrogate-target\n                                                    get-surrogate-start-index\n                                                    get-surrogate-header]]\n            [devtools.munging :as munging]))\n\n; reusable hiccup-like templates\n\n(declare get-markup-db)\n\n; -- cljs printing  ---------------------------------------------------------------------------------------------------------\n\n(defn print-with [method value tag & [max-level]]\n  (let [job-fn #(method value tag (get-markup-db))]\n    (if (some? max-level)\n      (binding [*print-level* (inc max-level)]                                                                                ; when printing do at most print-level deep recursion\n        (job-fn))\n      (job-fn))))\n\n(defn print-via-writer [value tag & [max-level]]\n  (print-with managed-print-via-writer value tag max-level))\n\n(defn print-via-protocol [value tag & [max-level]]\n  (print-with managed-print-via-protocol value tag max-level))\n\n; -- references -------------------------------------------------------------------------------------------------------------\n\n(defn <expandable> [& children]\n  (let [inner-markup (concat [:expandable-inner-tag] children)]\n    [:expandable-tag :expandable-symbol inner-markup]))\n\n(defn <raw-surrogate> [& args]\n  (concat [\"surrogate\"] args))\n\n(defn <surrogate> [& [object header body start-index]]\n  (let [header (if (some? body) (<expandable> header) header)]\n    (<raw-surrogate> object header body start-index)))\n\n(defn <reference> [& args]\n  (concat [\"reference\"] args))\n\n(defn <reference-surrogate> [& args]\n  (<reference> (apply <surrogate> args)))\n\n(defn <circular-reference> [& children]\n  (<reference-surrogate> nil [:circular-reference-tag :circular-ref-icon] (concat [:circular-reference-body-tag] children)))\n\n(defn <native-reference> [object]\n  (let [reference (<reference> object #(set-prevent-recursion % true))]\n    [:native-reference-wrapper-tag :native-reference-background [:native-reference-tag reference]]))\n\n(defn <header-expander> [object]\n  (<reference> (<raw-surrogate> object :header-expander-symbol :target) reset-depth-limits))\n\n; -- simple markup ----------------------------------------------------------------------------------------------------------\n\n(defn <cljs-land> [& children]\n  (concat [:cljs-land-tag] children))\n\n(defn <nil> []\n  ; this code is duplicated in templating.cljs, see make-reference\n  [:nil-tag :nil-label])\n\n(defn <bool> [bool]\n  [:bool-tag (str bool)])\n\n(defn <keyword> [keyword]\n  [:keyword-tag (str keyword)])\n\n(defn <symbol> [symbol]\n  [:symbol-tag (str symbol)])\n\n(defn <number> [number]\n  (if (integer? number)\n    [:integer-tag number]\n    [:float-tag number]))\n\n; -- string markup ----------------------------------------------------------------------------------------------------------\n\n(defn <string> [string]\n  (let [dq (pref :dq)\n        re-nl (js/RegExp. \"\\n\" \"g\")\n        nl-marker (pref :new-line-string-replacer)\n        inline-string (.replace string re-nl nl-marker)\n        max-inline-string-size (+ (pref :string-prefix-limit) (pref :string-postfix-limit))\n        quote-string (fn [s] (str dq s dq))\n        should-abbreviate? (> (count inline-string) max-inline-string-size)]\n    (if should-abbreviate?\n      (let [abbreviated-string (abbreviate-long-string inline-string\n                                                       (pref :string-abbreviation-marker)\n                                                       (pref :string-prefix-limit)\n                                                       (pref :string-postfix-limit))\n            abbreviated-string-markup [:string-tag (quote-string abbreviated-string)]\n            string-with-nl-markers (.replace string re-nl (str nl-marker \"\\n\"))\n            details-markup [:expanded-string-tag string-with-nl-markers]]\n        (<reference-surrogate> string abbreviated-string-markup details-markup))\n      [:string-tag (quote-string inline-string)])))\n\n; -- generic preview markup -------------------------------------------------------------------------------------------------\n\n(defn <preview> [value]\n  (print-via-writer value :header-tag (pref :max-print-level)))\n\n; -- body-related templates -------------------------------------------------------------------------------------------------\n\n(defn <body> [markup]\n  [:body-tag markup])\n\n(defn <aligned-body> [markups-lists]\n  (let [prepend-li-tag (fn [line]\n                         (if line\n                           (concat [:aligned-li-tag] line)))\n        aligned-lines (keep prepend-li-tag markups-lists)]\n    (<body> (concat [:standard-ol-no-margin-tag] aligned-lines))))\n\n(defn <standard-body> [markups-lists & [no-margin?]]\n  (let [ol-tag (if no-margin? :standard-ol-no-margin-tag :standard-ol-tag)\n        li-tag (if no-margin? :standard-li-no-margin-tag :standard-li-tag)\n        prepend-li-tag (fn [line]\n                         (if line\n                           (concat [li-tag] line)))\n        lines-markups (keep prepend-li-tag markups-lists)]\n    (concat [ol-tag] lines-markups)))\n\n(defn <standard-body-reference> [o]\n  (<standard-body> [[(<reference> o)]]))\n\n; -- generic details markup -------------------------------------------------------------------------------------------------\n\n(defn <index> [value]\n  [:index-tag value :line-index-separator])\n\n(defn- body-line [index value]\n  (let [index-markup (<index> index)\n        value-markup (print-via-writer value :item-tag (pref :body-line-max-print-level))]\n    [index-markup value-markup]))\n\n; TODO: this fn is screaming for rewrite\n(defn- prepare-body-lines [data starting-index]\n  (loop [work data\n         index starting-index\n         lines []]\n    (if (empty? work)\n      lines\n      (recur (rest work) (inc index) (conj lines (body-line index (first work)))))))\n\n(defn- body-lines [value starting-index]\n  (let [seq (seq value)\n        max-number-body-items (pref :max-number-body-items)\n        chunk (take max-number-body-items seq)\n        rest (drop max-number-body-items seq)\n        lines (prepare-body-lines chunk starting-index)\n        continue? (not (empty? (take 1 rest)))]\n    (if-not continue?\n      lines\n      (let [more-label-markup [:body-items-more-tag :body-items-more-label]\n            start-index (+ starting-index max-number-body-items)\n            more-markup (<reference-surrogate> rest more-label-markup :target start-index)]\n        (conj lines [more-markup])))))\n\n(defn <details> [value starting-index]\n  (let [has-continuation? (pos? starting-index)\n        body-markup (<standard-body> (body-lines value starting-index) has-continuation?)]\n    (if has-continuation?\n      body-markup\n      (<body> body-markup))))\n\n; -- generic list template --------------------------------------------------------------------------------------------------\n\n(defn <list-details> [items _opts]\n  (<aligned-body> (map list items)))\n\n(defn <list> [items max-count & [opts]]\n  (let [items-markups (take max-count items)\n        more-count (- (count items) max-count)\n        more? (pos? more-count)\n        separator (or (:separator opts) :list-separator)\n        more-symbol (if more?\n                      (if-let [more-symbol (:more-symbol opts)]\n                        (if (fn? more-symbol)\n                          (more-symbol more-count)\n                          more-symbol)\n                        (get-more-marker more-count)))\n        preview-markup (concat [(or (:tag opts) :list-tag)\n                                (or (:open-symbol opts) :list-open-symbol)]\n                               (interpose separator items-markups)\n                               (if more? [separator more-symbol])\n                               [(or (:close-symbol opts) :list-close-symbol)])]\n    (if more?\n      (let [details-markup (:details opts)\n            default-details-fn (partial <list-details> items opts)]\n        (<reference-surrogate> nil preview-markup (or details-markup default-details-fn)))\n      preview-markup)))\n\n; -- mete-related markup ----------------------------------------------------------------------------------------------------\n\n(defn <meta> [metadata]\n  (let [body-fn (fn [] [:meta-body-tag (<preview> metadata)])\n        header [:meta-header-tag \"meta\"]]\n    [:meta-reference-tag (<reference-surrogate> metadata header body-fn)]))                                                   ; body must be lazy, see #35\n\n(defn <meta-wrapper> [metadata & children]\n  (concat [:meta-wrapper-tag] children [(<meta> metadata)]))\n\n; -- function markup --------------------------------------------------------------------------------------------------------\n\n(defn <function-details> [fn-obj ns _name arities prefix]\n  {:pre [(fn? fn-obj)]}\n  (let [arities (map wrap-arity arities)\n        make-arity-markup-list (fn [arity]\n                                 [[:fn-multi-arity-args-indent-tag prefix]\n                                  [:fn-args-tag arity]])\n        arities-markupts-lists (if (> (count arities) 1) (map make-arity-markup-list arities))\n        ns-markups-list (if-not (empty? ns) [:ns-icon [:fn-ns-name-tag ns]])\n        native-markups-list [:native-icon (<native-reference> fn-obj)]]\n    (<aligned-body> (concat arities-markupts-lists [ns-markups-list native-markups-list]))))\n\n(defn <arities> [arities]\n  (let [multi-arity? (> (count arities) 1)]\n    [:fn-args-tag (wrap-arity (if multi-arity?\n                                (pref :multi-arity-symbol)\n                                (first arities)))]))\n\n(defn <function> [fn-obj]\n  {:pre [(fn? fn-obj)]}\n  (let [[ns name] (munging/parse-fn-info fn-obj)\n        lambda? (empty? name)\n        spacer-symbol (pref :spacer)\n        rest-symbol (pref :rest-symbol)\n        multi-arity-symbol (pref :multi-arity-symbol)\n        arities (munging/extract-arities fn-obj true spacer-symbol multi-arity-symbol rest-symbol)\n        arities-markup (<arities> arities)\n        name-markup (if-not lambda? [:fn-name-tag name])\n        icon-markup (if lambda? :lambda-icon :fn-icon)\n        prefix-markup [:fn-prefix-tag icon-markup name-markup]\n        preview-markup [:fn-header-tag prefix-markup arities-markup]\n        details-fn (partial <function-details> fn-obj ns name arities prefix-markup)]\n    (<reference-surrogate> fn-obj preview-markup details-fn)))\n\n; -- type markup ------------------------------------------------------------------------------------------------------------\n\n(defn <type-basis-item> [basis-item]\n  [:type-basis-item-tag (name basis-item)])\n\n(defn <type-basis> [basis]\n  (let [item-markups (map <type-basis-item> basis)\n        children-markups (interpose :type-basis-item-separator item-markups)]\n    (concat [:type-basis-tag] children-markups)))\n\n(defn <type-details> [constructor-fn ns _name basis]\n  (let [ns-markup (if-not (empty? ns) [:ns-icon [:fn-ns-name-tag ns]])\n        basis-markup (if (empty? basis)\n                       [:empty-basis-symbol]\n                       [:basis-icon (<type-basis> basis)])\n        native-markup [:native-icon (<native-reference> constructor-fn)]]\n    (<aligned-body> [basis-markup ns-markup native-markup])))\n\n(defn <type> [constructor-fn & [header-tag]]\n  (let [[ns name basis] (munging/parse-constructor-info constructor-fn)\n        name-markup [:type-name-tag name]\n        preview-markup [(or header-tag :type-header-tag) :type-symbol name-markup]\n        details-markup-fn (partial <type-details> constructor-fn ns name basis)]\n    [:type-wrapper-tag\n     :type-header-background\n     [:type-ref-tag (<reference-surrogate> constructor-fn preview-markup details-markup-fn)]]))\n\n(defn <standalone-type> [constructor-fn & [header-tag]]\n  [:standalone-type-tag (<type> constructor-fn header-tag)])\n\n; -- protocols markup -------------------------------------------------------------------------------------------------------\n\n(defn <protocol-method-arity> [arity-fn]\n  (<reference> arity-fn))\n\n(defn <protocol-method-arities-details> [fns]\n  (<aligned-body> (map <protocol-method-arity> fns)))\n\n(defn <protocol-method-arities> [fns & [max-fns]]\n  (let [max-fns (or max-fns (pref :max-protocol-method-arities-list))\n        more? (> (count fns) max-fns)\n        aritites-markups (map <protocol-method-arity> (take max-fns fns))\n        preview-markup (concat [:protocol-method-arities-header-tag :protocol-method-arities-header-open-symbol]\n                               (interpose :protocol-method-arities-list-header-separator aritites-markups)\n                               (if more? [:protocol-method-arities-more-symbol])\n                               [:protocol-method-arities-header-close-symbol])]\n    (if more?\n      (let [details-markup-fn (partial <protocol-method-arities-details> fns)]\n        (<reference-surrogate> nil preview-markup details-markup-fn))\n      preview-markup)))\n\n(defn <protocol-method> [name arities]\n  [:protocol-method-tag\n   :method-icon\n   [:protocol-method-name-tag name]\n   (<protocol-method-arities> arities)])\n\n(defn <protocol-details> [obj ns _name selector _fast?]\n  (let [protocol-obj (munging/get-protocol-object selector)\n        ns-markups-list (if-not (empty? ns) [:ns-icon [:protocol-ns-name-tag ns]])\n        native-markups-list (if (some? protocol-obj) [:native-icon (<native-reference> protocol-obj)])\n        methods (munging/collect-protocol-methods obj selector)\n        methods-markups (map (fn [[name arities]] (<protocol-method> name arities)) methods)\n        methods-markups-lists (map list methods-markups)]\n    (<aligned-body> (concat methods-markups-lists [ns-markups-list native-markups-list]))))\n\n(defn <protocol> [obj protocol & [tag]]\n  (let [{:keys [ns name selector fast?]} protocol\n        preview-markup [(or tag :protocol-name-tag) name]\n        prefix-markup [(if fast? :fast-protocol-tag :slow-protocol-tag) :protocol-background]]\n    (if (some? obj)\n      (let [details-markup-fn (partial <protocol-details> obj ns name selector fast?)]\n        (conj prefix-markup (<reference-surrogate> obj preview-markup details-markup-fn)))\n      (conj prefix-markup preview-markup))))\n\n(defn <more-protocols> [more-count]\n  (let [fake-protocol {:name (get-more-marker more-count)}]\n    (<protocol> nil fake-protocol :protocol-more-tag)))\n\n(defn <protocols-list> [obj protocols & [max-protocols]]\n  (let [max-protocols (or max-protocols (pref :max-list-protocols))\n        protocols-markups (map (partial <protocol> obj) protocols)]\n    (<list> protocols-markups max-protocols {:tag          :protocols-header-tag\n                                             :open-symbol  :protocols-list-open-symbol\n                                             :close-symbol :protocols-list-close-symbol\n                                             :separator    :header-protocol-separator\n                                             :more-symbol  <more-protocols>})))\n\n; -- instance fields markup -------------------------------------------------------------------------------------------------\n\n(defn <field> [name value]\n  [:header-field-tag\n   [:header-field-name-tag (str name)]\n   :header-field-value-spacer\n   [:header-field-value-tag (<reference> (<surrogate> value) #(set-managed-print-level % 1))]\n   :header-field-separator])\n\n(defn <fields-details-row> [field]\n  (let [[name value] field]\n    [:body-field-tr-tag\n     [:body-field-td1-tag\n      :body-field-symbol\n      [:body-field-name-tag (str name)]]\n     [:body-field-td2-tag\n      :body-field-value-spacer]\n     [:body-field-td3-tag\n      [:body-field-value-tag (<reference-surrogate> value)]]]))\n\n(defn <fields> [fields & [max-fields]]\n  (if (zero? (count fields))\n    [:fields-header-tag :fields-header-no-fields-symbol]\n    (let [max-fields (or max-fields (pref :max-instance-header-fields))\n          more? (> (count fields) max-fields)\n          fields-markups (map (fn [[name value]] (<field> name value)) (take max-fields fields))]\n      (concat [:fields-header-tag\n               :fields-header-open-symbol]\n              fields-markups\n              [(if more? :more-fields-symbol)\n               :fields-header-close-symbol]))))\n\n(defn <fields-details> [fields obj]\n  (let [protocols (munging/scan-protocols obj)\n        has-protocols? (not (empty? protocols))\n        fields-markup (if-not (zero? (count fields))\n                        [:fields-icon (concat [:instance-body-fields-table-tag] (map <fields-details-row> fields))])\n        protocols-list-markup (if has-protocols? [:protocols-icon (<protocols-list> obj protocols)])\n        native-markup [:native-icon (<native-reference> obj)]]\n    (<aligned-body> [fields-markup protocols-list-markup native-markup])))\n\n; -- type/record instance markup --------------------------------------------------------------------------------------------\n\n(defn <instance> [value]\n  (let [constructor-fn (get-constructor value)\n        [_ns _name basis] (munging/parse-constructor-info constructor-fn)\n        custom-printing? (implements? IPrintWithWriter value)\n        type-markup (<type> constructor-fn :instance-type-header-tag)\n        fields (fetch-fields-values value basis)\n        fields-markup (<fields> fields (if custom-printing? 0))\n        fields-details-markup-fn #(<fields-details> fields value)\n        fields-preview-markup [:instance-value-tag (<reference-surrogate> value fields-markup fields-details-markup-fn)]\n        custom-printing-markup (if custom-printing?\n                                 [:instance-custom-printing-wrapper-tag\n                                  :instance-custom-printing-background\n                                  (print-via-protocol value :instance-custom-printing-tag)])]\n    [:instance-header-tag\n     :instance-header-background\n     fields-preview-markup\n     custom-printing-markup\n     type-markup]))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn <header> [value]\n  (<cljs-land> (<preview> value)))\n\n(defn <surrogate-header> [surrogate]\n  (or (get-surrogate-header surrogate)\n      (<preview> (get-surrogate-target surrogate))))\n\n(defn <surrogate-target> [surrogate]\n  (let [target (get-surrogate-target surrogate)]\n    (if (seqable? target)\n      (let [starting-index (get-surrogate-start-index surrogate)]\n        (<details> target starting-index))\n      (<standard-body-reference> target))))\n\n(defn <surrogate-body> [surrogate]\n  (if-let [body (get-surrogate-body surrogate)]\n    (if (= :target body)\n      (<surrogate-target> surrogate)\n      body)))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn <atomic> [value]\n  (cond\n    (should-render? :render-nils value nil?) (<nil>)\n    (should-render? :render-bools value bool?) (<bool> value)\n    (should-render? :render-strings value string?) (<string> value)\n    (should-render? :render-numbers value number?) (<number> value)\n    (should-render? :render-keywords value keyword?) (<keyword> value)\n    (should-render? :render-symbols value symbol?) (<symbol> value)\n    (should-render? :render-instances value should-render-instance?) (<instance> value)\n    (should-render? :render-types value cljs-type?) (<standalone-type> value)\n    (should-render? :render-functions value cljs-function?) (<function> value)))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(def ^:dynamic *markup-db*)\n\n; emit-markup-db macro will generate a map of all markup <functions> in this namespace:\n;\n;    {:atomic              <atomic>\n;     :reference           <reference>\n;     :native-reference    <native-reference>\n;     ...}\n;\n; we generate it only on first call and cache it in *markup-db*\n; emitting markup db statically into def would prevent dead-code elimination\n;\n(defn get-markup-db []\n  (if (nil? *markup-db*)\n    (set! *markup-db* (emit-markup-db)))\n  *markup-db*)\n"]}