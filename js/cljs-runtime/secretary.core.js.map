{"version":3,"file":"secretary.core.js","sources":["secretary/core.cljs"],"mappings":"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","names":["this","cljs.core/filterv","secretary.core/encode-query-params","query-params","secretary.core/*routes*","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","params","cljs.core.map.cljs$core$IFn$_invoke$arity$2","secretary.core/decode","ms","parsed-path","path","secretary.core/parse-path","cljs.core/deref","cljs.core/some","v","p__38301","vec__38302","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","ik","iv","vec__38388","vec__38391","s","r","p","secretary.core/lex*","clauses","secretary.core.key_index.cljs$core$IFn$_invoke$arity$2","k","i","x","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","secretary.core/re-escape-chars","secretary.core/prefix","secretary.core/key-parse","uri","cljs.core/empty?","invalid","lookup","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","$1","encoded","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","clojure.string.split.cljs$core$IFn$_invoke$arity$2","secretary.core/decode-query-params","orig-route","goog.object/set","secretary.core/IRouteValue","G__38496","secretary.core/route-value","G__38497","G__38498","cljs.core/PROTOCOL_SENTINEL","cljs.core/-add-method","secretary.core/encode-pair","p__38290","vec__38291","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","secretary.core/params-valid?","validations","parts","cljs.core/re-seq","index-re","secretary.core/encode-uri","m","route-string","js/RegExp","index","obj","p__38370","vec__38371","re","action","secretary.core/get-config","vec__38400","rs","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/seq","p__38265","vec__38268","hs","secretary.core/re-escape","query-string","route","cljs.core/re-matches","part","js/parseInt","vec__38344","secretary.core/compile-route","secretary.core/locate-route-value","cljs.core/last","h","secretary.core/re-matches*","cljs.core/PersistentVector","c","cljs.core/name","heads","compiled-route","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","value","cljs.core.get.cljs$core$IFn$_invoke$arity$2","key","secretary.core/render-route","cljs.core/sequential?","cljs.core/set?","secretary.core/t_secretary$core38403","_38405","meta38404","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cljs.core/-write","secretary.core/->t_secretary$core38403","or__3922__auto__","cljs.core/map?","cljs.core/native-satisfies?","cljs.core/IRecord","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","cljs.core/vector","p__38517","vec__38518","seq__38519","first__38520","cljs.core/first","cljs.core/next","vec__38521","seq__38522","first__38523","p__38324","vec__38325","cljs.core/reset!","temp__5455__auto__","and__3911__auto__","secretary.core/set-config!","secretary.core/invalid-params","xs","cljs.core.take.cljs$core$IFn$_invoke$arity$2","secretary.core.render_route.cljs$core$IFn$_invoke$arity$2","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","var_args","args__4500__auto__","len__4497__auto__","i__4498__auto__","argseq__4501__auto__","cljs.core/IndexedSeq","secretary.core/render-route*","seq38423","G__38424","args","secretary.core/lex-route","clojure.string/replace","cljs.core/re-pattern","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","secretary.core/encode","js/encodeURIComponent","uri-path","secretary.core/uri-with-leading-slash","p__38499","vec__38500","seq__38501","first__38502","vec__38503","seq__38504","first__38505","cljs.core/vec","cljs.core/cons","val","secretary.core/*config*","a","secretary.core/IRenderRoute","pattern","G__38509","G__38510","G__38511","_","validation","cljs.core/set","vec__38445","map__38448","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","secretary.core/uri-without-prefix","secretary.core/dispatch!","vec__38367","clojure.string.split.cljs$core$IFn$_invoke$arity$3","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","secretary.core/route-matches","pair","cljs.core/coll?","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/butlast","cljs.core/conj","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","js/decodeURIComponent","secretary.core/reset-routes!","temp__5457__auto__","vec__38406","seq__38407","first__38408","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","p__38333","vec__38334","clojure.walk/keywordize-keys","cljs.core/assoc-in","p__38432","vec__38433","secretary.core/locate-route","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","map__38512","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__38486","vec__38487","seq__38488","first__38489","vec__38490","seq__38491","first__38492","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","G__38328","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","p__38297","vec__38298","x__4211__auto__","m__4212__auto__","secretary/core.route-value","goog/typeOf","cljs.core/missing-protocol","secretary.core/IRouteMatches","G__38480","G__38481","G__38482","cljs.core/vector?","secretary.core/add-route!","vec__38483","seq__38484","first__38485","G__38245","js/Error","secretary/core.render-route","p__38476","vec__38477","G__38285","secretary.core/key-index","cljs.core/identity","p__38436","vec__38437","replacement","secretary.core/assoc-in-query-params","vec__38374","cljs.core/re-find","secretary.core/remove-route!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","G__38305","method-table__4382__auto__","prefer-table__4383__auto__","method-cache__4384__auto__","cached-hierarchy__4385__auto__","hierarchy__4386__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/get-global-hierarchy","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","secretary.core.key_index.cljs$core$IFn$_invoke$arity$1","secretary/core.route-matches"],"sourcesContent":["(ns secretary.core\n  (:require [clojure.string :as string]\n            [clojure.walk :refer [keywordize-keys]])\n  (:require-macros [secretary.core :refer [defroute]]))\n\n;;----------------------------------------------------------------------\n;; Protocols\n\n(defprotocol IRouteMatches\n  (route-matches [this route]))\n\n(defprotocol IRouteValue\n  (route-value [this]))\n\n(defprotocol IRenderRoute\n  (render-route\n    [this]\n    [this params]))\n\n;;----------------------------------------------------------------------\n;; Configuration\n\n(def ^:dynamic *config*\n  (atom {:prefix \"\"}))\n\n(defn get-config\n  \"Gets a value for *config* at path.\"\n  [path]\n  (let [path (if (sequential? path) path [path])]\n    (get-in @*config* path)))\n\n(defn set-config!\n  \"Associates a value val for *config* at path.\"\n  [path val]\n  (let [path (if (sequential? path) path [path])]\n    (swap! *config* assoc-in path val)))\n\n;;----------------------------------------------------------------------\n;; Parameter encoding\n\n(def encode js/encodeURIComponent)\n\n(defmulti\n  ^{:private true\n    :doc \"Given a key and a value return and encoded key-value pair.\"}\n  encode-pair\n  (fn [[k v]]\n    (cond\n     (or (sequential? v) (set? v))\n     ::sequential\n     (or (map? v) (satisfies? IRecord v))\n     ::map)))\n\n(defn- key-index\n  ([k] (str (name k) \"[]\"))\n  ([k index]\n     (str (name k) \"[\" index \"]\")))\n\n(defmethod encode-pair ::sequential [[k v]]\n  (let [encoded (map-indexed\n                 (fn [i x]\n                   (let [pair (if (coll? x)\n                                [(key-index k i) x]\n                                [(key-index k) x])]\n                     (encode-pair pair)))\n                 v)]\n    (string/join \\& encoded)))\n\n(defmethod encode-pair ::map [[k v]]\n  (let [encoded (map\n                 (fn [[ik iv]]\n                   (encode-pair [(key-index k (name ik)) iv]))\n                 v)]\n    (string/join \\& encoded)))\n\n(defmethod encode-pair :default [[k v]]\n  (str (name k) \\= (encode (str v))))\n\n(defn encode-query-params\n  \"Convert a map of query parameters into url encoded string.\"\n  [query-params]\n  (string/join \\& (map encode-pair query-params)))\n\n(defn encode-uri\n  \"Like js/encodeURIComponent excepts ignore slashes.\"\n  [uri]\n  (->> (string/split uri #\"/\")\n       (map encode)\n       (string/join \"/\")))\n\n;;----------------------------------------------------------------------\n;; Parameter decoding\n\n(def decode js/decodeURIComponent)\n\n(defn- parse-path\n  \"Parse a value from a serialized query-string key index. If the\n  index value is empty 0 is returned, if it's a digit it returns the\n  js/parseInt value, otherwise it returns the extracted index.\"\n  [path]\n  (let [index-re #\"\\[([^\\]]*)\\]*\" ;; Capture the index value.\n        parts (re-seq index-re path)]\n    (map\n     (fn [[_ part]]\n       (cond\n        (empty? part) 0\n        (re-matches #\"\\d+\" part) (js/parseInt part)\n        :else part))\n     parts)))\n\n(defn- key-parse\n  \"Return a key path for a serialized query-string entry.\n\n  Ex.\n\n    (key-parse \\\"foo[][a][][b]\\\")\n    ;; => (\\\"foo\\\" 0 \\\"a\\\" 0 \\\"b\\\")\n  \"\n  [k]\n  (let [re #\"([^\\[\\]]+)((?:\\[[^\\]]*\\])*)?\"\n        [_ key path] (re-matches re k)\n        parsed-path (when path (parse-path path))]\n    (cons key parsed-path)))\n\n(defn- assoc-in-query-params\n  \"Like assoc-in but numbers in path create vectors instead of maps.\n\n  Ex.\n\n    (assoc-in-query-params {} [\\\"foo\\\" 0] 1)\n    ;; => {\\\"foo\\\" [1]}\n\n    (assoc-in-query-params {} [\\\"foo\\\" 0 \\\"a\\\"] 1)\n    ;; => {\\\"foo\\\" [{\\\"a\\\" 1}]}\n  \"\n  [m path v]\n  (let [heads (fn [xs]\n                (map-indexed\n                 (fn [i _]\n                   (take (inc i) xs))\n                 xs))\n        hs (heads path)\n        m (reduce\n           (fn [m h]\n             (if (and (or (number? (last h)))\n                      (not (vector? (get-in m (butlast h)))))\n               (assoc-in m (butlast h) [])\n               m))\n           m\n           hs)]\n    (if (zero? (last path))\n      (update-in m (butlast path) conj v)\n      (assoc-in m path v))))\n\n(defn decode-query-params\n  \"Extract a map of query parameters from a query string.\"\n  [query-string]\n  (let [parts (string/split query-string #\"&\")\n        params (reduce\n                (fn [m part]\n                  ;; We only want two parts since the part on the right hand side\n                  ;; could potentially contain an =.\n                  (let [[k v] (string/split part #\"=\" 2)]\n                    (assoc-in-query-params m (key-parse k) (decode v))))\n                {}\n                parts)\n        params (keywordize-keys params)]\n    params))\n\n;;----------------------------------------------------------------------\n;; Route compilation\n\n;; The implementation for route compilation was inspired by Clout and\n;; modified to suit JavaScript and Secretary.\n;; SEE: https://github.com/weavejester/clout\n\n(defn- re-matches*\n  \"Like re-matches but result is a always vector. If re does not\n  capture matches then it will return a vector of [m m] as if it had a\n  single capture. Other wise it maintains consistent behavior with\n  re-matches. \"\n  [re s]\n  (let [ms (clojure.core/re-matches re s)]\n    (when ms\n      (if (sequential? ms) ms [ms ms]))))\n\n(def ^:private re-escape-chars\n  (set \"\\\\.*+|?()[]{}$^\"))\n\n(defn- re-escape [s]\n (reduce\n  (fn [s c]\n    (if (re-escape-chars c)\n      (str s \\\\ c)\n      (str s c)))\n  \"\"\n  s))\n\n(defn- lex*\n  \"Attempt to lex a single token from s with clauses. Each clause is a\n  pair of [regexp action] where action is a function. regexp is\n  expected to begin with ^ and contain a single capture. If the\n  attempt is successful a vector of [s-without-token (action capture)]\n  is returned. Otherwise the result is nil.\"\n  [s clauses]\n  (some\n   (fn [[re action]]\n     (when-let [[m c] (re-find re s)]\n       [(subs s (count m)) (action c)]))\n   clauses))\n\n(defn- lex-route\n  \"Return a pair of [regex params]. regex is a compiled regular\n  expression for matching routes. params is a list of route param\n  names (:*, :id, etc.). \"\n  [s clauses]\n  (loop [s s pattern \"\" params []]\n    (if (seq s)\n      (let [[s [r p]] (lex* s clauses)]\n        (recur s (str pattern r) (conj params p)))\n      [(re-pattern (str \\^ pattern \\$)) (remove nil? params)])))\n\n(defn- compile-route\n  \"Given a route return an instance of IRouteMatches.\"\n  [orig-route]\n  (let [clauses [[#\"^\\*([^\\s.:*/]*)\" ;; Splats, named splates\n                  (fn [v]\n                    (let [r \"(.*?)\"\n                          p (if (seq v)\n                              (keyword v)\n                              :*)]\n                      [r p]))]\n                 [#\"^\\:([^\\s.:*/]+)\" ;; Params\n                  (fn [v]\n                    (let [r \"([^,;?/]+)\"\n                          p (keyword v)]\n                      [r p]))]\n                 [#\"^([^:*]+)\" ;; Literals\n                  (fn [v]\n                    (let [r (re-escape v)]\n                      [r]))]]\n       [re params] (lex-route orig-route clauses)]\n   (reify\n     IRouteValue\n     (route-value [this] orig-route)\n\n     IRouteMatches\n     (route-matches [_ route]\n       (when-let [[_ & ms] (re-matches* re route)]\n         (->> (interleave params (map decode ms))\n              (partition 2)\n              (merge-with vector {})))))))\n\n;;----------------------------------------------------------------------\n;; Route rendering\n\n(defn ^:internal render-route* [obj & args]\n  (when (satisfies? IRenderRoute obj)\n    (apply render-route obj args)))\n\n;;----------------------------------------------------------------------\n;; Routes adding/removing\n\n(def ^:dynamic *routes*\n  (atom []))\n\n(defn add-route! [obj action]\n  (let [obj (if (string? obj)\n              (compile-route obj)\n              obj)]\n    (swap! *routes* conj [obj action])))\n\n(defn remove-route! [obj]\n  (swap! *routes*\n         (fn [rs]\n           (filterv\n            (fn [[x _]]\n              (not= x obj))\n            rs))))\n\n(defn reset-routes! []\n  (reset! *routes* []))\n\n;;----------------------------------------------------------------------\n;; Route lookup and dispatch\n\n(defn locate-route [route]\n  (some\n   (fn [[compiled-route action]]\n     (when-let [params (route-matches compiled-route route)]\n       {:action action :params params :route compiled-route}))\n   @*routes*))\n\n(defn locate-route-value\n  \"Returns original route value as set in defroute when passed a URI path.\"\n  [uri]\n  (-> uri locate-route :route route-value))\n\n(defn- prefix\n  []\n  (str (get-config [:prefix])))\n\n(defn- uri-without-prefix\n  [uri]\n  (string/replace uri (re-pattern (str \"^\" (prefix))) \"\"))\n\n(defn- uri-with-leading-slash\n  \"Ensures that the uri has a leading slash\"\n  [uri]\n  (if (= \"/\" (first uri))\n    uri\n    (str \"/\" uri)))\n\n(defn dispatch!\n  \"Dispatch an action for a given route if it matches the URI path.\"\n  [uri]\n  (let [[uri-path query-string] (string/split (uri-without-prefix uri) #\"\\?\")\n        uri-path (uri-with-leading-slash uri-path)\n        query-params (when query-string\n                       {:query-params (decode-query-params query-string)})\n        {:keys [action params]} (locate-route uri-path)\n        action (or action identity)\n        params (merge params query-params)]\n    (action params)))\n\n(defn invalid-params [params validations]\n  (reduce (fn [m [key validation]]\n            (let [value (get params key)]\n              (if (re-matches validation value)\n                m\n                (assoc m key [value validation]))))\n          {} (partition 2 validations)))\n\n(defn- params-valid? [params validations]\n  (empty? (invalid-params params validations)))\n\n;;----------------------------------------------------------------------\n;; Protocol implementations\n\n(extend-protocol IRouteMatches\n  string\n  (route-matches [this route]\n    (route-matches (compile-route this) route))\n\n  js/RegExp\n  (route-matches [this route]\n    (when-let [[_ & ms] (re-matches* this route)]\n      (vec ms)))\n\n  cljs.core/PersistentVector\n  (route-matches [[route-string & validations] route]\n    (let [params (route-matches (compile-route route-string) route)]\n      (when (params-valid? params validations)\n        params))))\n\n(extend-protocol IRouteValue\n  string\n  (route-value [this]\n    (route-value (compile-route this)))\n\n  js/RegExp\n  (route-value [this] this)\n\n  cljs.core/PersistentVector\n  (route-value [[route-string & validations]]\n    (vec (cons (route-value route-string) validations))))\n\n(extend-protocol IRenderRoute\n  string\n  (render-route\n    ([this]\n       (render-route this {}))\n    ([this params]\n       (let [{:keys [query-params] :as m} params\n             a (atom m)\n             path (.replace this (js/RegExp. \":[^\\\\s.:*/]+|\\\\*[^\\\\s.:*/]*\" \"g\")\n                            (fn [$1]\n                              (let [lookup (keyword (if (= $1 \"*\")\n                                                      $1\n                                                      (subs $1 1)))\n                                    v (get @a lookup)\n                                    replacement (if (sequential? v)\n                                                  (do\n                                                    (swap! a assoc lookup (next v))\n                                                    (encode-uri (first v)))\n                                                  (if v (encode-uri v) $1))]\n                                replacement)))\n             path (str (get-config [:prefix]) path)]\n         (if-let [query-string (and query-params\n                                    (encode-query-params query-params))]\n           (str path \"?\" query-string)\n           path))))\n\n  cljs.core/PersistentVector\n  (render-route\n    ([this]\n       (render-route this {}))\n    ([[route-string & validations] params]\n       (let [invalid (invalid-params params validations)]\n         (if (empty? invalid)\n           (render-route route-string params)\n           (throw (ex-info \"Could not build route: invalid params\" invalid)))))))\n"]}