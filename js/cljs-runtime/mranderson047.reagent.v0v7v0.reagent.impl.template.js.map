{"version":3,"file":"mranderson047.reagent.v0v7v0.reagent.impl.template.js","sources":["mranderson047/reagent/v0v7v0/reagent/impl/template.cljs"],"mappings":"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","names":["mranderson047.reagent.v0v7v0.reagent.impl.template/re-tag","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cljs.core/-write","mranderson047.reagent.v0v7v0.reagent.impl.template/NativeWrapper","mranderson047.reagent.v0v7v0.reagent.impl.template/->NativeWrapper","mranderson047.reagent.v0v7v0.reagent.impl.template/named?","x","cljs.core/Keyword","cljs.core/Symbol","mranderson047.reagent.v0v7v0.reagent.impl.template/hiccup-tag?","mranderson047.reagent.v0v7v0.reagent.impl.template/valid-tag?","cljs.core/ifn?","mranderson047.reagent.v0v7v0.reagent.impl.template/prop-name-cache","mranderson047.reagent.v0v7v0.reagent.impl.template/cache-get","o","k","mranderson047.reagent.v0v7v0.reagent.impl.template/cached-prop-name","temp__5459__auto__","k'","cljs.core/name","mranderson047.reagent.v0v7v0.reagent.impl.util/dash-to-camel","mranderson047.reagent.v0v7v0.reagent.impl.template/js-val?","goog/typeOf","mranderson047.reagent.v0v7v0.reagent.impl.template/kv-conv","v","G__24699","mranderson047.reagent.v0v7v0.reagent.impl.template/convert-prop-value","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","mranderson047.reagent.v0v7v0.reagent.impl.template/oset","G__24706","mranderson047.reagent.v0v7v0.reagent.impl.template/oget","mranderson047.reagent.v0v7v0.reagent.impl.template/set-id-class","p","id-class","id","class","old","mranderson047.reagent.v0v7v0.reagent.impl.template/convert-props","props","mranderson047.reagent.v0v7v0.reagent.impl.template/find-dom-node","mranderson047.reagent.v0v7v0.reagent.impl.template/these-inputs-have-selection-api","mranderson047.reagent.v0v7v0.reagent.impl.template/has-selection-api?","input-type","cljs.core/contains?","mranderson047.reagent.v0v7v0.reagent.impl.template/input-set-value","this","rendered-value","dom-value","node","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","js/document","node-value","mranderson047.reagent.v0v7v0.reagent.impl.batching/do-after-render","existing-offset-from-end","cljs.core/count","new-cursor-offset","mranderson047.reagent.v0v7v0.reagent.impl.template/input-handle-change","on-change","e","mranderson047.reagent.v0v7v0.reagent.impl.template/input-render-setup","jsprops","and__3911__auto__","js/Error","value","G__24714","p1__24713#","mranderson047.reagent.v0v7v0.reagent.impl.template/input-unmount","mranderson047.reagent.v0v7v0.reagent.impl.template/input-component?","G__24715","mranderson047.reagent.v0v7v0.reagent.impl.template/reagent-input-class","mranderson047.reagent.v0v7v0.reagent.impl.template/input-spec","argv","comp","first-child","mranderson047.reagent.v0v7v0.reagent.impl.component/*current-component*","mranderson047.reagent.v0v7v0.reagent.impl.template/make-element","mranderson047.reagent.v0v7v0.reagent.impl.template/reagent-input","mranderson047.reagent.v0v7v0.reagent.impl.component/create-class","mranderson047.reagent.v0v7v0.reagent.impl.template/parse-tag","hiccup-tag","vec__24717","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","tag","cljs.core/re-matches","cljs.core/next","clojure.string/replace","mranderson047.reagent.v0v7v0.reagent.impl.component/comp-name","mranderson047.reagent.v0v7v0.reagent.impl.template/try-get-key","e24720","cljs.core.get.cljs$core$IFn$_invoke$arity$2","mranderson047.reagent.v0v7v0.reagent.impl.template/get-key","mranderson047.reagent.v0v7v0.reagent.impl.template/key-from-vec","cljs.core/meta","mranderson047.reagent.v0v7v0.reagent.impl.template/reag-element","c","mranderson047.reagent.v0v7v0.reagent.impl.component/as-class","temp__5461__auto__","key","mranderson047.reagent.v0v7v0.reagent.impl.util/react","mranderson047.reagent.v0v7v0.reagent.impl.template/adapt-react-class","G__24723","mranderson047.reagent.v0v7v0.reagent.impl.template/tag-name-cache","mranderson047.reagent.v0v7v0.reagent.impl.template/cached-parse","s","mranderson047.reagent.v0v7v0.reagent.impl.template/native-element","parsed","first","hasprops","G__24724","cljs.core/with-meta","mranderson047.reagent.v0v7v0.reagent.impl.template/as-element","mranderson047.reagent.v0v7v0.reagent.impl.template/str-coll","coll","clojure.walk/prewalk","cljs.core/fn?","n","mranderson047.reagent.v0v7v0.reagent.impl.util/fun-name","G__24725","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","var_args","args__4500__auto__","len__4497__auto__","i__4498__auto__","argseq__4501__auto__","cljs.core/IndexedSeq","mranderson047.reagent.v0v7v0.reagent.impl.template/hiccup-err","seq24727","G__24728","cljs.core/first","msg","cljs.core/str","mranderson047.reagent.v0v7v0.reagent.impl.template/vec-to-elem","mranderson047.reagent.v0v7v0.reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic","pos","G__24732","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/vector?","cljs.core/seq?","mranderson047.reagent.v0v7v0.reagent.impl.template/expand-seq-check","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","mranderson047.reagent.v0v7v0.reagent.impl.component/as-element","mranderson047.reagent.v0v7v0.reagent.impl.template/expand-seq","a","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","n__4376__auto__","i","mranderson047.reagent.v0v7v0.reagent.impl.template/expand-seq-dev","val","vec__24743","ctx","res","derefed","mranderson047.reagent.v0v7v0.reagent.ratom/check-derefs","mranderson047/reagent.v0v7v0.reagent.debug.has-console","mranderson047/reagent.v0v7v0.reagent.debug.tracking","mranderson047/reagent.v0v7v0.reagent.debug.track-console","js/console","G__24746"],"sourcesContent":["(ns mranderson047.reagent.v0v7v0.reagent.impl.template\n  (:require [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [mranderson047.reagent.v0v7v0.reagent.impl.util :as util :refer [is-client]]\n            [mranderson047.reagent.v0v7v0.reagent.impl.component :as comp]\n            [mranderson047.reagent.v0v7v0.reagent.impl.batching :as batch]\n            [mranderson047.reagent.v0v7v0.reagent.ratom :as ratom]\n            [mranderson047.reagent.v0v7v0.reagent.interop :refer-macros [$ $!]]\n            [mranderson047.reagent.v0v7v0.reagent.debug :refer-macros [dbg prn println log dev?\n                                          warn warn-unless]]))\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [])\n\n\n;;; Common utilities\n\n(defn ^boolean named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n\n;;; Props conversion\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (aget o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (aset (cached-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn oset [o k v]\n  (doto (if (nil? o) #js{} o)\n    (aset k v)))\n\n(defn oget [o k]\n  (if (nil? o) nil (aget o k)))\n\n(defn set-id-class [p id-class]\n  (let [id ($ id-class :id)\n        p (if (and (some? id)\n                   (nil? (oget p \"id\")))\n            (oset p \"id\" id)\n            p)]\n    (if-some [class ($ id-class :className)]\n      (let [old (oget p \"className\")]\n        (oset p \"className\" (if (nil? old)\n                              class\n                              (str class \" \" old))))\n      p)))\n\n(defn convert-props [props id-class]\n  (-> props\n      convert-prop-value\n      (set-id-class id-class)))\n\n\n;;; Specialization for input components\n\n;; This gets set from mranderson047.reagent.v0v7v0.reagent.dom\n(defonce find-dom-node nil)\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(defn input-set-value [this]\n  (when ($ this :cljsInputLive)\n    ($! this :cljsInputDirty false)\n    (let [rendered-value ($ this :cljsRenderedValue)\n          dom-value ($ this :cljsDOMValue)\n          node (find-dom-node this)]\n      (when (not= rendered-value dom-value)\n        (if-not (and (identical? node ($ js/document :activeElement))\n                     (has-selection-api? ($ node :type))\n                     (string? rendered-value)\n                     (string? dom-value))\n          ;; just set the value, no need to worry about a cursor\n          (do\n            ($! this :cljsDOMValue rendered-value)\n            ($! node :value rendered-value))\n\n          ;; Setting \"value\" (below) moves the cursor position to the\n          ;; end which gives the user a jarring experience.\n          ;;\n          ;; But repositioning the cursor within the text, turns out to\n          ;; be quite a challenge because changes in the text can be\n          ;; triggered by various events like:\n          ;; - a validation function rejecting a user inputted char\n          ;; - the user enters a lower case char, but is transformed to\n          ;;   upper.\n          ;; - the user selects multiple chars and deletes text\n          ;; - the user pastes in multiple chars, and some of them are\n          ;;   rejected by a validator.\n          ;; - the user selects multiple chars and then types in a\n          ;;   single new char to repalce them all.\n          ;; Coming up with a sane cursor repositioning strategy hasn't\n          ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n          ;; and it appears to sanely handle all the cases we could\n          ;; think of.\n          ;; So this is just a warning. The code below is simple\n          ;; enough, but if you are tempted to change it, be aware of\n          ;; all the scenarios you have handle.\n          (let [node-value ($ node :value)]\n            (if (not= node-value dom-value)\n              ;; IE has not notified us of the change yet, so check again later\n              (batch/do-after-render #(input-set-value this))\n              (let [existing-offset-from-end (- (count node-value)\n                                                ($ node :selectionStart))\n                    new-cursor-offset        (- (count rendered-value)\n                                                existing-offset-from-end)]\n                ($! this :cljsDOMValue rendered-value)\n                ($! node :value rendered-value)\n                ($! node :selectionStart new-cursor-offset)\n                ($! node :selectionEnd new-cursor-offset)))))))))\n\n(defn input-handle-change [this on-change e]\n  ($! this :cljsDOMValue (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not ($ this :cljsInputDirty)\n    ($! this :cljsInputDirty true)\n    (batch/do-after-render #(input-set-value this)))\n  (on-change e))\n\n(defn input-render-setup [this jsprops]\n  ;; Don't rely on React for updating \"controlled inputs\", since it\n  ;; doesn't play well with async rendering (misses keystrokes).\n  (when (and (some? jsprops)\n             (.hasOwnProperty jsprops \"onChange\")\n             (.hasOwnProperty jsprops \"value\"))\n    (assert find-dom-node\n            \"reagent.dom needs to be loaded for controlled input to work\")\n    (let [v ($ jsprops :value)\n          value (if (nil? v) \"\" v)\n          on-change ($ jsprops :onChange)]\n      (when-not ($ this :cljsInputLive)\n        ;; set initial value\n        ($! this :cljsInputLive true)\n        ($! this :cljsDOMValue value))\n      ($! this :cljsRenderedValue value)\n      (js-delete jsprops \"value\")\n      (doto jsprops\n        ($! :defaultValue value)\n        ($! :onChange #(input-handle-change this on-change %))))))\n\n(defn input-unmount [this]\n  ($! this :cljsInputLive nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def reagent-input-class nil)\n\n(declare make-element)\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (make-element argv comp jsprops first-child)))})\n\n(defn reagent-input []\n  (when (nil? reagent-input-class)\n    (set! reagent-input-class (comp/create-class input-spec)))\n  reagent-input-class)\n\n\n;;; Conversion from Hiccup forms\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id class] (->> hiccup-tag name (re-matches re-tag) next)\n        class (when-not (nil? class)\n                (string/replace class #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\"\n                     (comp/comp-name)))\n    #js{:name tag\n        :id id\n        :className class}))\n\n(defn try-get-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn key-from-vec [v]\n  (if-some [k (-> (meta v) get-key)]\n    k\n    (-> v (nth 1 nil) get-key)))\n\n(defn reag-element [tag v]\n  (let [c (comp/as-class tag)\n        jsprops #js{:argv v}]\n    (when-some [key (key-from-vec v)]\n      ($! jsprops :key key))\n    ($ util/react createElement c jsprops)))\n\n(defn adapt-react-class [c]\n  (doto (->NativeWrapper)\n    ($! :name c)\n    ($! :id nil)\n    ($! :class nil)))\n\n(def tag-name-cache #js{})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (aset tag-name-cache x (parse-tag x))))\n\n(declare as-element)\n\n(defn native-element [parsed argv first]\n  (let [comp ($ parsed :name)]\n    (let [props (nth argv first nil)\n          hasprops (or (nil? props) (map? props))\n          jsprops (convert-props (if hasprops props) parsed)\n          first-child (+ first (if hasprops 1 0))]\n      (if (input-component? comp)\n        (-> [(reagent-input) argv comp jsprops first-child]\n            (with-meta (meta argv))\n            as-element)\n        (let [key (-> (meta argv) get-key)\n              p (if (nil? key)\n                  jsprops\n                  (oset jsprops \"key\" key))]\n          (make-element argv comp p first-child))))))\n\n(defn str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (util/fun-name x)]\n                        (case n \"\" x (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" (comp/comp-name)))\n\n(defn vec-to-elem [v]\n  (assert (pos? (count v)) (hiccup-err v \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (hiccup-err v \"Invalid Hiccup form\"))\n    (cond\n      (hiccup-tag? tag)\n      (let [n (name tag)\n            pos (.indexOf n \">\")]\n        (case pos\n          -1 (native-element (cached-parse n) v 1)\n          0 (let [comp (nth v 1 nil)]\n              ;; Support [:> comp ...]\n              (assert (= \">\" n) (hiccup-err v \"Invalid Hiccup tag\"))\n              (assert (or (string? comp) (fn? comp))\n                      (hiccup-err v \"Expected React component in\"))\n              (native-element #js{:name comp} v 2))\n          ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n          (recur [(subs n 0 pos)\n                  (assoc v 0 (subs n (inc pos)))])))\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1)\n\n      :else (reag-element tag v))))\n\n(declare expand-seq)\n(declare expand-seq-check)\n\n(defn as-element [x]\n  (cond (js-val? x) x\n        (vector? x) (vec-to-elem x)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x)\n                   (expand-seq x))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(set! comp/as-element as-element)\n\n(defn expand-seq [s]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (aset a i (as-element (aget a i))))\n    a))\n\n(defn expand-seq-dev [s o]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (let [val (aget a i)]\n        (when (and (vector? val)\n                   (nil? (key-from-vec val)))\n          ($! o :no-key true))\n        (aset a i (as-element val))))\n    a))\n\n(defn expand-seq-check [x]\n  (let [ctx #js{}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx))]\n    (when derefed\n      (warn (hiccup-err x \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when ($ ctx :no-key)\n      (warn (hiccup-err x \"Every element in a seq should have a unique :key\")))\n    res))\n\n;; From https://github.com/babel/babel/commit/1d0e68f5a19d721fe8799b1ea331041d8bf9120e\n;; (def react-element-type (or (and (exists? js/Symbol)\n;;                                  ($ js/Symbol :for)\n;;                                  ($ js/Symbol for \"react.element\"))\n;;                             60103))\n\n;; (defn make-element-fast [argv comp jsprops first-child]\n;;   (let [key (some-> jsprops ($ :key))\n;;         ref (some-> jsprops ($ :ref))\n;;         props (if (nil? jsprops) (js-obj) jsprops)]\n;;     ($! props :children\n;;         (case (- (count argv) first-child)\n;;           0 nil\n;;           1 (as-element (nth argv first-child))\n;;           (reduce-kv (fn [a k v]\n;;                        (when (>= k first-child)\n;;                          (.push a (as-element v)))\n;;                        a)\n;;                      #js[] argv)))\n;;     (js-obj \"key\" key\n;;             \"ref\" ref\n;;             \"props\" props\n;;             \"$$typeof\" react-element-type\n;;             \"type\" comp\n;;             ;; \"_store\" (js-obj)\n;;             )))\n\n(defn make-element [argv comp jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 ($ util/react createElement comp jsprops)\n\n    1 ($ util/react createElement comp jsprops\n          (as-element (nth argv first-child nil)))\n\n    (.apply ($ util/react :createElement) nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js[comp jsprops] argv))))\n"]}