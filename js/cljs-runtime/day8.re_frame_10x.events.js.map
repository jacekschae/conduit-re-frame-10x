{"version":3,"file":"day8.re_frame_10x.events.js","sources":["day8/re_frame_10x/events.cljs"],"mappings":"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","names":["day8.re-frame-10x.events/fixed-after","f","G__27854","G__27855","G__27856","G__27857","mranderson047.re-frame.v0v10v2.re-frame.core/->interceptor","context","db","cljs.core/contains?","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","event","day8.re-frame-10x.events/log-trace?","trace","render-operation?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","component-path","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","clojure.string/includes?","day8.re-frame-10x.events/disable-tracing!","re-frame.trace/remove-trace-cb","day8.re-frame-10x.events/enable-tracing!","p1__27863#","re-frame.trace/register-trace-cb","G__27864","mranderson047.re-frame.v0v10v2.re-frame.core/dispatch","p__27865","vec__27866","seq__27867","cljs.core/seq","first__27868","cljs.core/first","cljs.core/next","day8.re-frame-10x.events/dissoc-in","m","k","ks","keys","temp__5455__auto__","nextmap","cljs.core.get.cljs$core$IFn$_invoke$arity$2","newmap","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.events/read-string-maybe","s","e27873","cljs.tools.reader.edn.read_string.cljs$core$IFn$_invoke$arity$1","e","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__27874","vec__27875","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","width%","day8.re-frame-10x.utils.localstorage/save!","x__4006__auto__","y__4007__auto__","cljs.core/assoc-in","p__27883","vec__27884","selected-tab","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/not","p__27899","vec__27900","show-panel?","day8.re-frame-10x.utils.localstorage/delete-all-keys!","js/location.reload","now-showing?","external-panel?","using-trace?","or__3922__auto__","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__27906","map__27907","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","p__27909","vec__27910","num-str","num","js/parseInt","js/isNaN","cljs.core/pos-int?","day8.re-frame-10x.events/ignored-event-mw","G__27915","mranderson047.re-frame.v0v10v2.re-frame.core/path","p1__27914#","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","ignored-events","id","cljs.core/random-uuid","js/Date.now","p__27921","vec__27923","p__27931","vec__27932","event-str","old-event","p__27939","vec__27940","day8.re-frame-10x.events/filtered-view-trace-mw","G__27948","p1__27947#","filtered-view-trace","p__27949","vec__27950","p__27953","vec__27954","ns-str","p__27957","vec__27958","day8.re-frame-10x.events/low-level-trace-mw","G__27962","p1__27961#","p__27964","vec__27965","low-level","p__27968","vec__27969","trace-type","capture?","p__27972","vec__27973","debug?","G__27979","p1__27978#","p__27980","vec__27981","follows-events?","day8.re-frame-10x.events/mount","popup-window","popup-document","app","doc","js/document","day8.re-frame-10x.styles/inject-trace-styles","G__27989","G__27990","G__27991","goog.object/set","G__27992","mranderson047.reagent.v0v7v0.reagent.core.render.cljs$core$IFn$_invoke$arity$2","mranderson047.reagent.v0v7v0.reagent.core/create-class","day8.re-frame-10x.view.container/devtools-inner","day8.re-frame-10x.events/open-debugger-window","map__28001","ext_height","ext_width","w","js/window.open","d","G__28003","G__28004","G__28005","ctx","js/window.addEventListener","G__28020","mranderson047.re-frame.v0v10v2.re-frame.core/dispatch-sync","p__28021","vec__28022","unloading?","day8.re-frame-10x.events/save-filter-items","filter-items","p__28035","vec__28036","G__28042","p__28043","vec__28044","filter-input","filter-type","new-db","p1__28039#","cljs.core/some","and__3911__auto__","p1__28040#","p1__28041#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.string/lower-case","js/parseFloat","G__28058","p__28063","vec__28064","filter-id","p1__28056#","G__28069","trace-detail-expansions","cljs.core.update.cljs$core$IFn$_invoke$arity$3","G__28077","p__28078","vec__28080","expansions","showing?","p1__28076#","G__28084","p__28085","vec__28087","categories","new-categories","clojure.set/superset?","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","clojure.set.union.cljs$core$IFn$_invoke$arity$2","G__28105","p__28106","vec__28107","G__28114","p1__28111#","p__28120","vec__28121","show-epoch-traces?","day8.re-frame-10x.events/app-db-path-mw","G__28126","p1__28125#","paths","p__28133","vec__28134","path-id","path-str","path","cljs.core/sequential?","clojure.string/blank?","p__28144","vec__28145","map__28148","valid-path?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","p__28152","vec__28155","open?","p__28173","vec__28175","diff?","p__28178","vec__28179","p__28190","vec__28191","p__28196","vec__28197","search-string","G__28203","p__28204","vec__28205","G__28208","p__28209","vec__28210","new-paths","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","G__28223","re-frame.interop/reagent-id","re-frame.db/app-db","p__28226","vec__28227","cljs.core/reset!","p__28241","vec__28242","new-id","epochs","match-id","day8.re-frame-10x.utils.utils/last-in-vec","match","day8.re-frame-10x.metamorphic/matched-event","temp__5461__auto__","day8.re-frame-10x.events/first-match-id","p__28273","vec__28274","new-traces","filtered-traces","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","map__28277","number-of-epochs-to-retain","events-to-ignore","cljs.core/vals","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/set","previous-traces","parse-state","day8.re-frame-10x.metamorphic/initial-parse-state","drop-re-frame","drop-reagent","all-traces","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","day8.re-frame-10x.metamorphic/parse-traces","new-matches","previous-matches","subscription-info","day8.re-frame-10x.metamorphic/subscription-info","sub-state","day8.re-frame-10x.metamorphic/initial-sub-state","subscription-match-state","day8.re-frame-10x.metamorphic/subscription-match-state","subscription-matches","cljs.core/rest","new-sub-state","cljs.core/last","timing","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","epoch-traces","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.utils.utils/id-between-xf","start-of-epoch","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","event-handler-trace","day8.re-frame-10x.metamorphic/event-handler?","dofx-trace","day8.re-frame-10x.metamorphic/event-dofx?","event-trace","day8.re-frame-10x.metamorphic/event-run?","finish-run","day8.re-frame-10x.metamorphic/finish-run?","day8.re-frame-10x.metamorphic/elapsed-time","cljs.core.map.cljs$core$IFn$_invoke$arity$4","sub-match","t","all-matches","retained-matches","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/take-last","first-id-to-retain","retained-traces","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","p1__28271#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.metamorphic/low-level-reagent-trace?","day8.re-frame-10x.metamorphic/low-level-re-frame-trace?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","G__28320","p__28321","map__28322","temp__5459__auto__","current-id","match-ids","match-array-index","day8.re-frame-10x.utils.utils/find-index-in-vec","x","cljs.core/count","G__28331","p__28332","map__28333","re-frame.trace/reset-tracing!","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__28342","p__28343","vec__28344","ignore?","G__28355","p__28356","vec__28357","G__28360","p__28361","vec__28362"],"sourcesContent":["(ns day8.re-frame-10x.events\n  (:require [mranderson047.re-frame.v0v10v2.re-frame.core :as rf]\n            [mranderson047.reagent.v0v7v0.reagent.core :as r]\n            [cljs.tools.reader.edn]\n            [day8.re-frame-10x.utils.utils :as utils :refer [spy]]\n            [day8.re-frame-10x.utils.localstorage :as localstorage]\n            [clojure.string :as str]\n            [goog.object]\n            [re-frame.db]\n            [re-frame.interop]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.styles :as styles]\n            [clojure.set :as set]\n            [day8.re-frame-10x.metamorphic :as metam]\n            [re-frame.trace]))\n\n(defn fixed-after\n  ;; Waiting on https://github.com/Day8/re-frame/issues/447\n  [f]\n  (rf/->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (:effects context) :db)\n                           (get-in context [:effects :db])\n                           (get-in context [:coeffects :db]))\n                   event (get-in context [:coeffects :event])]\n               (f db event)                                 ;; call f for side effects\n               context))))                                  ;; context is unchanged\n\n(defn log-trace? [trace]\n  (let [render-operation? (or (= (:op-type trace) :render)\n                              (= (:op-type trace) :componentWillUnmount))\n        component-path    (get-in trace [:tags :component-path] \"\")]\n    (if-not render-operation?\n      true\n      (not (str/includes? component-path \"devtools outer\")))))\n\n(defn disable-tracing! []\n  (re-frame.trace/remove-trace-cb ::cb))\n\n(defn enable-tracing! []\n  (re-frame.trace/register-trace-cb ::cb #(rf/dispatch [:epochs/receive-new-traces %])))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\"\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (clojure.core/get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn read-string-maybe [s]\n  (try (cljs.tools.reader.edn/read-string s)\n       (catch :default e\n         nil)))\n\n(rf/reg-event-db\n  :settings/panel-width%\n  (fn [db [_ width%]]\n    (localstorage/save! \"panel-width-ratio\" (max width% 0.05))\n    (assoc-in db [:settings :panel-width%] (max width% 0.05))))\n\n(rf/reg-event-db\n  :settings/selected-tab\n  (fn [db [_ selected-tab]]\n    (localstorage/save! \"selected-tab\" selected-tab)\n    (assoc-in db [:settings :selected-tab] selected-tab)))\n\n(rf/reg-event-db\n  :settings/toggle-settings\n  (fn [db _]\n    (update-in db [:settings :showing-settings?] not)))\n\n(rf/reg-event-db\n  :settings/show-panel?\n  (fn [db [_ show-panel?]]\n    (localstorage/save! \"show-panel\" show-panel?)\n    (assoc-in db [:settings :show-panel?] show-panel?)))\n\n(rf/reg-event-db\n  :settings/factory-reset\n  (fn [db _]\n    (localstorage/delete-all-keys!)\n    (js/location.reload)\n    db))\n\n(rf/reg-event-db\n  :settings/user-toggle-panel\n  (fn [db _]\n    (let [now-showing?    (not (get-in db [:settings :show-panel?]))\n          external-panel? (get-in db [:settings :external-window?])\n          using-trace?    (or external-panel? now-showing?)]\n      (if now-showing?\n        (enable-tracing!)\n        (when-not external-panel?\n          (disable-tracing!)))\n      (localstorage/save! \"using-trace?\" using-trace?)\n      (localstorage/save! \"show-panel\" now-showing?)\n      (-> db\n          (assoc-in [:settings :using-trace?] using-trace?)\n          (assoc-in [:settings :show-panel?] now-showing?)))))\n\n(rf/reg-event-db\n  :settings/pause\n  (fn [db _]\n    (assoc-in db [:settings :paused?] true)))\n\n(rf/reg-event-fx\n  :settings/play\n  (fn [{db :db} _]\n    {:db       (-> db\n                   (assoc-in [:settings :paused?] false)\n                   (assoc-in [:epochs :current-epoch-index] nil)\n                   (assoc-in [:epochs :current-epoch-id] nil))\n     :dispatch [:snapshot/reset-current-epoch-app-db nil]}))\n\n(rf/reg-event-db\n  :settings/set-number-of-retained-epochs\n  (fn [db [_ num-str]]\n    ;; TODO: this is not perfect, there is an issue in re-com\n    ;; where it won't update its model if it never receives another\n    ;; changes after it's on-change is fired.\n    ;; TODO: you could reset the stored epochs on change here\n    ;; once the way they are processed is refactored.\n    (let [num (js/parseInt num-str)\n          num (if (and (not (js/isNaN num)) (pos-int? num))\n                num\n                5)]\n      (localstorage/save! \"retained-epochs\" num)\n      (assoc-in db [:settings :number-of-epochs] num))))\n\n(def ignored-event-mw\n  [(rf/path [:settings :ignored-events]) (fixed-after #(localstorage/save! \"ignored-events\" %))])\n\n(rf/reg-event-db\n  :settings/add-ignored-event\n  ignored-event-mw\n  (fn [ignored-events _]\n    (let [id (random-uuid)]\n      (assoc ignored-events id {:id id :event-str \"\" :event-id nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id]]\n    (dissoc ignored-events id)))\n\n(rf/reg-event-db\n  :settings/update-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id event-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe event-str)]\n      (-> ignored-events\n          (assoc-in [id :event-str] event-str)\n          (update-in [id :event-id] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-ignored-events\n  ignored-event-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def filtered-view-trace-mw\n  [(rf/path [:settings :filtered-view-trace]) (fixed-after #(localstorage/save! \"filtered-view-trace\" %))])\n\n(rf/reg-event-db\n  :settings/add-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace _]\n    (let [id (random-uuid)]\n      (assoc filtered-view-trace id {:id id :ns-str \"\" :ns nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id]]\n    (dissoc filtered-view-trace id)))\n\n(rf/reg-event-db\n  :settings/update-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id ns-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe ns-str)]\n      (-> filtered-view-trace\n          (assoc-in [id :ns-str] ns-str)\n          (update-in [id :ns] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def low-level-trace-mw [(rf/path [:settings :low-level-trace]) (fixed-after #(localstorage/save! \"low-level-trace\" %))])\n\n(rf/reg-event-db\n  :settings/set-low-level-trace\n  low-level-trace-mw\n  (fn [_ [_ low-level]]\n    low-level))\n\n(rf/reg-event-db\n  :settings/low-level-trace\n  low-level-trace-mw\n  (fn [low-level [_ trace-type capture?]]\n    (assoc low-level trace-type capture?)))\n\n(rf/reg-event-db\n  :settings/debug?\n  (fn [db [_ debug?]]\n    (assoc-in db [:settings :debug?] debug?)))\n\n(rf/reg-event-db\n  :settings/app-db-follows-events?\n  [(rf/path [:settings :app-db-follows-events?]) (fixed-after #(localstorage/save! \"app-db-follows-events?\" %))]\n  (fn [db [_ follows-events?]]\n    follows-events?))\n\n;; Global\n\n(defn mount [popup-window popup-document]\n  (let [app (.getElementById popup-document \"--re-frame-10x--\")\n        doc js/document]\n    (styles/inject-trace-styles popup-document)\n    (goog.object/set popup-window \"onunload\" #(rf/dispatch [:global/external-closed]))\n    (r/render\n      [(r/create-class\n         {:display-name   \"devtools outer external\"\n          :reagent-render (fn []\n                            [container/devtools-inner {:panel-type :popup}])})]\n      app)))\n\n(defn open-debugger-window\n  \"Copied from re-frisk.devtool/open-debugger-window\"\n  []\n  (let [{:keys [ext_height ext_width]} (:prefs {})\n        w (js/window.open \"\" \"Debugger\" (str \"width=\" (or ext_width 800) \",height=\" (or ext_height 800)\n                                             \",resizable=yes,scrollbars=yes,status=no,directories=no,toolbar=no,menubar=no\"))\n\n        d (.-document w)]\n    (.open d)\n    (.write d \"<head></head><body style=\\\"margin: 0px;\\\"><div id=\\\"--re-frame-10x--\\\" class=\\\"external-window\\\"></div></body>\")\n    (goog.object/set w \"onload\" #(mount w d))\n    (.close d)))\n\n(rf/reg-event-fx\n  :global/launch-external\n  (fn [ctx _]\n    (open-debugger-window)\n    (localstorage/save! \"external-window?\" true)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] true)\n     ;; TODO: capture the intent that the user is still interacting with devtools, to persist between reloads.\n     :dispatch-later [{:ms 200 :dispatch [:settings/show-panel? false]}]}))\n\n(rf/reg-event-fx\n  :global/external-closed\n  (fn [ctx _]\n    (localstorage/save! \"external-window?\" false)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] false)\n     :dispatch-later [{:ms 400 :dispatch [:settings/show-panel? true]}]}))\n\n(rf/reg-event-fx\n  :global/enable-tracing\n  (fn [ctx _]\n    (enable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/disable-tracing\n  (fn [ctx _]\n    (disable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/add-unload-hook\n  (fn [_ _]\n    (js/window.addEventListener \"beforeunload\" #(rf/dispatch-sync [:global/unloading? true]))\n    nil))\n\n(rf/reg-event-db\n  :global/unloading?\n  (fn [db [_ unloading?]]\n    (assoc-in db [:global :unloading?] unloading?)))\n\n;; Traces\n\n(defn save-filter-items [filter-items]\n  (localstorage/save! \"filter-items\" filter-items))\n\n(rf/reg-event-db\n  :traces/filter-items\n  (fn [db [_ filter-items]]\n    (save-filter-items filter-items)\n    (assoc-in db [:traces :filter-items] filter-items)))\n\n(rf/reg-event-db\n  :traces/add-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-input filter-type]]\n    (let [new-db (when-not (some #(= filter-input (:query %)) filter-items) ;; prevent duplicate filter strings\n                   ;; if existing, remove prior filter for :slower-than\n                   ;; TODO: rework how time filters are used.\n                   (let [filter-items (if (and (= :slower-than filter-type)\n                                               (some #(= filter-type (:filter-type %)) filter-items))\n                                        (remove #(= :slower-than (:filter-type %)) filter-items)\n                                        filter-items)]\n                     ;; add new filter\n                     (conj filter-items {:id          (random-uuid)\n                                         :query       (if (= filter-type :contains)\n                                                        (str/lower-case filter-input)\n                                                        (js/parseFloat filter-input))\n                                         :filter-type filter-type})))]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/remove-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-id]]\n    (let [new-db (remove #(= (:id %) filter-id) filter-items)]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/reset-filter-items\n  (fn [db _]\n    (let [new-db (dissoc-in db [:traces :filter-items])]\n      (save-filter-items (get-in new-db [:traces :filter-items]))\n      new-db)))\n\n(rf/reg-event-db\n  :traces/toggle-all-expansions\n  [(rf/path [:traces :expansions])]\n  (fn [trace-detail-expansions _]\n    (-> trace-detail-expansions\n        (assoc :overrides {})\n        (update :show-all? not))))\n\n(rf/reg-event-db\n  :traces/toggle-trace\n  [(rf/path [:traces :expansions])]\n  (fn [expansions [_ id]]\n    (let [showing? (get-in expansions [:overrides id] (:show-all? expansions))]\n      (update-in expansions [:overrides id] #(if showing? false (not %))))))\n\n(rf/reg-event-db\n  :traces/toggle-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    (let [new-categories (if (set/superset? categories new-categories)\n                           (set/difference categories new-categories)\n                           (set/union categories new-categories))]\n      (localstorage/save! \"categories\" new-categories)\n      new-categories)))\n\n(rf/reg-event-db\n  :traces/set-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    new-categories))\n\n\n(rf/reg-event-db\n  :trace-panel/update-show-epoch-traces?\n  [(rf/path [:trace-panel :show-epoch-traces?]) (fixed-after #(localstorage/save! \"show-epoch-traces?\" %))]\n  (fn [_ [k show-epoch-traces?]]\n    show-epoch-traces?))\n\n;; App DB\n\n(def app-db-path-mw\n  [(rf/path [:app-db :paths]) (fixed-after #(localstorage/save! \"app-db-paths\" %))])\n\n(rf/reg-event-db\n  :app-db/create-path\n  app-db-path-mw\n  (fn [paths _]\n\n    (assoc paths (js/Date.now) {:diff? false :open? true :path nil :path-str \"\" :valid-path? true})))\n\n\n\n;; The core idea with :app-db/update-path and :app-db/update-path-blur\n;; is that we need to separate the users text input (`path-str`) with the\n;; parsing of that string (`path`). We let the user type any string that\n;; they like, and check it for validity on each change. If it is valid\n;; then we update `path` and mark the pod as valid. If it isn't valid then\n;; we don't update `path` and mark the pod as invalid.\n;;\n;; On blur of the input, we reset path-str to the last valid path, if\n;; the pod isn't currently valid.\n\n(rf/reg-event-db\n  :app-db/update-path\n  app-db-path-mw\n  (fn [paths [_ path-id path-str]]\n    (let [path  (read-string-maybe path-str)\n          paths (assoc-in paths [path-id :path-str] path-str)]\n      (if (or (and (some? path)\n                   (sequential? path))\n              (str/blank? path-str))\n        (-> paths\n            (assoc-in [path-id :path] path)\n            (assoc-in [path-id :valid-path?] true))\n        (assoc-in paths [path-id :valid-path?] false)))))\n\n(rf/reg-event-db\n  :app-db/update-path-blur\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (let [{:keys [valid-path? path]} (get paths path-id)]\n      (if valid-path?\n        paths\n        (-> (assoc-in paths [path-id :path-str] (pr-str path))\n            (assoc-in [path-id :valid-path?] true))))))\n\n(rf/reg-event-db\n  :app-db/set-path-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id open?]]\n    (assoc-in paths [path-id :open?] open?)))\n\n(rf/reg-event-db\n  :app-db/set-diff-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in paths [path-id :open?]))]\n      (-> paths\n          (assoc-in [path-id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [path-id :open?] open?)))))\n\n(rf/reg-event-db\n  :app-db/remove-path\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (dissoc paths path-id)))\n\n(rf/reg-event-db\n  :app-db/paths\n  app-db-path-mw\n  (fn [db [_ paths]]\n    paths))\n\n#_(rf/reg-event-db\n    :app-db/remove-path\n    (fn [db [_ path]]\n      (let [new-db (update-in db [:app-db :paths] #(remove (fn [p] (= p path)) %))]\n        (localstorage/save! \"app-db-paths\" (get-in new-db [:app-db :paths]))\n        ;; TODO: remove from json-ml expansions too.\n        new-db)))\n\n#_(rf/reg-event-db\n    :app-db/add-path\n    (fn [db _]\n      (let [search-string (get-in db [:app-db :search-string])\n            path          (try\n                            (when-not (str/blank? search-string)\n                              (cljs.reader/read-string (str \"[\" search-string \"]\")))\n                            (catch :default e\n                              nil))]\n        (if (some? path)\n          (do (localstorage/save! \"app-db-paths\" (cons path (get-in db [:app-db :paths])))\n              (rf/dispatch [:app-db/toggle-expansion [path]])\n              (-> db\n                  (update-in [:app-db :paths] #(cons path %))\n                  (assoc-in [:app-db :search-string] \"\")))\n          db))))\n\n(rf/reg-event-db\n  :app-db/search-string\n  (fn [db [_ search-string]]\n    (assoc-in db [:app-db :search-string] search-string)))\n\n(rf/reg-event-db\n  :app-db/set-json-ml-paths\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [db [_ paths]]\n    (localstorage/save! \"app-db-json-ml-expansions\" paths)\n    paths))\n\n(rf/reg-event-db\n  :app-db/toggle-expansion\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [paths [_ path]]\n    (let [new-paths (if (contains? paths path)\n                      (disj paths path)\n                      (conj paths path))]\n      (localstorage/save! \"app-db-json-ml-expansions\" new-paths)\n      new-paths)))\n\n(rf/reg-event-db\n  :app-db/reagent-id\n  [(rf/path [:app-db :reagent-id])]\n  (fn [paths _]\n    (re-frame.interop/reagent-id re-frame.db/app-db)))\n\n(rf/reg-event-db\n  :snapshot/load-snapshot\n  (fn [db [_ new-db]]\n    (reset! re-frame.db/app-db new-db)\n    db))\n\n(rf/reg-event-db\n  :snapshot/reset-current-epoch-app-db\n  (fn [db [_ new-id]]\n    (let [follows-events? (get-in db [:settings :app-db-follows-events?])\n          epochs          (:epochs db)\n          match-id        (or new-id\n                              ;; new-id may be nil when we call this event from :settings/play\n                              (utils/last-in-vec (get epochs :match-ids)))\n          match           (get-in epochs [:matches-by-id match-id])\n          event           (metam/matched-event (:match-info match))]\n      (when follows-events?\n        ;; Don't mess up the users app if there is a problem getting app-db-after.\n        (when-some [new-db (get-in event [:tags :app-db-after])]\n          (reset! re-frame.db/app-db new-db))))\n    db))\n\n;;;\n\n(defn first-match-id\n  [m]\n  (-> m :match-info first :id))\n\n(rf/reg-event-db\n  :epochs/receive-new-traces\n  (fn [db [_ new-traces]]\n    (if-let [filtered-traces (->> (filter log-trace? new-traces)\n                                  (sort-by :id))]\n      (let [number-of-epochs-to-retain (get-in db [:settings :number-of-epochs])\n            events-to-ignore           (->> (get-in db [:settings :ignored-events]) vals (map :event-id) set)\n            previous-traces            (get-in db [:traces :all-traces] [])\n            parse-state                (get-in db [:epochs :parse-state] metam/initial-parse-state)\n            {drop-re-frame :re-frame drop-reagent :reagent} (get-in db [:settings :low-level-trace])\n            all-traces                 (reduce conj previous-traces filtered-traces)\n            parse-state                (metam/parse-traces parse-state filtered-traces)\n            ;; TODO:!!!!!!!!!!!!! We should be parsing everything else with the traces that span the newly matched\n            ;; epochs, not the filtered-traces, as these are only partial.\n            new-matches                (:partitions parse-state)\n            previous-matches           (get-in db [:epochs :matches] [])\n            parse-state                (assoc parse-state :partitions []) ;; Remove matches we know about\n            new-matches                (remove (fn [match]\n                                                 (let [event (get-in (metam/matched-event match) [:tags :event])]\n                                                   (contains? events-to-ignore (first event)))) new-matches)\n            ;; subscription-info is calculated separately from subscription-match-state because they serve different purposes:\n            ;; - subscription-info collects all the data that we know about the subscription itself, like its layer, inputs and other\n            ;;   things that are defined as part of the reg-sub.\n            ;; - subscription-match-state collects all the data that we know about the state of specific instances of subscriptions\n            ;;   like its reagent id, when it was created, run, disposed, what values it returned, e.t.c.\n            subscription-info          (metam/subscription-info (get-in db [:epochs :subscription-info] {}) filtered-traces (get-in db [:app-db :reagent-id]))\n            sub-state                  (get-in db [:epochs :sub-state] metam/initial-sub-state)\n            subscription-match-state   (metam/subscription-match-state sub-state all-traces new-matches)\n            subscription-matches       (rest subscription-match-state)\n\n            new-sub-state              (last subscription-match-state)\n            timing                     (mapv (fn [match]\n                                               (let [epoch-traces        (into []\n                                                                               (comp\n                                                                                 (utils/id-between-xf (:id (first match)) (:id (last match))))\n                                                                               all-traces)\n                                                     ;; TODO: handle case when there are no epoch-traces\n                                                     start-of-epoch      (nth epoch-traces 0)\n                                                     ;; TODO: optimise trace searching\n                                                     event-handler-trace (first (filter metam/event-handler? epoch-traces))\n                                                     dofx-trace          (first (filter metam/event-dofx? epoch-traces))\n                                                     event-trace         (first (filter metam/event-run? epoch-traces))\n                                                     finish-run          (or (first (filter metam/finish-run? epoch-traces))\n                                                                             (utils/last-in-vec epoch-traces))]\n                                                 {:re-frame/event-run-time     (metam/elapsed-time start-of-epoch finish-run)\n                                                  :re-frame/event-time         (:duration event-trace)\n                                                  :re-frame/event-handler-time (:duration event-handler-trace)\n                                                  :re-frame/event-dofx-time    (:duration dofx-trace)}))\n                                             new-matches)\n\n            new-matches                (map (fn [match sub-match t] {:match-info match\n                                                                     :sub-state  sub-match\n                                                                     :timing     t})\n                                            new-matches subscription-matches timing)\n            all-matches                (reduce conj previous-matches new-matches)\n            retained-matches           (into [] (take-last number-of-epochs-to-retain all-matches))\n            first-id-to-retain         (first-match-id (first retained-matches))\n            retained-traces            (into [] (comp (drop-while #(< (:id %) first-id-to-retain))\n                                                      (remove (fn [trace]\n                                                                (or (when drop-reagent (metam/low-level-reagent-trace? trace))\n                                                                    (when drop-re-frame (metam/low-level-re-frame-trace? trace)))))) all-traces)]\n        (-> db\n            (assoc-in [:traces :all-traces] retained-traces)\n            (update :epochs (fn [epochs]\n                              (assoc epochs\n                                :matches retained-matches\n                                :matches-by-id (into {} (map (juxt first-match-id identity)) retained-matches)\n                                :match-ids (mapv first-match-id retained-matches)\n                                :parse-state parse-state\n                                :sub-state new-sub-state\n                                :subscription-info subscription-info)))))\n      ;; Else\n      db)))\n\n(rf/reg-event-fx\n  :epochs/previous-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (dec match-array-index))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch-n [[:settings/pause] [:snapshot/reset-current-epoch-app-db new-id]]})\n      (let [new-id (nth (:match-ids db)\n                        (- (count (:match-ids db)) 2))]\n        {:db         (assoc db :current-epoch-id new-id )\n         :dispatch-n [[:settings/pause] [:snapshot/reset-current-epoch-app-db new-id]]}))))\n\n(rf/reg-event-fx\n  :epochs/next-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (inc match-array-index))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch-n [[:settings/pause] [:snapshot/reset-current-epoch-app-db new-id]]})\n      (let [new-id (last (:match-ids db))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch-n [[:settings/pause] [:snapshot/reset-current-epoch-app-db new-id]]}))))\n\n(rf/reg-event-db\n  :epochs/reset\n  (fn [db]\n    (re-frame.trace/reset-tracing!)\n    (dissoc db :epochs :traces)))\n\n;;\n\n(rf/reg-event-db\n  :subs/ignore-unchanged-l2-subs?\n  [(rf/path [:subs :ignore-unchanged-subs?])]\n  (fn [_ [_ ignore?]]\n    ignore?))\n\n(rf/reg-event-db\n  :subs/open-pod?\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id open?]]\n    (assoc-in expansions [id :open?] open?)))\n\n(rf/reg-event-db\n  :subs/diff-pod?\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id diff?]]\n    (assoc-in expansions [id :diff?] diff?)))\n"]}