{"version":3,"file":"mranderson047.reagent.v0v7v0.reagent.impl.batching.js","sources":["mranderson047/reagent/v0v7v0/reagent/impl/batching.cljs"],"mappings":"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","names":["mranderson047.reagent.v0v7v0.reagent.impl.batching/mount-count","mranderson047.reagent.v0v7v0.reagent.impl.batching/next-mount-count","mranderson047.reagent.v0v7v0.reagent.impl.batching/fake-raf","f","js/setTimeout","mranderson047.reagent.v0v7v0.reagent.impl.batching/next-tick","mranderson047.reagent.v0v7v0.reagent.impl.util/is-client","w","js/window","or__3922__auto__","mranderson047.reagent.v0v7v0.reagent.impl.batching/compare-mount-order","c1","c2","mranderson047.reagent.v0v7v0.reagent.impl.batching/run-queue","a","n__4376__auto__","i","c","mranderson047.reagent.v0v7v0.reagent.impl.batching/ratom-flush","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cljs.core/-write","mranderson047.reagent.v0v7v0.reagent.impl.batching/RenderQueue","mranderson047.reagent.v0v7v0.reagent.impl.batching/->RenderQueue","scheduled?","this","k","js/Error","temp__5461__auto__","fs","fexpr__24327","G__24328","cs","mranderson047.reagent.v0v7v0.reagent.impl.batching/render-queue","mranderson047.reagent.v0v7v0.reagent.impl.batching/flush","mranderson047.reagent.v0v7v0.reagent.impl.batching/flush-after-render","mranderson047.reagent.v0v7v0.reagent.impl.batching/queue-render","mranderson047.reagent.v0v7v0.reagent.impl.batching/mark-rendered","mranderson047.reagent.v0v7v0.reagent.impl.batching/do-before-flush","mranderson047.reagent.v0v7v0.reagent.impl.batching/do-after-render","mranderson047.reagent.v0v7v0.reagent.impl.batching/schedule"],"sourcesContent":["(ns mranderson047.reagent.v0v7v0.reagent.impl.batching\n  (:refer-clojure :exclude [flush])\n  (:require [mranderson047.reagent.v0v7v0.reagent.debug :refer-macros [dbg assert-some]]\n            [mranderson047.reagent.v0v7v0.reagent.interop :refer-macros [$ $!]]\n            [mranderson047.reagent.v0v7v0.reagent.impl.util :refer [is-client]]\n            [clojure.string :as string]))\n\n;;; Update batching\n\n(defonce mount-count 0)\n\n(defn next-mount-count []\n  (set! mount-count (inc mount-count)))\n\n(defn fake-raf [f]\n  (js/setTimeout f 16))\n\n(def next-tick\n  (if-not is-client\n    fake-raf\n    (let [w js/window]\n      (or ($ w :requestAnimationFrame)\n          ($ w :webkitRequestAnimationFrame)\n          ($ w :mozRequestAnimationFrame)\n          ($ w :msRequestAnimationFrame)\n          fake-raf))))\n\n(defn compare-mount-order [c1 c2]\n  (- ($ c1 :cljsMountOrder)\n     ($ c2 :cljsMountOrder)))\n\n(defn run-queue [a]\n  ;; sort components by mount order, to make sure parents\n  ;; are rendered before children\n  (.sort a compare-mount-order)\n  (dotimes [i (alength a)]\n    (let [c (aget a i)]\n      (when (true? ($ c :cljsIsDirty))\n        ($ c forceUpdate)))))\n\n\n;; Set from ratom.cljs\n(defonce ratom-flush (fn []))\n\n(deftype RenderQueue [^:mutable ^boolean scheduled?]\n  Object\n  (enqueue [this k f]\n    (assert-some f \"Enqueued function\")\n    (when (nil? (aget this k))\n      (aset this k (array)))\n    (.push (aget this k) f)\n    (.schedule this))\n\n  (run-funs [this k]\n    (when-some [fs (aget this k)]\n      (aset this k nil)\n      (dotimes [i (alength fs)]\n        ((aget fs i)))))\n\n  (schedule [this]\n    (when-not scheduled?\n      (set! scheduled? true)\n      (next-tick #(.run-queues this))))\n\n  (queue-render [this c]\n    (.enqueue this \"componentQueue\" c))\n\n  (add-before-flush [this f]\n    (.enqueue this \"beforeFlush\" f))\n\n  (add-after-render [this f]\n    (.enqueue this \"afterRender\" f))\n\n  (run-queues [this]\n    (set! scheduled? false)\n    (.flush-queues this))\n\n  (flush-after-render [this]\n    (.run-funs this \"afterRender\"))\n\n  (flush-queues [this]\n    (.run-funs this \"beforeFlush\")\n    (ratom-flush)\n    (when-some [cs (aget this \"componentQueue\")]\n      (aset this \"componentQueue\" nil)\n      (run-queue cs))\n    (.flush-after-render this)))\n\n(defonce render-queue (->RenderQueue false))\n\n(defn flush []\n  (.flush-queues render-queue))\n\n(defn flush-after-render []\n  (.flush-after-render render-queue))\n\n(defn queue-render [c]\n  (when-not ($ c :cljsIsDirty)\n    ($! c :cljsIsDirty true)\n    (.queue-render render-queue c)))\n\n(defn mark-rendered [c]\n  ($! c :cljsIsDirty false))\n\n(defn do-before-flush [f]\n  (.add-before-flush render-queue f))\n\n(defn do-after-render [f]\n  (.add-after-render render-queue f))\n\n(defn schedule []\n  (when (false? (.-scheduled? render-queue))\n    (.schedule render-queue)))\n"]}