{"version":3,"file":"day8.re_frame_10x.subs.js","sources":["day8/re_frame_10x/subs.cljs"],"mappings":"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","names":["G__26618","G__26619","mranderson047.re-frame.v0v10v2.re-frame.core/reg-sub","db","_","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__26622","G__26623","G__26624","G__26625","settings","G__26630","G__26631","G__26632","G__26633","G__26638","G__26639","G__26640","G__26641","G__26646","G__26647","G__26648","G__26649","G__26654","G__26655","G__26656","G__26657","G__26662","G__26663","G__26664","G__26665","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/vals","G__26670","G__26671","G__26672","G__26673","G__26678","G__26679","G__26680","G__26681","G__26686","G__26687","G__26688","G__26689","G__26694","G__26695","G__26696","G__26697","G__26702","G__26703","G__26706","G__26707","G__26708","G__26709","trace","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__26714","G__26715","G__26716","G__26717","G__26723","G__26724","G__26725","G__26726","app-db-settings","p1__26722#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/val","cljs.core/key","G__26731","G__26732","G__26733","G__26734","G__26739","G__26740","G__26741","G__26742","G__26747","G__26748","G__26749","G__26750","p__26751","vec__26752","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","expansions","path","cljs.core/contains?","G__26759","G__26760","G__26761","G__26762","root","G__26767","G__26768","G__26771","G__26772","G__26775","G__26776","G__26779","G__26780","G__26783","G__26784","G__26787","G__26788","G__26789","G__26790","traces","G__26795","G__26796","G__26797","G__26798","cljs.core/count","G__26803","G__26804","G__26805","G__26806","G__26807","G__26808","G__26809","G__26810","p__26813","vec__26815","beginning","ending","cljs.core.into.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.utils.utils/id-between-xf","p__26841","vec__26842","day8.re-frame-10x.subs/filter-ignored-views","filtered-views","munged-ns","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/munge","cljs.core/set","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","and__3911__auto__","day8.re-frame-10x.metamorphic/render?","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2","G__26848","G__26849","G__26850","G__26851","G__26852","G__26853","G__26864","G__26865","G__26866","G__26867","G__26868","G__26869","G__26880","G__26881","G__26882","G__26883","trace-root","G__26893","G__26894","G__26899","G__26900","G__26903","G__26904","G__26905","G__26906","snapshot","G__26911","G__26912","G__26915","G__26916","G__26917","G__26918","G__26919","G__26920","p__26921","vec__26922","epochs","match-ids","current-id","match","cljs.core/last","cljs.core/first","G__26931","G__26932","G__26933","G__26934","match-state","G__26939","G__26940","G__26941","G__26942","day8.re-frame-10x.metamorphic/matched-event","G__26947","G__26948","G__26949","G__26950","G__26955","G__26956","G__26957","G__26958","G__26963","G__26964","G__26965","G__26966","G__26971","G__26972","G__26973","G__26974","G__26979","G__26980","G__26981","G__26982","G__26987","G__26988","G__26989","G__26990","G__26995","G__26996","G__26997","G__26998","G__27003","G__27004","G__27005","G__27006","G__27007","G__27008","p__27009","vec__27010","current","ids","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__27019","G__27020","G__27021","G__27022","G__27023","G__27024","p__27025","vec__27026","day8.re-frame-10x.utils.utils/last-in-vec","G__27035","G__27036","G__27037","G__27038","start-of-epoch","end-of-epoch","day8.re-frame-10x.metamorphic/elapsed-time","G__27044","G__27045","G__27046","G__27047","p1__27043#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","or__3922__auto__","day8.re-frame-10x.metamorphic/request-animation-frame?","day8.re-frame-10x.metamorphic/request-animation-frame-end?","G__27052","G__27053","G__27054","G__27055","frame-traces","var_args","G__27066","day8.re-frame-10x.subs/+nil","args-arr__4512__auto__","len__4497__auto__","i__4498__auto__","argseq__4513__auto__","cljs.core/IndexedSeq","seq27063","G__27064","cljs.core/next","G__27065","x","y","more","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/+","G__27079","G__27080","G__27081","G__27082","G__27083","G__27084","p__27085","p__27086","vec__27087","vec__27090","af-start-end","epoch-traces","frame-number","vec__27094","frame-pairs","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","start","end","af-traces","day8.re-frame-10x.metamorphic/id-between-xf","total-time","subs-time","cljs.core.transduce.cljs$core$IFn$_invoke$arity$3","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.metamorphic/subscription?","cljs.core.map.cljs$core$IFn$_invoke$arity$1","render-time","G__27109","G__27110","G__27111","G__27112","map__27113","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","event-time","event-handler-time","event-dofx-time","event-run-time","remaining-interceptors","G__27119","G__27120","G__27121","G__27122","start-of-render","G__27127","G__27128","G__27129","G__27130","cljs.core/empty?","G__27136","G__27137","G__27140","G__27141","G__27142","G__27143","G__27150","G__27151","G__27152","G__27153","epoch","G__27158","G__27159","G__27160","G__27161","G__27166","G__27167","G__27168","G__27169","day8.re-frame-10x.subs/string!","cljs.spec.alpha/and-spec-impl","p1__27175#","cljs.core/string?","cljs.spec.alpha/def-impl","cljs.spec.alpha/nilable-impl","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__27188","cljs.core/coll?","cljs.core/pos-int?","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__27189","cljs.core/map?","G__27190","day8.re-frame-10x.subs/sub-type-value","sub-type","G__27191","cljs.core/Keyword","day8.re-frame-10x.subs/accumulate-sub-value","order","exp","total","temp__5455__auto__","js/Math.pow","cljs.core/rest","day8.re-frame-10x.subs/accumulate-sub-value-memoized","cljs.core/memoize","day8.re-frame-10x.subs/sub-sort-val","order-x","order-y","cljs.core/compare","day8.re-frame-10x.subs/sub-op-type->type","t","G__27196","p__27198","p__27199","vec__27200","vec__27203","day8.re-frame-10x.subs/prepare-pod-info","sub-info","sub-state","subscription","remove-fn","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","me","cljs.core/constantly","subx","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","state","sub","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3","G__27206","G__27207","G__27208","G__27209","G__27214","G__27215","G__27216","G__27217","G__27222","G__27223","G__27224","G__27225","G__27226","G__27227","G__27234","G__27235","G__27236","G__27237","G__27238","G__27239","G__27246","G__27247","G__27248","G__27249","G__27250","G__27251","p__27252","vec__27253","all-subs","ignore-unchanged-l2?","day8.re-frame-10x.metamorphic/unchanged-l2-subscription?","G__27262","G__27263","G__27264","G__27265","subs","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/frequencies","G__27270","G__27271","G__27272","G__27273","counts","cljs.core.get.cljs$core$IFn$_invoke$arity$3","G__27278","G__27279","G__27280","G__27281","G__27286","G__27287","G__27288","G__27289","G__27294","G__27295","G__27296","G__27297","G__27302","G__27303","G__27304","G__27305","G__27310","G__27311","G__27312","G__27313","G__27318","G__27319","G__27320","G__27321"],"sourcesContent":["(ns day8.re-frame-10x.subs\n  (:require [mranderson047.re-frame.v0v10v2.re-frame.core :as rf]\n            [day8.re-frame-10x.metamorphic :as metam]\n            [day8.re-frame-10x.utils.utils :as utils]\n            [clojure.string :as str]\n            [cljs.spec.alpha :as s]))\n\n(rf/reg-sub\n  :settings/root\n  (fn [db _]\n    (get db :settings)))\n\n(rf/reg-sub\n  :settings/panel-width%\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :panel-width%)))\n\n(rf/reg-sub\n  :settings/show-panel?\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :show-panel?)))\n\n(rf/reg-sub\n  :settings/selected-tab\n  :<- [:settings/root]\n  (fn [settings _]\n    (if (:showing-settings? settings)\n      :settings\n      (get settings :selected-tab))))\n\n(rf/reg-sub\n  :settings/paused?\n  :<- [:settings/root]\n  (fn [settings _]\n    (:paused? settings)))\n\n(rf/reg-sub\n  :settings/number-of-retained-epochs\n  :<- [:settings/root]\n  (fn [settings]\n    (:number-of-epochs settings)))\n\n(rf/reg-sub\n  :settings/ignored-events\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:ignored-events settings)))))\n\n(rf/reg-sub\n  :settings/filtered-view-trace\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:filtered-view-trace settings)))))\n\n(rf/reg-sub\n  :settings/low-level-trace\n  ;; TODO: filter from traces panel\n  ;; TODO: eventually drop these low level traces after computing the state we need from them.\n  :<- [:settings/root]\n  (fn [settings]\n    (:low-level-trace settings)))\n\n(rf/reg-sub\n  :settings/debug?\n  :<- [:settings/root]\n  (fn [settings]\n    (:debug? settings)))\n\n(rf/reg-sub\n  :settings/app-db-follows-events?\n  :<- [:settings/root]\n  (fn [settings]\n    (:app-db-follows-events? settings)))\n\n;; App DB\n\n(rf/reg-sub\n  :app-db/root\n  (fn [db _]\n    (get db :app-db)))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-after\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-after])))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-before\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-before])))\n\n(rf/reg-sub\n  :app-db/paths\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (map #(assoc (val %) :id (key %))\n         (get app-db-settings :paths))))\n\n(rf/reg-sub\n  :app-db/search-string\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :search-string)))\n\n(rf/reg-sub\n  :app-db/expansions\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :json-ml-expansions)))\n\n(rf/reg-sub\n  :app-db/node-expanded?\n  :<- [:app-db/expansions]\n  (fn [expansions [_ path]]\n    (contains? expansions path)))\n\n(rf/reg-sub\n  :app-db/reagent-id\n  :<- [:app-db/root]\n  (fn [root _]\n    (:reagent-id root)))\n\n;;\n\n(rf/reg-sub\n  :traces/trace-root\n  (fn [db _]\n    (:traces db)))\n\n(rf/reg-sub\n  :trace-panel/root\n  (fn [db _]\n    (:trace-panel db)))\n\n(rf/reg-sub\n  :traces/filter-items\n  (fn [db _]\n    (get-in db [:traces :filter-items])))\n\n(rf/reg-sub\n  :traces/expansions\n  (fn [db _]\n    (get-in db [:traces :expansions])))\n\n(rf/reg-sub\n  :traces/categories\n  (fn [db _]\n    (get-in db [:traces :categories])))\n\n(rf/reg-sub\n  :traces/all-traces\n  :<- [:traces/trace-root]\n  (fn [traces _]\n    (:all-traces traces)))\n\n(rf/reg-sub\n  :traces/number-of-traces\n  :<- [:traces/all-traces]\n  (fn [traces _]\n    (count traces)))\n\n(rf/reg-sub\n  :traces/current-event-traces\n  :<- [:traces/all-traces]\n  :<- [:epochs/beginning-trace-id]\n  :<- [:epochs/ending-trace-id]\n  (fn [[traces beginning ending] _]\n    (into [] (utils/id-between-xf beginning ending) traces)))\n\n(defn filter-ignored-views [[traces filtered-views] _]\n  (let [munged-ns (->> filtered-views\n                       (map (comp munge :ns-str))\n                       (set))]\n    (into []\n          ;; Filter out view namespaces we don't care about.\n          (remove\n            (fn [trace] (and (metam/render? trace)\n                             (contains? munged-ns (subs (:operation trace) 0 (str/last-index-of (:operation trace) \".\"))))))\n          traces)))\n\n(rf/reg-sub\n  :traces/current-event-visible-traces\n  :<- [:traces/current-event-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :traces/all-visible-traces\n  :<- [:traces/all-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :trace-panel/show-epoch-traces?\n  :<- [:trace-panel/root]\n  (fn [trace-root]\n    (:show-epoch-traces? trace-root)))\n\n;;\n\n(rf/reg-sub\n  :global/unloading?\n  (fn [db _]\n    (get-in db [:global :unloading?])))\n\n;;\n\n(rf/reg-sub\n  :snapshot/snapshot-root\n  (fn [db _]\n    (:snapshot db)))\n\n(rf/reg-sub\n  :snapshot/snapshot-ready?\n  :<- [:snapshot/snapshot-root]\n  (fn [snapshot _]\n    (contains? snapshot :current-snapshot)))\n\n;;\n\n(rf/reg-sub\n  :epochs/epoch-root\n  (fn [db _]\n    (:epochs db)))\n\n(rf/reg-sub\n  :epochs/current-match-state\n  :<- [:epochs/epoch-root]\n  :<- [:epochs/match-ids]\n  (fn [[epochs match-ids] _]\n    (let [current-id (:current-epoch-id epochs)\n          match      (cond\n                       (nil? current-id) (last (:matches epochs))\n                       (< current-id (first match-ids)) (first (:matches epochs))\n                       ;; This case seems impossible, but can happen if the user filters out\n                       ;; an event that they are 'on'.\n                       (> current-id (last match-ids)) (last (:matches epochs))\n                       :else (get (:matches-by-id epochs) current-id))]\n      match)))\n\n(rf/reg-sub\n  :epochs/current-match\n  :<- [:epochs/current-match-state]\n  (fn [match-state _]\n    (:match-info match-state)))\n\n(rf/reg-sub\n  :epochs/current-event-trace\n  :<- [:epochs/current-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  :epochs/current-event\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  :epochs/number-of-matches\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (count (get epochs :matches))))\n\n(rf/reg-sub\n  :epochs/current-event-index\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-index epochs)))\n\n(rf/reg-sub\n  :epochs/current-epoch-id\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-id epochs)))\n\n(rf/reg-sub\n  :epochs/match-ids\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:match-ids epochs)))\n\n(rf/reg-sub\n  :epochs/beginning-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (first match))))\n\n(rf/reg-sub\n  :epochs/ending-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (last match))))\n\n(rf/reg-sub\n  :epochs/older-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (or (nil? current)\n             (> current (nth ids 0))))))\n\n(rf/reg-sub\n  :epochs/newer-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (some? current)\n         (< current (utils/last-in-vec ids)))))\n\n;;\n\n(rf/reg-sub\n  :timing/total-epoch-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-epoch (nth traces 0)\n          end-of-epoch   (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-epoch end-of-epoch))))\n\n(rf/reg-sub\n  :timing/animation-frame-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter #(or (metam/request-animation-frame? %)\n                 (metam/request-animation-frame-end? %))\n            traces)))\n\n(rf/reg-sub\n  :timing/animation-frame-count\n  :<- [:timing/animation-frame-traces]\n  (fn [frame-traces]\n    (count (filter metam/request-animation-frame? frame-traces))))\n\n(defn ^number +nil\n  \"Returns the sum of nums. (+) returns nil (not 0 like in cljs.core).\"\n  ([] nil)\n  ([x] x)\n  ([x y] (cljs.core/+ x y))\n  ([x y & more]\n   (reduce + (cljs.core/+ x y) more)))\n\n(rf/reg-sub\n  :timing/animation-frame-time\n  :<- [:timing/animation-frame-traces]\n  :<- [:traces/current-event-traces]\n  (fn [[af-start-end epoch-traces] [_ frame-number]]\n    (let [frame-pairs (partition 2 af-start-end)\n          [start end] (nth frame-pairs (dec frame-number))\n          af-traces   (into [] (metam/id-between-xf (:id start) (:id end)) epoch-traces)\n          total-time  (metam/elapsed-time start end)\n          ;; TODO: these times double count renders/subs that happened as a child of another\n          ;; need to fix either here, at ingestion point, or most preferably in re-frame at tracing point.\n          subs-time   (transduce (comp\n                                   (filter metam/subscription?)\n                                   (map :duration))\n                                 +nil af-traces)\n          render-time (transduce (comp\n                                   (filter metam/render?)\n                                   (map :duration))\n                                 +nil af-traces)]\n      {:timing/animation-frame-total  total-time\n       :timing/animation-frame-subs   subs-time\n       :timing/animation-frame-render render-time\n       ;; TODO: handle rounding weirdness here, make sure it is never below 0.\n       :timing/animation-frame-misc   (- total-time subs-time render-time)})))\n\n(rf/reg-sub\n  :timing/event-processing-time\n  :<- [:epochs/current-match-state]\n  (fn [match]\n    (let [{:re-frame/keys [event-time event-handler-time event-dofx-time event-run-time]} (get match :timing)\n          ;; The scope of tracing is:\n          ;; event-run-time\n          ;;   event-time\n          ;;     event-handler-time\n          ;;     event-dofx-time\n          ;;     <other stuff>\n          ;;   <other stuff>\n          remaining-interceptors (- event-time event-handler-time event-dofx-time)]\n      {:timing/event-total        event-run-time\n       :timing/event-handler      event-handler-time\n       :timing/event-effects      event-dofx-time\n       :timing/event-interceptors remaining-interceptors\n       ;; TODO: look at splitting out interceptors from misc, there was a suspiciously high amount of time\n       ;; in misc on some events, so that needs to be investigated.\n       ; :timing/event-misc (- event-run-time event-time)\n       :timing/event-misc         (- event-run-time event-handler-time event-dofx-time)})))\n\n(rf/reg-sub\n  :timing/render-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-render (first (filter metam/request-animation-frame? traces))\n          end-of-epoch    (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-render end-of-epoch))))\n\n(rf/reg-sub\n  :timing/data-available?\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (not (empty? traces))))\n\n;;\n\n(rf/reg-sub\n  :subs/root\n  (fn [db _]\n    (:subs db)))\n\n(rf/reg-sub\n  :subs/all-sub-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter metam/subscription? traces)))\n\n(rf/reg-sub\n  :subs/subscription-info\n  :<- [:epochs/epoch-root]\n  (fn [epoch]\n    (:subscription-info epoch)))\n\n(rf/reg-sub\n  :subs/sub-state\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:sub-state epochs)))\n\n(rf/reg-sub\n  :subs/current-epoch-sub-state\n  :<- [:epochs/current-match-state]\n  (fn [match-state]\n    (:sub-state match-state)))\n\n(def string! (s/and string? #(not (empty? %))))\n\n(s/def :sub/id string!)\n(s/def :sub/reagent-id string!)\n(s/def :sub/run-types #{:sub/create :sub/dispose :sub/run :sub/not-run})\n(s/def :sub/order (s/nilable (s/coll-of :sub/run-types)))\n(s/def :sub/layer (s/nilable pos-int?))\n(s/def :sub/path-data any?)\n(s/def :sub/path string!)\n(s/def :sub/value any?)\n(s/def :sub/previous-value any?)\n(s/def :subs/view-panel-sub\n  (s/keys :req-un [:sub/id :sub/reagent-id :sub/order :sub/layer :sub/path-data :sub/path]\n          :opt-un [:sub/value :sub/previous-value]))\n(s/def :subs/view-subs (s/coll-of :subs/view-panel-sub))\n\n(defn sub-type-value\n  [sub-type]\n  (case sub-type\n    :sub/create 5\n    :sub/run 4\n    :sub/dispose 3\n    :sub/not-run 2\n    1))\n\n(defn accumulate-sub-value\n  \"Calculate a sorting value for a series of subscription trace types.\"\n  ;; A reader might reasonably ask, \"Why are we going to all this work here?\"\n  ;; We calculate a custom value rather than just comparing two order vectors,\n  ;; because the default compare logic for comparing vectors is to sort shorter\n  ;; vectors above longer ones, whereas we want all CRR, CR, C orders to be\n  ;; sorted adjacent to each other, in that order.\n  ;;\n  ;; The first sub type in the order is worth (n * 10^3),\n  ;; then the next one (if it exists), is worth (n * 10^2), and so-on.\n  [order]\n  (loop [exp   3\n         total 0\n         order order]\n    (if-let [sub-type (first order)]\n      (recur (dec exp) (+ total (* (sub-type-value sub-type) (js/Math.pow 10 exp))) (rest order))\n      total)))\n\n(def accumulate-sub-value-memoized\n  (memoize accumulate-sub-value))\n\n(defn sub-sort-val [order-x order-y]\n  ;; Note x and y are reversed here so that the \"highest\" sub orders get sorted first.\n  (compare (accumulate-sub-value-memoized order-y)\n           (accumulate-sub-value-memoized order-x)))\n\n(defn sub-op-type->type [t]\n  (case (:op-type t)\n    :sub/create :created\n    :sub/run :re-run\n    :sub/dispose :destroyed\n\n    :not-run))\n\n(defn prepare-pod-info\n  \"Returns sub info prepared for rendering in pods\"\n  [[sub-info sub-state] [subscription]]\n  (let [remove-fn (if (= subscription :subs/inter-epoch-subs)\n                    (fn [me] (nil? (:order (val me))))\n                    (constantly false))\n        subx      (->> sub-state\n                       (remove remove-fn)\n                       (map (fn [me] (let [state        (val me)\n                                           subscription (:subscription state)\n                                           sub          {:id         (key me)\n                                                         :reagent-id (key me)\n                                                         :layer      (get-in sub-info [(first subscription) :layer])\n                                                         :path-data  subscription\n                                                         :path       (pr-str subscription)\n                                                         :order      (or (:order state) [:sub/not-run])\n                                                         :sub/traits (:sub/traits state)}\n                                           sub          (if (contains? state :value)\n                                                          (assoc sub :value (:value state))\n                                                          sub)\n                                           sub          (if (contains? state :previous-value)\n                                                          (assoc sub :previous-value (:previous-value state))\n                                                          sub)]\n                                       sub)))\n                       (sort-by :order sub-sort-val)        ;; Also sort by subscription-id\n                       #_(sort-by :path))]\n    subx))\n\n\n(rf/reg-sub\n  :subs/pre-epoch-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:pre-epoch-state sub-state)))\n\n(rf/reg-sub\n  :subs/reaction-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:reaction-state sub-state)))\n\n(rf/reg-sub\n  :subs/inter-epoch-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/pre-epoch-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/all-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/reaction-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/visible-subs\n  :<- [:subs/all-subs]\n  :<- [:subs/ignore-unchanged-l2-subs?]\n  (fn [[all-subs ignore-unchanged-l2?]]\n    (if ignore-unchanged-l2?\n      (remove metam/unchanged-l2-subscription? all-subs)\n      all-subs)))\n\n(rf/reg-sub\n  :subs/sub-counts\n  :<- [:subs/visible-subs]\n  (fn [subs _]\n    (->> subs\n         (mapcat :order)\n         (frequencies))))\n\n(rf/reg-sub\n  :subs/created-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/create 0)))\n\n(rf/reg-sub\n  :subs/re-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/run 0)))\n\n(rf/reg-sub\n  :subs/destroyed-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/dispose 0)))\n\n(rf/reg-sub\n  :subs/not-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/not-run 0)))\n\n(rf/reg-sub\n  :subs/unchanged-l2-subs-count\n  :<- [:subs/all-subs]\n  (fn [subs]\n    (count (filter metam/unchanged-l2-subscription? subs))))\n\n(rf/reg-sub\n  :subs/ignore-unchanged-l2-subs?\n  :<- [:subs/root]\n  (fn [subs _]\n    (:ignore-unchanged-subs? subs true)))\n\n(rf/reg-sub\n  :subs/sub-expansions\n  :<- [:subs/root]\n  (fn [subs _]\n    (:expansions subs)))\n"]}