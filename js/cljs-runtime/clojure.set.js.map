{"version":3,"file":"clojure.set.js","sources":["clojure/set.cljs"],"mappings":"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","names":["yrel","xrel","km","pred","xset","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","idx","clojure.set/index","r","ks","clojure.set/subset?","s","clojure.set/select","s1","cljs.core/count","clojure.set/bubble-max-key","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","s2","bubbled-sets","sets","cljs.core/set","p1__25597#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","cljs.core/conj","cljs.core/disj","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","result","item","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","m","new","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map","old","cljs.core/keys","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","cljs.core/first","vec__25619","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__25627","k","ik","x","max","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/max-key","coll","p__25600","vec__25601","found","clojure.set/superset?","set1","set2","var_args","G__25618","clojure.set/join","js/Error","cljs.core/vals","clojure.set/intersection","cljs.core/rest","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","ret","cljs.core/into","p1__25644#","cljs.core/every?","cljs.core/contains?","clojure.set/project","clojure.set/difference","G__25626","kmap","G__25580","args-arr__4512__auto__","len__4497__auto__","i__4498__auto__","argseq__4513__auto__","cljs.core/IndexedSeq","seq25577","G__25578","cljs.core/next","G__25579","p1__25645#","cljs.core/cons","p1__25529#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","clojure.set/rename","clojure.set/map-invert","cljs.core/dissoc","p1__25615#","p2__25616#","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","v","p__25607","vec__25608","G__25631","clojure.set/rename-keys","G__25558","seq25555","G__25556","G__25557","G__25536","clojure.set/union","seq25533","G__25534","G__25535","cljs.core/seq","p2__25614#","p1__25613#","p1__25551#","p1__25605#"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m] (reduce (fn [m [k v]] (assoc m v k)) {} m))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n"]}