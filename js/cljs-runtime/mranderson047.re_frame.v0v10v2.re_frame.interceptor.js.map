{"version":3,"file":"mranderson047.re_frame.v0v10v2.re_frame.interceptor.js","sources":["mranderson047/re_frame/v0v10v2/re_frame/interceptor.cljc"],"mappings":"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","names":["mranderson047.re-frame.v0v10v2.re-frame.interceptor/mandatory-interceptor-keys","mranderson047.re-frame.v0v10v2.re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core/set","var_args","args__4500__auto__","len__4497__auto__","i__4498__auto__","argseq__4501__auto__","cljs.core/IndexedSeq","mranderson047.re-frame.v0v10v2.re-frame.interceptor/->interceptor","p__24857","map__24858","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq24856","cljs.core/seq","id","before","after","mranderson047.re-frame.v0v10v2.re-frame.interop/debug-enabled?","temp__5455__auto__","unknown-keys","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","mranderson047.re_frame.v0v10v2.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","or__3922__auto__","G__24878","mranderson047.re-frame.v0v10v2.re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","not-found","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","mranderson047.re-frame.v0v10v2.re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","G__24894","mranderson047.re-frame.v0v10v2.re-frame.interceptor/get-coeffect","mranderson047.re-frame.v0v10v2.re-frame.interceptor/assoc-coeffect","mranderson047.re-frame.v0v10v2.re-frame.interceptor/update-coeffect","seq24915","G__24916","cljs.core/first","cljs.core/next","G__24917","G__24918","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core/update-in","mranderson047.re-frame.v0v10v2.re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","mranderson047.re-frame.v0v10v2.re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/pop","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.interceptor/enqueue","interceptors","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/into","mranderson047.re-frame.v0v10v2.re-frame.interop/empty-queue","G__24957","mranderson047.re-frame.v0v10v2.re-frame.interceptor/context","event","db","mranderson047.re_frame.v0v10v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.interceptor/change-direction","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.interceptor/execute","event-v"],"sourcesContent":["(ns mranderson047.re-frame.v0v10v2.re-frame.interceptor\n  (:require\n    [mranderson047.re-frame.v0v10v2.re-frame.loggers :refer [console]]\n    [mranderson047.re-frame.v0v10v2.re-frame.interop :refer [empty-queue debug-enabled?]]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  \"Create an interceptor from named arguments\"\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor \" m \" has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after })\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  \"Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context.\"\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n  (-> {}\n      (assoc-coeffect :event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n"]}