{"version":3,"file":"shadow.object.js","sources":["shadow/object.cljs"],"mappings":"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","names":["shadow.object/set-parent!","oref","parent","this","update-fn","cljs.core/even?","cljs.core/count","behavior","old","new","handler","watches","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p1__30875#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","key","ev","handler-fn","ov","nv","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","shadow.object/IObject","new-obj","make-item-fn","nkey","nval","result","shadow.object/-id","parent-id","seq__31148","cljs.core/seq","chunk__31149","count__31150","i__31151","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","item","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","new-coll","count-children","count-new","var_args","G__30479","shadow.object/get-type-attr","js/Error","obj","args","shadow.object.update_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","dom","node","attr","item-type","item-key","coll-transform","shadow.object/find-containing-object","cljs.core/sequential?","seq__30629","chunk__30630","count__30631","i__30632","child","shadow.object/get-children","current-obj","data","shadow.object/notify-tree!","shadow.object.bind_change.cljs$core$IFn$_invoke$arity$3","shadow.dom/remove","notify-fn","shadow.object/-destroy!","cause","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.object/instance-parent","reactions","shadow.object/merge-reactions","odef","cljs.core/vec","p1__30526#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","instances","child-ids","oid","shadow.object/next-id","shadow.object/-update","work-fn","shadow.object.get_siblings_of_type.cljs$core$IFn$_invoke$arity$2","children","diff","shadow.object/return-value","return-value","shadow.object/inspect!","shadow.object/object-defs","type","shadow.object/get-dom","update-children","dom-events","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","shadow.object/obj-id","cljs.core/inc","val","c","seq__31096","chunk__31097","count__31098","i__31099","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","shadow.object/-type","cljs.core/contains?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","make-child-fn","curval","shadow.object/define-event","js/Object","e","and__3911__auto__","path","shadow.object/instance-children","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cljs.core/-write","shadow.object/ObjectRef","shadow.object/->ObjectRef","id","result-chan","k","cval","cc","shadow.object/create","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","shadow.object/equal?","obj-or-dom","cljs.core/tree-seq","branch?","root","shadow.object/coll-destroy-children","current","cljs.core.get.cljs$core$IFn$_invoke$arity$3","event","G__31225","G__31226","G__31227","G__31228","G__31232","G__31233","G__31234","G__31235","shadow.object/-data","shadow.object/info","_","bind-key","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","clojure.string/replace","child-id","shadow.object/get-parent","shadow.object/merge-defaults","args__4500__auto__","len__4497__auto__","i__4498__auto__","argseq__4501__auto__","cljs.core/IndexedSeq","shadow.object/define","seq30810","G__30811","value","cljs.core/fn?","shadow.dom/data","shadow.object/notify-up!","seq30675","G__30676","G__30677","oldval","newval","G__30708","G__30709","custom-remove","cljs.core/reset!","new-node","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","x","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","default","shadow.object/get-by-id","js/parseInt","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","defaults","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","shadow.object/notify!","shadow.object/get-from-dom","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","n__4376__auto__","idx","G__31086","shadow.object/bind-simple","seq__30889","chunk__30890","count__30891","i__30892","map__30893","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","map__30899","watch","shadow.object/get-children-of-type","shadow.object/warn","shadow.util/log","G__30847","shadow.object/bind-dom-events","current-node","el","other","coll-dom","shadow.dom/build","shadow.object/get-collection-item","or__3922__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","ckey","shadow.object/merge-behaviors","writer","shadow.dom/set-data","event-name","desc","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","shadow.object/events","f","p1__30545#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","type-kw","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","rfn","cljs.core/cons","shadow.object/do-notify-tree","callback","watch-key","new-child","shadow.object/remove-in-parent!","seq__31140","chunk__31141","count__31142","i__31143","G__31144","shadow.object/dom-destroy","d","shadow.dom.ev_stop.cljs$core$IFn$_invoke$arity$1","opts","shadow.object/dump!","G__30836","dom-fn","parent-type","coll","node-gen","seq30587","G__30588","G__30589","p1__30559#","shadow.object/get-siblings","e30813","shadow.object/dom-enter","node-get","seq__30597","chunk__30598","count__30599","i__30600","reactions-to-trigger","cljs.core/reverse","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","shadow.object/reaction-merge","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","shadow.object/debug","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","dom-key","events-key","shadow.object/alive?","G__31014","node-children","parent-key","shadow.object/instances","shadow.object.notify_BANG_.cljs$core$IFn$_invoke$arity$variadic","G__31088","p1__31084#","shadow.object.destroy_BANG_.cljs$core$IFn$_invoke$arity$1","temp__5455__auto__","shadow.object/unmunge","s","cljs.core/assoc-in","shadow.object/notify-down!","cljs.core/clj->js","G__31210","G__31211","G__31212","G__31213","shadow.object.bind_simple.cljs$core$IFn$_invoke$arity$3","cljs.core/str","G__30563","shadow.object/get-siblings-of-type","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","shadow.object.destroy_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/rem","G__30528","shadow.object/tree-seq","cn","shadow.object.get_type_attr.cljs$core$IFn$_invoke$arity$2","cljs.core/Keyword","shadow.object/bind","shadow.object/Watch","shadow.dom.append.cljs$core$IFn$_invoke$arity$2","item-attrs","x__4211__auto__","m__4212__auto__","shadow/object.-id","goog/typeOf","cljs.core/missing-protocol","shadow/object.-type","shadow/object.-data","shadow/object.-update","shadow/object.-destroy!","cljs.core/map?","p__31136","vec__31137","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/add-watch","cljs.core/update-in","list","js/console.warn","shadow.object.get_type_attr.cljs$core$IFn$_invoke$arity$3","events","shadow.object/log","G__31005","shadow.object/bind-change","G__30711","shadow.object/destroy!","p__30550","map__30551","shadow.object/behavior-fns","this__10592__auto__","k__10593__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__10594__auto__","k30840","else__10595__auto__","__extmap","this__10606__auto__","writer__10607__auto__","opts__10608__auto__","pr-pair__10609__auto__","keyval__10610__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core/PersistentVector","G__30839","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__10590__auto__","__meta","this__10587__auto__","__hash","this__10596__auto__","this__10588__auto__","h__4030__auto__","fexpr__30852","coll__10589__auto__","cljs.core/hash-unordered-coll","this30841","other30842","this__10601__auto__","k__10602__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__10599__auto__","k__10600__auto__","pred__30855","cljs.core/keyword-identical?","expr__30856","G__30858","G__30859","G__30860","G__30861","this__10604__auto__","this__10591__auto__","this__10597__auto__","entry__10598__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","this__4208__auto__","cljs.core/List","writer__4209__auto__","G__30843","shadow.object/->Watch","shadow.object/map->Watch","seq__31218","chunk__31219","count__31220","i__31221","vec__31222","vec__31229","shadow.dom/replace-node","G__30835","shadow.object/make-dom","seq31011","G__31012","G__31013","shadow.object.make_dom.cljs$core$IFn$_invoke$arity$4","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","shadow.dom.contains_QMARK_.cljs$core$IFn$_invoke$arity$1","x__4009__auto__","y__4010__auto__","shadow.dom.on.cljs$core$IFn$_invoke$arity$3","type-id","p__30767","vec__30770","G__31094","G__31095","shadow.object/update!","seq30686","G__30687","G__30688","G__31135","shadow.object/bind-children","shadow.object.bind_change.cljs$core$IFn$_invoke$arity$4","shadow.object/error","shadow.object.tree_seq.cljs$core$IFn$_invoke$arity$2","cljs.core.async/close!","shadow.object/is-object?","shadow.dom/children","shadow.util/remove-item-from-coll","shadow.object.add_reaction_BANG_.cljs$core$IFn$_invoke$arity$2","seq__31018","chunk__31019","count__31020","i__31021","vec__31022","vec__31032","shadow.object/console-friendly","shadow.util/console-friendly","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/disj","shadow.object/get-parent-of-type","vec__31145","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","seq__30901","chunk__30902","count__30903","i__30904","shadow.object/get-type","cljs.core/vector","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","shadow.object.bind_children.cljs$core$IFn$_invoke$arity$6","p1__31133#","G__31000","shadow.object/add-reaction!","seq__30717","chunk__30718","count__30719","i__30720","vec__30721","vec__30727","ev-def","seq30664","G__30665","G__30666","cljs.core.async.impl.protocols/take!","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns shadow.object\n  (:refer-clojure :exclude (tree-seq))\n  (:require [shadow.dom :as dom]\n            [cljs.core.async :as async]\n            [clojure.string :as str]\n            [clojure.data :as data]\n            [cljs.core.async.impl.protocols :as async-impl]\n            [shadow.util :as util]\n            ))\n\n(def console-friendly util/console-friendly)\n\n(def log util/log)\n(def debug util/log)\n(def info util/log)\n(def warn util/log)\n(def error util/log)\n\n(def obj-id (atom 0))\n(defn next-id []\n  (swap! obj-id inc))\n\n(def object-defs (atom {}))\n(def behavior-fns (atom {}))\n\n(def instances (atom {}))\n(def instance-parent (atom {}))\n(def instance-children (atom {}))\n\n(def events (atom {}))\n\n(defn define-event [event-name desc args]\n  (swap! events assoc event-name {:id event-name\n                                  :description desc\n                                  :args args}))\n\n(defn unmunge [s]\n  (-> s\n      (str/replace #\"_DOT_\" \".\")\n      (str/replace #\"_\" \"-\")\n      ))\n\n(define-event :init\n  \"object initialization\"\n  [])\n\n(define-event :destroy\n  \"object descruction\"\n  [[:cause \"cause of destruction, :parent means the parent was destroyed, :direct is default\"]])\n\n(define-event :dom/init\n  \"called after the dom was created but has not entered the document yet\"\n  [[:dom \"the dom that was created\"]])\n\n(define-event :dom/entered\n  \"should be called whenever a dom node is added to the document, since that\n   is not in control of this library its up to you to call this\n   use (so/notify-tree! your-obj :dom/entered) to notify the node and every child you created\"\n  [])\n\n(define-event :bind-children-update\n  \"need to rethink this\"\n  [])\n\n(defprotocol IObject\n  (-id [this])\n  (-type [this])\n  (-data [this])\n  (-update [this update-fn] \"update and notify watches\")\n  (-destroy! [this cause]))\n\n(defn get-type [this]\n  (-type this))\n\n(defn get-type-attr\n  ([oref key]\n     (if (nil? oref)\n       nil\n       (let [type-id (if (keyword? oref) oref (-type oref))]\n         (get-in @object-defs [type-id key]))))\n  ([oref key default]\n     (if (nil? oref)\n       default\n       (let [type-id (if (keyword? oref) oref (-type oref))]\n         (get-in @object-defs [type-id key] default)))))\n\n(defn ^:export get-dom [oref]\n  (::dom oref))\n\n(defn ^:export get-by-id [id]\n  (get @instances id))\n\n(defn ^:export get-from-dom [dom]\n  (let [oid (dom/data dom :oid)]\n    (when oid\n      (get-by-id (js/parseInt oid 10)))\n    ))\n\n(defn is-object? [obj-or-dom]\n  (or (satisfies? IObject obj-or-dom)\n      (get-from-dom obj-or-dom)))\n\n(defn equal? [obj obj-or-dom]\n  (assert (satisfies? IObject obj) \"can only test objects\")\n  (if (satisfies? IObject obj-or-dom)\n    (= (-id obj) (-id obj-or-dom))\n    (= (-id obj) (when-let [oid (dom/data obj-or-dom :oid)]\n                   (js/parseInt oid 10)))))\n\n(defn ^:export get-parent [oref]\n  (when-let [parent-id (get @instance-parent (-id oref))]\n    (get @instances parent-id)\n    ))\n\n(defn ^:export get-parent-of-type [oref parent-type]\n  (loop [parent (:parent oref)]\n    (when parent\n      (if (= (-type parent) parent-type)\n        parent\n        (recur (:parent parent))))))\n\n;; FIXME: would be nice if these were in dom order\n;; but since children arent always direct dom children\n;; this would be kinda costly I guess\n(defn ^:export get-children [parent]\n  (let [parent-id (-id parent)\n        child-ids (get @instance-children parent-id [])\n        instances @instances]\n    (vec (map #(get instances %) child-ids))\n    ))\n\n(defn ^:export tree-seq\n  ([root]\n     (tree-seq root (fn [node] true)))\n  ([root branch?]\n     (cljs.core/tree-seq branch? get-children root)))\n\n(defn get-children-of-type [oref type]\n  (let [type-kw (if (keyword? type) type (-type type))]\n    (filter #(= type-kw (-type %)) (get-children oref))\n    ))\n\n(defn get-siblings\n  \"basically (get-children (:parent this))\"\n  [{:keys [parent] :as oref}]\n  (when-not parent\n    (throw (ex-info \"object has no parent, thus has no siblings\" {:oref oref})))\n\n  (get-children parent))\n\n(defn get-siblings-of-type \n  \"returns set of all siblings of a common type\"\n  ([oref]\n     (get-siblings-of-type oref oref))\n  ([oref type]\n     (let [type-kw (if (keyword? type) type (-type type))]\n       (filter #(= type-kw (-type %)) (get-siblings oref))\n       )))\n\n(defn get-collection-item [oref]\n  (let [item-key (::coll-item-key oref)]\n    (get oref item-key)\n    ))\n\n(defn find-containing-object\n  \"find the object that contains this dom node\"\n  [dom]\n  (if-let [obj (get-from-dom dom)]\n    obj\n    (when-let [parent (.-parentElement dom)]\n      (recur parent))))\n\n(defn notify! [oref ev & args]\n  \n  #_ (when-not (contains? @events ev)\n       (debug \"triggering undefined notifiction\" (pr-str ev) \" with \" (pr-str args)))\n\n  ;; (debug \"notify!\" oref ev args)\n\n  (when-let [reactions-to-trigger (get-in oref [::reactions ev])]\n    ;; (debug \"notify!\" (-id oref) (-type oref) ev reactions-to-trigger args)\n    (doseq [rfn reactions-to-trigger]\n      (apply rfn (cons oref args)))\n    ))\n\n(defn- do-notify-tree [current-obj ev notify-fn]\n  (doseq [child (get-children current-obj)]\n    (do-notify-tree child ev notify-fn))\n  (notify-fn current-obj))\n\n(defn notify-tree! [oref ev & args]\n  (let [notify-fn (fn [obj]\n                    (apply notify! obj ev args))]\n    (do-notify-tree oref ev notify-fn)))\n\n(def notify-down! notify-tree!)\n\n(defn notify-up! [oref ev & args]\n  (loop [current (get-parent oref)]\n    (when current\n      (apply notify! current ev args)\n      (recur (get-parent current)))))\n\n(defn update! [oref update-fn & args]\n  (when-not (fn? update-fn)\n    (throw (str \"update! expects a fn as second arg, not \" (pr-str update-fn))))\n\n  (let [id (-id oref)\n        data (-data oref)\n        work-fn (fn [data] (apply update-fn data args))]\n    (-update oref work-fn)\n    ))\n\n(defn return-value [oref return-value]\n  (update! oref assoc ::return-value return-value))\n\n(defn- set-parent! [child parent]\n  (let [child-id (-id child)\n        parent-id (-id parent)]\n    (swap! instance-parent assoc child-id parent-id)\n    (swap! instance-children (fn [x]\n                               (let [current (get x parent-id #{})]\n                                 (assoc x parent-id (conj current child-id))\n                                 )))\n    true))\n\n(defn dom-destroy [this cause]\n  (if (= cause :parent)\n    ;; no messin arround when parent is dead\n    (dom/remove (::dom this))\n    ;; custom removals are allowed when removing direct\n    (if-let [custom-remove (get-type-attr this :dom/remove)]\n      (custom-remove this (::dom this))\n      (dom/remove (::dom this))\n      )))\n\n(defn destroy!\n  ([oref]\n     (destroy! oref :direct))\n  ([oref cause]\n     (-destroy! oref cause)))\n\n(defn bind-dom-events [oref dom dom-events]\n  (when-not (zero? (rem (count dom-events) 2))\n    (throw (ex-info \"object defined invalid event\" {:object-type (-type oref) :dom/events dom-events})))\n\n  (doseq [[ev handler :as ev-def] (partition 2 dom-events)]\n    (when (nil? handler)\n      (throw (str \"ev with nil handler \" (pr-str ev))))\n\n    (let [handler (if (keyword? handler)\n                    (fn [this e el]\n                      (notify! this handler e el))\n                    handler)]\n      (dom/on dom ev (fn dom-event-handler [e el]\n                       (when (= \"A\" (.-tagName el)) \n                         ;; FIXME: thou shall not stop events at all?\n                         ;; FIXME: stops all events on A, but what except click would you use anyways?\n                         ;; <a class=\"wtf\" href=\"#\">something</a>\n                         ;; this just simplifies :dom/events [[:click \"a.wtf\"] some-fn] so some-fn doesnt have to\n                         ;; stop the event which is what you'd want 99% of the time, if you dont want to stop it\n                         ;; use the router and dont listen to click.\n                         (dom/ev-stop e))\n                       (handler oref e el))))))\n\n(defn- reaction-merge [result [event handler]]\n  (when-not (and event handler)\n    (throw (ex-info \"invalid reaction\" {:event event :handler handler})))\n\n  (let [current (get result event (list))]\n    (assoc result event (conj current handler))))\n\n(defn- merge-reactions [result behavior]\n  (when-not (sequential? behavior)\n    (throw (ex-info \"behaviors must be vectors\" {:behavior behavior})))\n  (when-not (even? (count behavior))\n    (throw (ex-info \"invalid behavior\" {:behavior behavior})))\n\n  (reduce reaction-merge result (reverse (partition 2 behavior))))\n\n\n(defn- merge-behaviors [result behavior]\n  (cond\n   (sequential? behavior)\n   (update-in result [::reactions] merge-reactions behavior)\n\n   (map? behavior)\n   (-> result\n       ;; FIXME: there might be more keys to merge, need some kind of merge logic definition\n       (update-in [::reactions] merge-reactions (:on behavior []))\n       (update-in [:watch] (fn [watches]\n                             (concat watches (:watch behavior []))))\n       (update-in [:dom/events] (fn [default]\n                                  (-> default\n                                      (concat (:dom/events behavior []))\n                                      (vec)))))\n   :else\n   (throw (ex-info \"behavior not understood\" {:behavior behavior}))\n   ))\n\n(defn define [id & args]\n  (when-not (keyword? id)\n    (throw (ex-info \"object id needs to be a keyword\" {:id id :args args})))\n  (when-not (even? (count args))\n    (throw (str \"invalid object definition \" (str id) \" args: \"(pr-str args))))\n  (when (contains? @object-defs id)\n    (js/console.warn (str \"object already defined \" id)))\n\n  (try\n    (let [odef (apply hash-map args)\n\n          reactions (merge-reactions {} (:on odef []))\n\n          ;;      reactions (reduce merge-reactions reactions (reverse (:behaviors odef [])))\n\n          odef (assoc odef\n                 ::id id\n                 ::reactions reactions)\n          odef (reduce merge-behaviors odef (reverse (:behaviors odef [])))]\n\n      (swap! object-defs assoc id odef)\n      odef)\n    (catch js/Object e\n      (throw (ex-info \"failed to define object\" {:id id :args args})))))\n\n\n(defn- merge-defaults [data type]\n  (let [defaults (get-in @object-defs [type :defaults])]\n    (cond\n     (nil? defaults) data\n     (map? defaults) (merge defaults data)\n     (fn? defaults) (merge (defaults) data)\n     :else (throw (ex-info \"invalid object defaults\" {:defaults defaults :type type}))\n     )))\n\n(defn make-dom\n  ([oref dom-key events-key]\n     (make-dom oref dom-key events-key nil))\n  ([oref dom-key events-key value]\n      (let [dom-fn (if (keyword? dom-key) (get-type-attr oref dom-key) dom-key)\n            events (if (keyword? events-key) (get-type-attr oref events-key []) events-key)\n            dom (dom/build (dom-fn oref value))]\n        (bind-dom-events oref dom events)\n        dom\n        )))\n\n\n(defn alive? [obj]\n  (contains? @instances (-id obj)))\n\n(defrecord Watch [key handler])\n\n(deftype ObjectRef [id type ^:mutable data ^:mutable watches result-chan]\n  IObject\n  (-id [this] id)\n  (-type [this] type)\n  (-data [this] data)\n  (-update [this update-fn]\n    (let [old data\n          new (update-fn data)]\n      (set! data new)\n      (doseq [{:keys [key handler] :as watch} watches]\n        ;; watches may destroy the current object\n        ;; if that happens we should not continue\n        ;; FIXME: this seems really dirty, there must be a cleaner way?\n        ;; maybe queue all other modifications until this is finished?\n        (when (alive? this)\n          (handler key this old new)))))\n  (-destroy! [this cause]\n    (let [parent-id (get @instance-parent id)]\n\n      ;; destroy children before destroying parent\n      (doseq [child (get-children this)]\n        (-destroy! child :parent))\n\n      (notify! this :destroy cause)\n      (dom-destroy this cause)\n      \n      (let [return-value (::return-value this)]\n        (when-not (nil? return-value)\n          (async/put! result-chan return-value))\n        (async/close! result-chan))\n\n      (swap! instances dissoc id)\n      (swap! instance-parent dissoc id)\n      (when parent-id\n        (swap! instance-children update-in [parent-id] disj id))))\n  \n  async-impl/ReadPort\n  (take! [this ^not-native handler]\n    (async-impl/take! result-chan handler))\n\n  IEquiv\n  (-equiv [this other]\n    (and (instance? ObjectRef other)\n         (= (-id this) (-id other))))\n\n  IDeref\n  (-deref [this] data)\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (-write writer (str \"#<ObjectRef {:id \" id \", :type \" type \"}>\")))\n\n  IWatchable\n  (-notify-watches [this oldval newval]\n    (throw (js/Error. \"who be calling?\")))\n  (-add-watch [this key f]\n    (set! watches (conj watches (Watch. key f))))\n  (-remove-watch [this key]\n    (set! watches (remove #(= key (:key %)) watches)))\n\n  ILookup\n  (-lookup [this k]\n    (if (= :parent k)\n      (get-parent this)\n      (get data k)))\n  (-lookup [this k d]\n    (if (= :parent k)\n      (get-parent this)\n      (get data k d)))\n\n  Object\n  (toString [this]\n    (pr-str this))\n\n  dom/IElement\n  (-to-dom [this] (::dom data))\n  \n  dom/SVGElement\n  (-to-svg [this] (::dom data)))\n\n(defn add-reaction!\n  ([oref ev handler-fn]\n     (add-reaction! oref [ev handler-fn]))\n  ([oref list]\n     (update! oref update-in [::reactions] merge-reactions list)\n     ))\n\n(defn bind-change\n  ([oref attr callback]\n     (bind-change oref attr callback (gensym \"bind-change\")))\n  ([oref attr callback watch-key]\n     (when-not (satisfies? IObject oref)\n       (throw (ex-info \"binding currently only supports shadow objects, other atoms might leak, may add later\" {:oref oref :attr attr})))\n\n     (let [attr (if (sequential? attr) attr [attr])]\n       (add-watch oref watch-key\n                  (fn bind-change-watch [_ _ old new]\n                    (let [ov (get-in old attr)\n                          nv (get-in new attr)]\n                      (when-not (= ov nv)\n                        (callback ov nv))))))\n     ))\n\n(defn dom-enter [parent child]\n  (dom/append parent child)\n  (when (dom/contains? parent)\n    ;; only notify when the parent is already in the dom\n    ;; not sure if its useful to keep track of this inside the object itself?\n    (notify-tree! child :dom/entered)))\n\n(defn create [type args & node-children]\n  (when-not (contains? @object-defs type)\n    (throw (ex-info (str \"cannot create unknown child type: \" type) {:type type :args args})))\n  (when-not (map? args)\n    (throw (ex-info \"so/create second arg must be a map\" {:args args})))\n\n  (let [oid (next-id)\n        parent (:parent args)\n        \n        result-chan (async/chan 1)\n\n        odef (get @object-defs type)\n\n        obj (-> args\n                (assoc ::object-id oid\n                       ::reactions (get odef ::reactions {}))\n                (merge-defaults type)\n                (dissoc :parent :dom))\n\n        oref (ObjectRef. oid type obj [] result-chan)]\n\n    ;; dont use oref before this\n    (swap! instances assoc oid oref)\n\n    (when parent\n      (set-parent! oref parent))\n\n    (notify! oref :init)\n\n    (let [dom-events (:dom/events odef [])]\n      (if-let [dom (:dom args)]\n        ;; attach+events\n        (do\n          (dom/set-data dom :oid oid)\n          (bind-dom-events oref dom dom-events)\n          (update! oref assoc ::dom dom)\n          (notify! oref :dom/init dom))\n        ;; create+events\n        (when-let [dom-fn (:dom odef)]\n          (let [dom (dom/build (dom-fn oref node-children))]\n\n            (dom/set-data dom :oid oid)\n\n            (update! oref assoc ::dom dom)\n            (bind-dom-events oref dom dom-events)\n            (notify! oref :dom/init dom)\n            ))))\n\n    (when-let [watches (:watch odef)]\n      (doseq [[attr handler] (partition 2 watches)]\n        (bind-change oref attr (fn [old new]\n                                 (handler oref old new)))))\n\n    oref))\n\n(defn bind-simple\n  \"[oref attr node-gen] produces a node via (node-gen new-value)\n   watches obj for changes and replaces the generated node on change (node-gen defaults to str)\n\n  only use if the node has no attached behavior like clicks, use bind with an extra object for those\"\n  ([oref attr] (bind-simple oref attr str))\n  ([oref attr node-gen]\n     (let [attr (if (sequential? attr) attr [attr])\n           node-get #(dom/build (node-gen %))\n           node (atom (node-get (get-in oref attr)))\n           bind-key (gensym \"bind\")]\n\n       (bind-change oref attr\n                    (fn [old new]\n                      (let [new-node (node-get new)\n                            current-node @node]\n                        (dom/replace-node current-node new-node)\n                        (reset! node new-node))))\n\n       @node)\n     ))\n\n(defn bind\n  \"bind the given attribute a child item\n  the item will be recreated whenever the value changes (old one will be destroyed)\"\n  ([oref attr item-type item-key item-attrs]\n     (let [attr (if (sequential? attr) attr [attr])\n           curval (get-in oref attr)\n\n           make-child-fn (fn [value]\n                           (create item-type (merge\n                                              item-attrs\n                                              {:parent oref\n                                               item-key value})))\n\n           child (atom (make-child-fn curval))]\n\n       (bind-change oref attr\n                    (fn [old new]\n                      (let [new-child (make-child-fn new)\n                            current-node @child]\n\n                        (dom/replace-node current-node new-child)\n                        (destroy! @child)\n                        (reset! child new-child)\n                        (notify-down! new-child :dom/entered)\n                        )))\n\n       @child)\n     ))\n\n(defn coll-destroy-children [children c diff]\n  ;; whats more efficient in the DOM, drop head or tail?\n  ;; diff is neg!\n  (doseq [obj (subvec children (+ c diff) c)]\n    (let [obj (get-from-dom obj)]\n      (destroy! obj)))\n\n  (subvec children 0 (+ c diff)))\n\n(defn bind-children\n  ([node parent attr item-type item-key]\n     (bind-children node parent attr item-type item-key #(map-indexed vector %)))\n  ([node parent attr item-type item-key coll-transform]\n     (let [attr (if (sequential? attr) attr [attr])\n\n           update-children (atom true)\n\n           coll-dom (dom/build node)\n\n           make-item-fn (fn [[key val]]\n                          (let [obj (create item-type {:parent parent\n                                                       ::coll-path attr\n                                                       ::coll-key key\n                                                       ::coll-item-key item-key\n                                                       item-key val})]\n\n                            (bind-change obj item-key\n                                         (fn [old new]\n                                           (let [parent-key (conj attr (::coll-key obj))]\n                                             (log \"direct child update\" parent obj key parent-key new)\n                                             (reset! update-children false)\n                                             (update! parent assoc-in parent-key new)\n                                             (reset! update-children true)\n                                             )))\n                            obj\n                            ))\n\n           ]\n\n       (doseq [item (coll-transform (get-in parent attr))]\n         (dom-enter coll-dom (make-item-fn item)))\n\n       (bind-change parent attr\n                    (fn bind-children-watch [old new]\n                      ;; when a child updated itself, we dont need to update it again\n                      (when @update-children\n                        (let [children (into [] (dom/children coll-dom))\n                              new-coll (vec (coll-transform new))\n                              count-children (count children)\n                              count-new (count new)\n                              diff (- count-new count-children)\n\n                              ;; exit lost children\n                              children (if (neg? diff)\n                                         (coll-destroy-children children count-children diff)\n                                         children)\n                              count-children (min count-new count-children)]\n\n                          ;; update current\n                          (dotimes [idx count-children]\n                            (let [cn (nth children idx)\n                                  cc (get-from-dom cn)\n                                  ckey (::coll-key cc)\n                                  cval (get cc item-key)\n                                  [nkey nval] (nth new-coll idx)]\n\n                              ;; only update when something changes\n                              (when-not (and (= ckey nkey) (= cval nval))\n                                ;; lets try this, updating gets way too messy when dealing with complex objects\n                                ;; just create a new object and destroy the old, also solves cyclic updates and should be faster\n                                (let [new-obj (make-item-fn [nkey nval])]\n                                  (dom/replace-node cn new-obj)\n                                  (destroy! cc)\n                                  (notify-tree! new-obj :dom/entered))\n                                ;;(update! cc assoc item-key nval ::coll-key nkey)\n                                ;;(notify! cc :bind-child-update ckey nkey cval nval)\n                                )))\n\n                          ;; enter new\n                          (when (pos? diff)\n                            (doseq [item (subvec new-coll count-children count-new)]\n                              (dom-enter coll-dom (make-item-fn item))))\n\n                          (notify! parent :bind-children-update)\n                          ))))\n\n       coll-dom)))\n\n(defn remove-in-parent! [oref]\n  (let [parent (get-parent oref)\n        key (::coll-key oref)\n        value (get oref (::coll-item-key oref))\n        path (::coll-path oref)]\n\n    (when-not (and key path)\n      (throw (ex-info \"remove-in-parent! should only be called from items created via so/bind-children\" {:oref oref})))\n\n    (let [coll (get-in parent path)\n          new-coll (util/remove-item-from-coll coll key value)]\n      (notify! parent :bind/update path new-coll))\n    ))\n\n(defn inspect! [oref]\n  (info \"inspect!\" (-id oref) (str (-type oref)) (clj->js @(-data oref))))\n\n(defn ^:export dump! []\n  (info \"--------------- LIVE OBJECTS ------------\")\n  (doseq [[id oref] (seq @instances)]\n    (info \"dump\" id (pr-str (-type oref)) @(-data oref)))\n  (info \"--------------- //LIVE OBJECTS ------------\")\n  )\n"]}