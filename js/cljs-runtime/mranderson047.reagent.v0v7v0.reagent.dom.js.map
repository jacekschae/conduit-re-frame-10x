{"version":3,"file":"mranderson047.reagent.v0v7v0.reagent.dom.js","sources":["mranderson047/reagent/v0v7v0/reagent/dom.cljs"],"mappings":"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","names":["mranderson047.reagent.v0v7v0.reagent.dom/imported","mranderson047.reagent.v0v7v0.reagent.dom/module","js/ReactDOM","js/require","or__3922__auto__","js/Error","mranderson047.reagent.v0v7v0.reagent.dom/roots","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","mranderson047.reagent.v0v7v0.reagent.dom/unmount-comp","container","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","mranderson047.reagent.v0v7v0.reagent.dom/render-comp","comp","callback","*always-update*24748","mranderson047.reagent.v0v7v0.reagent.impl.util/*always-update*","*always-update*24749","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","mranderson047.reagent.v0v7v0.reagent.impl.batching/flush-after-render","mranderson047.reagent.v0v7v0.reagent.dom/re-render-component","var_args","G__24751","mranderson047.reagent.v0v7v0.reagent.dom/render","mranderson047.reagent.v0v7v0.reagent.dom.render.cljs$core$IFn$_invoke$arity$3","mranderson047.reagent.v0v7v0.reagent.ratom/flush!","f","mranderson047.reagent.v0v7v0.reagent.impl.template/as-element","cljs.core/fn?","mranderson047.reagent.v0v7v0.reagent.dom/unmount-component-at-node","mranderson047.reagent.v0v7v0.reagent.dom/dom-node","this","mranderson047.reagent.v0v7v0.reagent.impl.template/find-dom-node","mranderson047.reagent.v0v7v0.reagent.dom/force-update-all","seq__24753","cljs.core/seq","chunk__24754","count__24755","i__24756","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","v","cljs.core/deref","cljs.core/vals","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns mranderson047.reagent.v0v7v0.reagent.dom\n  (:require [cljsjs.react.dom]\n            [mranderson047.reagent.v0v7v0.reagent.impl.util :as util]\n            [mranderson047.reagent.v0v7v0.reagent.impl.template :as tmpl]\n            [mranderson047.reagent.v0v7v0.reagent.impl.batching :as batch]\n            [mranderson047.reagent.v0v7v0.reagent.ratom :as ratom]\n            [mranderson047.reagent.v0v7v0.reagent.debug :refer-macros [dbg]]\n            [mranderson047.reagent.v0v7v0.reagent.interop :refer-macros [$ $!]]))\n\n(defonce ^:private imported nil)\n\n(defn module []\n  (cond\n    (some? imported) imported\n    (exists? js/ReactDOM) (set! imported js/ReactDOM)\n    (exists? js/require) (or (set! imported (js/require \"react-dom\"))\n                             (throw (js/Error. \"require('react-dom') failed\")))\n    :else\n    (throw (js/Error. \"js/ReactDOM is missing\"))))\n\n\n(defonce ^:private roots (atom {}))\n\n(defn- unmount-comp [container]\n  (swap! roots dissoc container)\n  ($ (module) unmountComponentAtNode container))\n\n(defn- render-comp [comp container callback]\n  (binding [util/*always-update* true]\n    (->> ($ (module) render (comp) container\n            (fn []\n              (binding [util/*always-update* false]\n                (swap! roots assoc container [comp container])\n                (batch/flush-after-render)\n                (if (some? callback)\n                  (callback))))))))\n\n(defn- re-render-component [comp container]\n  (render-comp comp container nil))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (render comp container nil))\n  ([comp container callback]\n   (ratom/flush!)\n   (let [f (fn []\n             (tmpl/as-element (if (fn? comp) (comp) comp)))]\n     (render-comp f container callback))))\n\n(defn unmount-component-at-node [container]\n  (unmount-comp container))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  [this]\n  ($ (module) findDOMNode this))\n\n(set! tmpl/find-dom-node dom-node)\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  []\n  (ratom/flush!)\n  (doseq [v (vals @roots)]\n    (apply re-render-component v))\n  \"Updated\")\n"]}