{"version":3,"file":"conduit.subs.js","sources":["conduit/subs.cljs"],"mappings":";;;AAGA,2BAAA,3BAAMA,8DAAaC,EAAEC;AAArB,AAAA;AAEE,OAACC,kBAAQD,EAAED;;AAEb,IAAAG,iBAAA;IAAAC,iBAEC;kBAAKE,GAAGC;AAAR,AACE,OAAA,gGAAcD;;;AAHjB,AAAA,2GAAAH,eAAAC,kDAAAD,eAAAC,1LAACC,sDAAAA,qFAAAA;AAKD,IAAAG,iBAAA;IAAAC,iBAEC;kBAAKH,GAAGC;AAAR,AACE,IAAMG,WAAS,AAAA,2FAAWJ;AAA1B,sJACOI,fACA,AAACC,vIACD,uDAAA,hDAACC,uGAAeb;;;AAN1B,AAAA,2GAAAS,eAAAC,kDAAAD,eAAAC,1LAACJ,sDAAAA,qFAAAA;AAQD,IAAAQ,iBAAA;IAAAC,iBAEC;kBAAKR,GAAGC;AAAR,AACE,OAAA,uGAAiBD;;;AAHpB,AAAA,2GAAAO,eAAAC,kDAAAD,eAAAC,1LAACT,sDAAAA,qFAAAA;AAKD,IAAAU,iBAAA;IAAAC,iBAEC;kBAAKV,GAAGC;AAAR,AACE,IAAMU,iBAAe,AAAA,wGAAiBX;AAAtC,AACE,yDAAA,mFAAA,rIAACY,+CAAOZ,mJAAcW;;;AAJ3B,AAAA,2GAAAF,eAAAC,kDAAAD,eAAAC,1LAACX,sDAAAA,qFAAAA;AAMD,IAAAc,iBAAA;IAAAC,iBAEC;kBAAKd,GAAGC;AAAR,AACE,OAAA,mFAAOD;;;AAHV,AAAA,2GAAAa,eAAAC,kDAAAD,eAAAC,1LAACf,sDAAAA,qFAAAA;AAKD,IAAAgB,iBAAA;IAAAC,iBAEC;kBAAKhB,GAAGC;AAAR,AACE,IAAMgB,WAAS,AAAA,2FAAWjB;AAA1B,sJACOiB,fACA,AAACZ,vIACD,uDAAA,hDAACC,uGAAeb;;;AAN1B,AAAA,2GAAAsB,eAAAC,kDAAAD,eAAAC,1LAACjB,sDAAAA,qFAAAA;AAQD,IAAAmB,iBAAA;IAAAC,iBAEC;kBAAKnB,GAAGC;AAAR,AACE,OAAA,yFAAUD;;;AAHb,AAAA,2GAAAkB,eAAAC,kDAAAD,eAAAC,1LAACpB,sDAAAA,qFAAAA;AAKD,IAAAqB,iBAAA;IAAAC,iBAEC;kBAAKrB,GAAGC;AAAR,AACE,OAAA,yFAAUD;;;AAHb,AAAA,2GAAAoB,eAAAC,kDAAAD,eAAAC,1LAACtB,sDAAAA,qFAAAA;AAKD,IAAAuB,iBAAA;IAAAC,iBAEC;kBAAKvB,GAAGC;AAAR,AACE,OAAA,uFAASD;;;AAHZ,AAAA,2GAAAsB,eAAAC,kDAAAD,eAAAC,1LAACxB,sDAAAA,qFAAAA;AAKD,IAAAyB,iBAAA;IAAAC,iBAEC;kBAAKzB,GAAGC;AAAR,AACE,OAAA,uFAASD;;;AAHZ,AAAA,2GAAAwB,eAAAC,kDAAAD,eAAAC,1LAAC1B,sDAAAA,qFAAAA;AAKD,IAAA2B,iBAAA;IAAAC,iBAEC;kBAAK3B,GAAGC;AAAR,AACE,OAAA,mFAAOD;;;AAHV,AAAA,2GAAA0B,eAAAC,kDAAAD,eAAAC,1LAAC5B,sDAAAA,qFAAAA","names":["conduit.subs/reverse-cmp","a","b","cljs.core/compare","G__27755","G__27756","re-frame.core/reg-sub","db","_","G__27759","G__27760","articles","cljs.core/vals","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3","G__27763","G__27764","G__27767","G__27768","active-article","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__27771","G__27772","G__27775","G__27776","comments","G__27779","G__27780","G__27786","G__27787","G__27801","G__27802","G__27805","G__27806","G__27815","G__27816"],"sourcesContent":["(ns conduit.subs\n  (:require [re-frame.core :refer [reg-sub subscribe]]))\n\n(defn reverse-cmp [a b] ;; https://clojure.org/guides/comparators\n  \"Sort numbers in decreasing order, i.e.: calls compare with the arguments in the opposite order\"\n  (compare b a))\n\n(reg-sub\n :active-page           ;; usage: (subscribe [:showing])\n (fn [db _]             ;; db is the (map) value stored in the app-db atom\n   (:active-page db)))  ;; extract a value from the application state\n\n(reg-sub\n :articles  ;; usage: (subscribe [:articles])\n (fn [db _]\n   (let [articles (:articles db)]\n     (->> articles\n          (vals)                            ;; get values from (:articles db)\n          (sort-by :epoch reverse-cmp)))))  ;; sort-by epoch in reverse order\n\n(reg-sub\n :articles-count  ;; usage: (subscribe [:articles])\n (fn [db _]\n   (:articles-count db)))\n\n(reg-sub\n :active-article  ;; usage (subscribe [:active-article])\n (fn [db _]\n   (let [active-article (:active-article db)]\n     (get-in db [:articles active-article]))))\n\n(reg-sub\n :tags  ;; usage: (subscribe [:tags])\n (fn [db _]\n   (:tags db)))\n\n(reg-sub\n :comments  ;; usage: (subscribe [:comments])\n (fn [db _]\n   (let [comments (:comments db)]\n     (->> comments\n          (vals)\n          (sort-by :epoch reverse-cmp)))))\n\n(reg-sub\n :profile  ;; usage: (subscribe [:profile])\n (fn [db _]\n   (:profile db)))\n\n(reg-sub\n :loading  ;; usage: (subscribe [:loading])\n (fn [db _]\n   (:loading db)))\n\n(reg-sub\n :filter  ;; usage: (subscribe [:filter])\n (fn [db _]\n   (:filter db)))\n\n(reg-sub\n :errors  ;; usage: (subscribe [:errors])\n (fn [db _]\n   (:errors db)))\n\n(reg-sub\n :user  ;; usage: (subscribe [:user])\n (fn [db _]\n   (:user db)))\n"]}