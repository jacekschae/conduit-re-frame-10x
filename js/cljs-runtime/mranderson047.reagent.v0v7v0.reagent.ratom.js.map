{"version":3,"file":"mranderson047.reagent.v0v7v0.reagent.ratom.js","sources":["mranderson047/reagent/v0v7v0/reagent/ratom.cljs"],"mappings":"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","names":["mranderson047.reagent.v0v7v0.reagent.ratom/debug","mranderson047.reagent.v0v7v0.reagent.ratom/generation","mranderson047.reagent.v0v7v0.reagent.ratom/-running","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","mranderson047.reagent.v0v7v0.reagent.ratom/reactive?","mranderson047.reagent.v0v7v0.reagent.ratom/*ratom-context*","mranderson047.reagent.v0v7v0.reagent.ratom/running","cljs.core/deref","mranderson047.reagent.v0v7v0.reagent.ratom/arr-len","x","mranderson047.reagent.v0v7v0.reagent.ratom/arr-eq","y","len","and__3911__auto__","i","or__3922__auto__","mranderson047.reagent.v0v7v0.reagent.ratom/in-context","obj","f","*ratom-context*24369","mranderson047.reagent.v0v7v0.reagent.ratom/deref-capture","r","res","c","mranderson047.reagent.v0v7v0.reagent.ratom/notify-deref-watcher!","derefed","temp__5461__auto__","mranderson047.reagent.v0v7v0.reagent.ratom/check-watches","old","new","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/+","cljs.core/count","mranderson047.reagent.v0v7v0.reagent.ratom/add-w","this","key","w","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","mranderson047.reagent.v0v7v0.reagent.ratom/remove-w","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","mranderson047.reagent.v0v7v0.reagent.ratom/notify-w","a","p1__24370#","p2__24371#","p3__24372#","cljs.core/reduce-kv","G__24373","k","mranderson047.reagent.v0v7v0.reagent.ratom/pr-atom","writer","opts","s","cljs.core/-write","cljs.core/pr-writer","*ratom-context*24377","cljs.core/-deref","mranderson047.reagent.v0v7v0.reagent.ratom/rea-queue","mranderson047.reagent.v0v7v0.reagent.ratom/rea-enqueue","mranderson047.reagent.v0v7v0.reagent.impl.batching/schedule","mranderson047.reagent.v0v7v0.reagent.ratom/flush!","q","n__4376__auto__","mranderson047.reagent.v0v7v0.reagent.impl.batching/ratom-flush","mranderson047.reagent.v0v7v0.reagent.ratom/IReactiveAtom","cljs.core/PROTOCOL_SENTINEL","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","mranderson047.reagent.v0v7v0.reagent.ratom/RAtom","mranderson047.reagent.v0v7v0.reagent.ratom/->RAtom","state","meta","validator","watches","o","other","new-value","js/Error","old-value","cljs.core/-reset!","more","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","_","goog/getUid","var_args","G__24384","mranderson047.reagent.v0v7v0.reagent.ratom/atom","args-arr__4512__auto__","len__4497__auto__","i__4498__auto__","argseq__4513__auto__","cljs.core/IndexedSeq","p__24385","map__24386","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq24382","G__24383","cljs.core/first","cljs.core/next","mranderson047.reagent.v0v7v0.reagent.ratom/cache-key","mranderson047.reagent.v0v7v0.reagent.ratom/cached-reaction","destroy","m","G__24392","G__24393","G__24394","mranderson047.reagent.v0v7v0.reagent.ratom/make-reaction","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/dec","v","cljs.core/inc","mranderson047.reagent.v0v7v0.reagent.ratom/Track","mranderson047.reagent.v0v7v0.reagent.ratom/->Track","args","reaction","temp__5459__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/hash","mranderson047.reagent.v0v7v0.reagent.ratom/make-track","mranderson047.reagent.v0v7v0.reagent.ratom/make-track!","t","G__24397","G__24398","G__24399","args__4500__auto__","argseq__4501__auto__","mranderson047.reagent.v0v7v0.reagent.ratom/track","seq24400","G__24401","cljs.core/ifn?","mranderson047.reagent.v0v7v0.reagent.ratom/track!","seq24405","G__24406","mranderson047.reagent.v0v7v0.reagent.ratom/RCursor","mranderson047.reagent.v0v7v0.reagent.ratom/->RCursor","ratom","path","*ratom-context*24410","oldstate","newstate","cljs.core/native-satisfies?","cljs.core/IDeref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/reset!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","G__24412","G__24413","G__24414","G__24415","G__24416","G__24417","mranderson047.reagent.v0v7v0.reagent.ratom/cursor","src","cljs.core/vector?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","mranderson047.reagent.v0v7v0.reagent.ratom/with-let-destroy","mranderson047.reagent.v0v7v0.reagent.ratom/with-let-values","cljs.core/array","x__4211__auto__","m__4212__auto__","mranderson047/reagent.v0v7v0.reagent.ratom.dispose!","goog/typeOf","cljs.core/missing-protocol","mranderson047/reagent.v0v7v0.reagent.ratom.add-on-dispose!","mranderson047.reagent.v0v7v0.reagent.ratom/IDisposable","mranderson047.reagent.v0v7v0.reagent.ratom/dispose!","mranderson047.reagent.v0v7v0.reagent.ratom/add-on-dispose!","mranderson047/reagent.v0v7v0.reagent.ratom.run","mranderson047.reagent.v0v7v0.reagent.ratom/IRunnable","mranderson047.reagent.v0v7v0.reagent.ratom/run","mranderson047.reagent.v0v7v0.reagent.ratom/handle-reaction-change","sender","p__24431","map__24432","mranderson047.reagent.v0v7v0.reagent.ratom/Reaction","mranderson047.reagent.v0v7v0.reagent.ratom/->Reaction","dirty?","nocache?","watching","auto-run","caught","was-empty","cljs.core/empty?","newval","cljs.core/fn?","oldval","G__24439","G__24440","G__24441","G__24442","G__24443","G__24444","*ratom-context*24421","cljs.core/set","seq__24422","cljs.core/seq","chunk__24423","count__24424","i__24425","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","cljs.core/-add-watch","seq__24426","chunk__24427","count__24428","i__24429","cljs.core/-remove-watch","e24430","e","check","on-set","on-dispose","no-cache","non-reactive","wg","seq__24434","chunk__24435","count__24436","i__24437","fexpr__24438","p__24507","map__24508","seq24505","G__24506","mranderson047.reagent.v0v7v0.reagent.ratom/temp-reaction","mranderson047.reagent.v0v7v0.reagent.ratom/run-in-reaction","run","mranderson047.reagent.v0v7v0.reagent.ratom/check-derefs","ctx","mranderson047.reagent.v0v7v0.reagent.ratom/Wrapper","mranderson047.reagent.v0v7v0.reagent.ratom/->Wrapper","callback","changed","mranderson047/reagent.v0v7v0.reagent.debug.has-console","mranderson047/reagent.v0v7v0.reagent.debug.tracking","mranderson047/reagent.v0v7v0.reagent.debug.track-console","js/console","cljs.core/not","mranderson047.reagent.v0v7v0.reagent.ratom/make-wrapper","value","callback-fn","mranderson047.reagent.v0v7v0.reagent.impl.util/make-partial-fn"],"sourcesContent":["(ns mranderson047.reagent.v0v7v0.reagent.ratom\n  (:refer-clojure :exclude [atom])\n  (:require-macros [mranderson047.reagent.v0v7v0.reagent.ratom :refer [with-let]])\n  (:require [mranderson047.reagent.v0v7v0.reagent.impl.util :as util]\n            [mranderson047.reagent.v0v7v0.reagent.debug :refer-macros [dbg log warn error dev? time]]\n            [mranderson047.reagent.v0v7v0.reagent.impl.batching :as batch]\n            [clojure.set :as s]))\n\n(declare ^:dynamic *ratom-context*)\n(defonce ^boolean debug false)\n(defonce ^:private generation 0)\n(defonce ^:private -running (clojure.core/atom 0))\n\n(defn ^boolean reactive? []\n  (some? *ratom-context*))\n\n\n;;; Utilities\n\n(defn running []\n  (+ @-running))\n\n(defn- ^number arr-len [x]\n  (if (nil? x) 0 (alength x)))\n\n(defn- ^boolean arr-eq [x y]\n  (let [len (arr-len x)]\n    (and (== len (arr-len y))\n         (loop [i 0]\n           (or (== i len)\n               (if (identical? (aget x i) (aget y i))\n                 (recur (inc i))\n                 false))))))\n\n(defn- in-context [obj f]\n  (binding [*ratom-context* obj]\n    (f)))\n\n(defn- deref-capture [f r]\n  (set! (.-captured r) nil)\n  (when (dev?)\n    (set! (.-ratomGeneration r) (set! generation (inc generation))))\n  (let [res (in-context r f)\n        c (.-captured r)]\n    (set! (.-dirty? r) false)\n    ;; Optimize common case where derefs occur in same order\n    (when-not (arr-eq c (.-watching r))\n      (._update-watching r c))\n    res))\n\n(defn- notify-deref-watcher! [derefed]\n  (when-some [r *ratom-context*]\n    (let [c (.-captured r)]\n      (if (nil? c)\n        (set! (.-captured r) (array derefed))\n        (.push c derefed)))))\n\n(defn- check-watches [old new]\n  (when debug\n    (swap! -running + (- (count new) (count old))))\n  new)\n\n(defn- add-w [this key f]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (assoc w key f)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- remove-w [this key]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (dissoc w key)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- notify-w [this old new]\n  (let [w (.-watchesArr this)\n        a (if (nil? w)\n            ;; Copy watches to array for speed\n            (->> (.-watches this)\n                 (reduce-kv #(doto %1 (.push %2) (.push %3)) #js[])\n                 (set! (.-watchesArr this)))\n            w)]\n    (let [len (alength a)]\n      (loop [i 0]\n        (when (< i len)\n          (let [k (aget a i)\n                f (aget a (inc i))]\n            (f k this old new))\n          (recur (+ 2 i)))))))\n\n(defn- pr-atom [a writer opts s]\n  (-write writer (str \"#<\" s \" \"))\n  (pr-writer (binding [*ratom-context* nil] (-deref a)) writer opts)\n  (-write writer \">\"))\n\n\n;;; Queueing\n\n(defonce ^:private rea-queue nil)\n\n(defn- rea-enqueue [r]\n  (when (nil? rea-queue)\n    (set! rea-queue (array))\n    (batch/schedule))\n  (.push rea-queue r))\n\n(defn flush! []\n  (loop []\n    (let [q rea-queue]\n      (when-not (nil? q)\n        (set! rea-queue nil)\n        (dotimes [i (alength q)]\n          (._queued-run (aget q i)))\n        (recur)))))\n\n(set! batch/ratom-flush flush!)\n\n\n;;; Atom\n\n(defprotocol IReactiveAtom)\n\n(deftype RAtom [^:mutable state meta validator ^:mutable watches]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IDeref\n  (-deref [this]\n    (notify-deref-watcher! this)\n    state)\n\n  IReset\n  (-reset! [a new-value]\n    (when-not (nil? validator)\n      (assert (validator new-value) \"Validator rejected reference state\"))\n    (let [old-value state]\n      (set! state new-value)\n      (when-not (nil? watches)\n        (notify-w a old-value new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IMeta\n  (-meta [_] meta)\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Atom:\"))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n(defn atom\n  \"Like clojure.core/atom, except that it keeps track of derefs.\"\n  ([x] (->RAtom x nil nil nil))\n  ([x & {:keys [meta validator]}] (->RAtom x meta validator nil)))\n\n\n;;; track\n\n(declare make-reaction)\n\n(def ^{:private true :const true} cache-key \"reagReactionCache\")\n\n(defn- cached-reaction [f o k obj destroy]\n  (let [m (aget o cache-key)\n        m (if (nil? m) {} m)\n        r (m k nil)]\n    (cond\n      (some? r) (-deref r)\n      (nil? *ratom-context*) (f)\n      :else (let [r (make-reaction\n                     f :on-dispose (fn [x]\n                                     (when debug (swap! -running dec))\n                                     (as-> (aget o cache-key) _\n                                       (dissoc _ k)\n                                       (aset o cache-key _))\n                                     (when (some? obj)\n                                       (set! (.-reaction obj) nil))\n                                     (when (some? destroy)\n                                       (destroy x))))\n                  v (-deref r)]\n              (aset o cache-key (assoc m k r))\n              (when debug (swap! -running inc))\n              (when (some? obj)\n                (set! (.-reaction obj) r))\n              v))))\n\n(deftype Track [f args ^:mutable reaction]\n  IReactiveAtom\n\n  IDeref\n  (-deref [this]\n    (if-some [r reaction]\n      (-deref r)\n      (cached-reaction #(apply f args) f args this nil)))\n\n  IEquiv\n  (-equiv [_ other]\n    (and (instance? Track other)\n         (= f (.-f other))\n         (= args (.-args other))))\n\n  IHash\n  (-hash [_] (hash [f args]))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Track:\")))\n\n(defn make-track [f args]\n  (Track. f args nil))\n\n(defn make-track! [f args]\n  (let [t (make-track f args)\n        r (make-reaction #(-deref t)\n                         :auto-run true)]\n    @r\n    r))\n\n(defn track [f & args]\n  {:pre [(ifn? f)]}\n  (make-track f args))\n\n(defn track! [f & args]\n  {:pre [(ifn? f)]}\n  (make-track! f args))\n\n;;; cursor\n\n(deftype RCursor [ratom path ^:mutable reaction\n                  ^:mutable state ^:mutable watches]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [_ other]\n    (and (instance? RCursor other)\n         (= path (.-path other))\n         (= ratom (.-ratom other))))\n\n  Object\n  (_peek [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_set-state [this oldstate newstate]\n    (when-not (identical? oldstate newstate)\n      (set! state newstate)\n      (when (some? watches)\n        (notify-w this oldstate newstate))))\n\n  IDeref\n  (-deref [this]\n    (let [oldstate state\n          newstate (if-some [r reaction]\n                     (-deref r)\n                     (let [f (if (satisfies? IDeref ratom)\n                               #(get-in @ratom path)\n                               #(ratom path))]\n                       (cached-reaction f ratom path this nil)))]\n      (._set-state this oldstate newstate)\n      newstate))\n\n  IReset\n  (-reset! [this new-value]\n    (let [oldstate state]\n      (._set-state this oldstate new-value)\n      (if (satisfies? IDeref ratom)\n        (if (= path [])\n          (reset! ratom new-value)\n          (swap! ratom assoc-in path new-value))\n        (ratom path new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek a))))\n  (-swap! [a f x]        (-reset! a (f (._peek a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek a) x y more)))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts (str \"Cursor: \" path)))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [_] (hash [ratom path])))\n\n(defn cursor\n  [src path]\n  (assert (or (satisfies? IReactiveAtom src)\n              (and (ifn? src)\n                   (not (vector? src))))\n          (str \"src must be a reactive atom or a function, not \"\n               (pr-str src)))\n  (->RCursor src path nil nil nil))\n\n\n;;; with-let support\n\n(defn with-let-destroy [v]\n  (when-some [f (.-destroy v)]\n    (f)))\n\n(defn with-let-values [key]\n  (if-some [c *ratom-context*]\n    (cached-reaction array c key\n                     nil with-let-destroy)\n    (array)))\n\n\n;;;; reaction\n\n(defprotocol IDisposable\n  (dispose! [this])\n  (add-on-dispose! [this f]))\n\n(defprotocol IRunnable\n  (run [this]))\n\n(defn- handle-reaction-change [this sender old new]\n  (._handle-change this sender old new))\n\n\n(deftype Reaction [f ^:mutable state ^:mutable ^boolean dirty? ^boolean nocache?\n                   ^:mutable watching ^:mutable watches ^:mutable auto-run\n                   ^:mutable caught]\n  IAtom\n  IReactiveAtom\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]\n    (let [was-empty (empty? watches)]\n      (remove-w this key)\n      (when (and (not was-empty)\n                 (empty? watches)\n                 (nil? auto-run))\n        (dispose! this))))\n\n  IReset\n  (-reset! [a newval]\n    (assert (fn? (.-on-set a)) \"Reaction is read only; on-set is not allowed\")\n    (let [oldval state]\n      (set! state newval)\n      (.on-set a oldval newval)\n      (notify-w a oldval newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek-at a))))\n  (-swap! [a f x]        (-reset! a (f (._peek-at a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek-at a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek-at a) x y more)))\n\n  Object\n  (_peek-at [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_handle-change [this sender oldval newval]\n    (when-not (or (identical? oldval newval)\n                  dirty?)\n      (if (nil? auto-run)\n        (do\n          (set! dirty? true)\n          (rea-enqueue this))\n        (if (true? auto-run)\n          (._run this false)\n          (auto-run this)))))\n\n  (_update-watching [this derefed]\n    (let [new (set derefed)\n          old (set watching)]\n      (set! watching derefed)\n      (doseq [w (s/difference new old)]\n        (-add-watch w this handle-reaction-change))\n      (doseq [w (s/difference old new)]\n        (-remove-watch w this))))\n\n  (_queued-run [this]\n    (when (and dirty? (some? watching))\n      (._run this true)))\n\n  (_try-capture [this f]\n    (try\n      (set! caught nil)\n      (deref-capture f this)\n      (catch :default e\n        (set! state e)\n        (set! caught e)\n        (set! dirty? false))))\n\n  (_run [this check]\n    (let [oldstate state\n          res (if check\n                (._try-capture this f)\n                (deref-capture f this))]\n      (when-not nocache?\n        (set! state res)\n        ;; Use = to determine equality from reactions, since\n        ;; they are likely to produce new data structures.\n        (when-not (or (nil? watches)\n                      (= oldstate res))\n          (notify-w this oldstate res)))\n      res))\n\n  (_set-opts [this {:keys [auto-run on-set on-dispose no-cache]}]\n    (when (some? auto-run)\n      (set! (.-auto-run this) auto-run))\n    (when (some? on-set)\n      (set! (.-on-set this) on-set))\n    (when (some? on-dispose)\n      (set! (.-on-dispose this) on-dispose))\n    (when (some? no-cache)\n      (set! (.-nocache? this) no-cache)))\n\n  IRunnable\n  (run [this]\n    (flush!)\n    (._run this false))\n\n  IDeref\n  (-deref [this]\n    (when-some [e caught]\n      (throw e))\n    (let [non-reactive (nil? *ratom-context*)]\n      (when non-reactive\n        (flush!))\n      (if (and non-reactive (nil? auto-run))\n        (when dirty?\n          (let [oldstate state]\n            (set! state (f))\n            (when-not (or (nil? watches) (= oldstate state))\n              (notify-w this oldstate state))))\n        (do\n          (notify-deref-watcher! this)\n          (when dirty?\n            (._run this false)))))\n    state)\n\n  IDisposable\n  (dispose! [this]\n    (let [s state\n          wg watching]\n      (set! watching nil)\n      (set! state nil)\n      (set! auto-run nil)\n      (set! dirty? true)\n      (doseq [w (set wg)]\n        (-remove-watch w this))\n      (when (some? (.-on-dispose this))\n        (.on-dispose this s))\n      (when-some [a (.-on-dispose-arr this)]\n        (dotimes [i (alength a)]\n          ((aget a i) this)))))\n\n  (add-on-dispose! [this f]\n    ;; f is called with the reaction as argument when it is no longer active\n    (if-some [a (.-on-dispose-arr this)]\n      (.push a f)\n      (set! (.-on-dispose-arr this) (array f))))\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts (str \"Reaction \" (hash a) \":\")))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n\n(defn make-reaction [f & {:keys [auto-run on-set on-dispose]}]\n  (let [reaction (->Reaction f nil true false nil nil nil nil)]\n    (._set-opts reaction {:auto-run auto-run\n                          :on-set on-set\n                          :on-dispose on-dispose})\n    reaction))\n\n\n\n(def ^:private temp-reaction (make-reaction nil))\n\n(defn run-in-reaction [f obj key run opts]\n  (let [r temp-reaction\n        res (deref-capture f r)]\n    (when-not (nil? (.-watching r))\n      (set! temp-reaction (make-reaction nil))\n      (._set-opts r opts)\n      (set! (.-f r) f)\n      (set! (.-auto-run r) #(run obj))\n      (aset obj key r))\n    res))\n\n(defn check-derefs [f]\n  (let [ctx (js-obj)\n        res (in-context ctx f)]\n    [res (some? (.-captured ctx))]))\n\n\n;;; wrap\n\n(deftype Wrapper [^:mutable state callback ^:mutable ^boolean changed\n                  ^:mutable watches]\n\n  IAtom\n\n  IDeref\n  (-deref [this]\n    (when (dev?)\n      (when (and changed (some? *ratom-context*))\n        (warn \"derefing stale wrap: \"\n              (pr-str this))))\n    state)\n\n  IReset\n  (-reset! [this newval]\n    (let [oldval state]\n      (set! changed true)\n      (set! state newval)\n      (when (some? watches)\n        (notify-w this oldval newval))\n      (callback newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IEquiv\n  (-equiv [_ other]\n          (and (instance? Wrapper other)\n               ;; If either of the wrappers have changed, equality\n               ;; cannot be relied on.\n               (not changed)\n               (not (.-changed other))\n               (= state (.-state other))\n               (= callback (.-callback other))))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Wrap:\")))\n\n(defn make-wrapper [value callback-fn args]\n  (->Wrapper value\n             (util/make-partial-fn callback-fn args)\n             false nil))\n\n\n\n\n#_(do\n  (defn ratom-perf []\n    (set! debug false)\n    (dotimes [_ 10]\n      (let [nite 100000\n            a (atom 0)\n            f (fn []\n                (quot @a 10))\n            mid (make-reaction f)\n            res (track! (fn []\n                          ;; (with-let [x 1])\n                          ;; @(track f)\n                          (inc @mid)\n                          ))]\n        @res\n        (time (dotimes [x nite]\n                (swap! a inc)\n                (flush!)))\n        (dispose! res))))\n  (ratom-perf))\n"]}